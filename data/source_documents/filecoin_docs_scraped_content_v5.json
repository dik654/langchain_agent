[
  {
    "url": "https://docs.filecoin.io/",
    "content": "Welcome to Filecoin Docs\nFilecoin is a decentralized, peer-to-peer network enabling anyone to store and retrieve data over the internet. Economic incentives are built in, ensuring files are stored and accessible reliably over\nNext\nWhat is Filecoin\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/assets",
    "content": "Basics\nAssets\nThe section covers the assets you can find on the Filecoin network, along with how to securely manage and use them.\nPrevious\nProofs\nNext\nThe FIL token\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/assets/get-fil",
    "content": "Basics\nAssets\nGet FIL\nThe most common way to get FIL is to use an exchange. You should be aware of some specific steps when trying to transfer FIL from an exchange to your wallet.\nPrevious\nMetamask setup\nNext\nTransfer FIL\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/assets/metamask-setup",
    "content": "Basics\nAssets\nMetamask setup\nMetaMask is a popular browser extension that allows users to interact with blockchain applications. This guide shows you how to configure MetaMask to work with the Filecoin\nPrevious\nWallets\nNext\nGet FIL\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/assets/the-fil-token",
    "content": "Basics\nAssets\nThe FIL token\nFIL is the cryptocurrency that powers the Filecoin network. This page explains what FIL is, how it can be used, and its denominations.\nPrevious\nAssets\nNext\nWallets\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/assets/transfer-fil",
    "content": "Basics\nAssets\nTransfer FIL\nDue to the nature of Filecoin and Ethereum having different address types in the Filecoin network, the process for transferring FIL between addresses can be a bit nuanced.\nPrevious\nGet FIL\nNext\nInterplanetary consensus\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/assets/wallets",
    "content": "Basics\nAssets\nWallets\nWallets provide a way to securely store Filecoin, along with other digital assets. These wallets consist of a public and private key, which work similarly to a bank account number and password.\nPrevious\nThe FIL token\nNext\nMetamask setup\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-retrieval-works",
    "content": "Basics\nHow retrieval works\nThis section covers the very basics of how retrieving data works on the Filecoin network.\nPrevious\nFilecoin and IPFS\nNext\nBasic retrieval\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-retrieval-works/basic-retrieval",
    "content": "Basics\nHow retrieval works\nBasic retrieval\nThere are multiple ways to fetch data from a storage provider. This page covers some of the most popular methods.\nPrevious\nHow retrieval works\nNext\nServing retrievals\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-retrieval-works/saturn",
    "content": "Basics\nHow retrieval works\nSaturn\nFilecoin Saturn is an open-source, community-run Content Delivery Network (CDN) built on Filecoin.\nPrevious\nServing retrievals\nNext\nProject and community\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-retrieval-works/serving-retrievals",
    "content": "Basics\nHow retrieval works\nServing retrievals\nIn this article, we will discuss the functions of storage providers in the Filecoin network, the role of the indexer, and the retrieval process for publicly available data.\nThe indexer\nWhen a storage deal is originally made, the client can opt to make the data publicly discoverable. If this is the case, the storage provider must publish an advertisement of the storage deal to the Interplanetary Network Indexer (IPNI). IPNI maps a CID to a storage provider (SP). This mapping allows clients to query the IPNI to discover where content is on Filecoin.\nThe IPNI also tracks which data transfer protocols you can use to retrieve specific CIDs. Currently, Filecoin SPs have the ability to serve retrievals over Graphsync, Bitswap, and HTTP. This is dependent on the SP setup.\nRetrieval process\nIf a client wants to retrieve publicly available data from the Filecoin network, then they generally follow this process.\nQuery the IPNI\nBefore the client can submit a retrieval deal to a storage provider, they first need to find which providers hold the data. To do this, the client sends a query to the Interplanetary Network Indexer.\nSelect a provider\nAssuming the IPNI returns more than one storage provider, the client can select which provider they’d like to deal with. Here, they will also get additional details (if needed) based on the retrieval protocol they want to retrieve the content over.\nInitiate retrieval\nThe client then attempts to retrieve the data from the SP over Bitswap, Graphsync, or HTTP. Note that currently, clients can only get full-piece retrievals using HTTP.\nWhen attempting this retrieval deal using Graphsync, payment channels are used to pay FIL to the storage provider. These payment channels watch the data flow and pay the storage provider after each chunk of data is retrieved successfully.\nFinalize the retrieval\nOnce the client has received the last chunk of data, the connection is closed.\nPrevious\nBasic retrieval\nNext\nSaturn\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-storage-works",
    "content": "Basics\nHow storage works\nThis section covers the very basics of storing data works on the Filecoin network.\nPrevious\nInterplanetary consensus\nNext\nFilecoin plus\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-storage-works/filecoin-and-ipfs",
    "content": "Basics\nHow storage works\nFilecoin and IPFS\nExplore the features that make Filecoin a compelling system for storing files. This is an overview of features offered by Filecoin that make it a compelling system for storing files.\nPrevious\nStorage onramps\nNext\nHow retrieval works\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-storage-works/filecoin-plus",
    "content": "Basics\nHow storage works\nFilecoin plus\nPrevious\nHow storage works\nNext\nStorage onramps\nLast updated\n27 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/how-storage-works/storage-onramps",
    "content": "Basics\nHow storage works\nStorage onramps\nStorage on-ramps and helpers are APIs and services that abstract Filecoin dealmaking into simple, streamlined API calls.\nPrevious\nFilecoin plus\nNext\nFilecoin and IPFS\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/interplanetary-consensus",
    "content": "Basics\nInterplanetary consensus\nInterPlanetary Consensus (IPC) powers planetary-scale decentralized applications (dApps) through horizontal scalability of Filecoin, Ethereum and more.\nWhat is IPC?\nInterplanetary Consensus (IPC)\nis a framework that enables on-demand horizontal scalability of networks, by deploying \"subnets\" running different consensus algorithms depending on the application's requirements.\nWhat is horizontal scalability and why is it important for dApps?\nHorizontal scalability\ngenerally refers to the addition of nodes to a system, to increase its performance. For example, adding more nodes to a compute network helps distribute the effort needed to run a single compute task. This reduces cost per task and decreases latency, while improving overall throughput.\nIn web3, horizontal scalability refers to\nscaling\nblockchains, for\ndesired\nperformance. More specifically,\nscaling\nthe ability of a blockchain to process transactions and achieve consensus, across an increasing number of users, at\ndesired\nlatencies and throughput. IPC is one such scaling solution, alongside other popular layer 2 solutions, like\nsidechains\nand\nrollups\n.\nFor decentralized applications (dApps), there are several key motivations to adopt scaling - performance, decentralization, security. The challenge is that these factors are known to be conflicting goals.\nHow does IPC achieve horizontal scalability?\nIPC is a scaling solution intentionally designed to achieve considerable performance, decentralization and security for dApps.\nIt achieves scaling through the permissionless spawning of new blockchain sub-systems, which are composed of\nsubnets\n.\nSubnets are organized in a hierarchy, with one parent subnet being able to spawn infinite child subnets. Within a hierarchical subsystem, subnets can seamlessly communicate with each other, reducing the need for cross-chain bridges.\nSubnets also have their own specific consensus algorithms, whilst leveraging security features from parent subnets. This allows dApps to use subnets for hosting sets of applications or to\nshard\na single application, according to its various cost or performance needs.\nHow is IPC unique as a scaling solution?\nEarlier, we talked about the challenge of scaling solutions to balance performance, security and decentralization. IPC is a standout framework that strikes a considerable balance between these factors, to achieve breakthroughs in scaling.\nHighly customizable without compromising security.\nMost L2 scaling solutions today either inherit the L1's security features but don't have their own consensus algorithms (e.g. rollups), or do the reverse (e.g. sidechains). They are also deployed in isolation and require custom bridges or protocols to transfer assets and state between L2s that share a common L1, which are vulnerable to attacks. In contrast, IPC subnets have their own consensus algorithms, inherit security features from the parent subnet and have native cross-net communication, eliminating the need for bridges.\nMulti-chain interoperability.\nIPC uses the\nFilecoin Virtual Machine (FVM)\nas its transaction execution layer. The FVM is a WASM-based polyglot execution environment for IPLD data and is designed to support smart contracts written in any programming language, compiled to WASM. It currently supports Filecoin and Ethereum. Today, IPC is fully compatible with Filecoin and Ethereum and can use either as a rootnet. IPC will eventually allow any chain to be taken as rootnet.\nTight storage integration with Filecoin.\nIPC was designed from the data-centric L1,\nFilecoin\n, which is the largest decentralized storage network. IPC can leverage its storage primitives, like IPLD data integration, to deliver enhanced solutions for data availability and more.\nApplications of IPC\nHere are some practical examples of how IPC improves the performance of dApps:\nDistributed Computation\n: Spawn ephemeral subnets to run distributed computation jobs.\nCoordination\n: Assemble into smaller subnets for decentralized orchestration with high throughput and low fees.\nLocalization\n: Leverage proximity to improve performance and operate with very low latency in geographically constrained settings.\nPartition tolerance\n: Deploy blockchain substrates in mobile settings or other environments with limited connectivity.\nWith better performance, lower fees and faster transactions, IPC can rapidly improve horizontal and vertical markets with decentralized technology:\nArtificial Intelligence:\nIPC is fully compatible with\nFilecoin\n, the world’s largest decentralized data storage. Leveraging Filecoin, IPC can enable distributed computation to power hundreds of innovative AI models.\nDecentralized Finance (DeFi):\nEnabling truly high-frequency trading and traditional backends with verifiability and privacy.\nBig Data and Data Science:\nMultiple teams are creating global-scale distributed compute networks to enable Data Science analysis on Exabytes of decentralized stored data.\nMetaverse/Gaming:\nEnabling real-time tracking of player interactions in virtual worlds.\nDAOs:\nAssemble into smaller subnets for decentralized orchestration with high throughput and low fees. Partition tolerance: Deploy blockchain substrates in mobile settings or other environments with limited connectivity.\nGet involved\nVisit the\nwebsite\nRead the\ndocs\nCheck out the\nrepository\nConnect with the community on\nDiscord\nWas this page helpful?\nPrevious\nTransfer FIL\nNext\nHow storage works\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community",
    "content": "Basics\nProject and community\nThis section contains information about the Filecoin project as a whole, and how you can interact with the community.\nPrevious\nSaturn\nNext\nChat and discussion forums\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community/chat-and-discussion-forums",
    "content": "Basics\nProject and community\nChat and discussion forums\nConnect with the Filecoin community in discussion forums or on IRC. The Filecoin community is active and here to answer your questions in your channel of choice.\nPrevious\nProject and community\nNext\nFilecoin compared to\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community/filecoin-compared-to",
    "content": "Basics\nProject and community\nFilecoin compared to\nWhile Filecoin shares some similarities to other file storage solutions, the protocol has significant differences that one should consider.\nPrevious\nChat and discussion forums\nNext\nFilecoin FAQs\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community/filecoin-faqs",
    "content": "Basics\nProject and community\nFilecoin FAQs\nAnswers to your frequently asked questions on everything from Filecoin’s crypto-economics and storage expenses to hardware and networking.\nPrevious\nFilecoin compared to\nNext\nRelated projects\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community/related-projects",
    "content": "Basics\nProject and community\nRelated projects\nFilecoin is a highly modular project that is itself made out of many different protocols and tools. Many of these exist as their own projects, supported by Protocol Labs. Learn more about them below.\nPrevious\nFilecoin FAQs\nNext\nSocial media\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community/social-media",
    "content": "Basics\nProject and community\nSocial media\nFilecoin is everywhere on the internet — and that includes social media. Find your favorite flavor here.\nPrevious\nRelated projects\nNext\nThe Filecoin project\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community/the-filecoin-project",
    "content": "Basics\nProject and community\nThe Filecoin project\nCurious about how it all got started, or where we’re headed? Learn about the history, current state, and future trajectory of the Filecoin project here.\nPrevious\nSocial media\nNext\nWays to contribute\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/project-and-community/ways-to-contribute",
    "content": "Basics\nProject and community\nWays to contribute\nSo you want to contribute to Filecoin and the ecosystem? Here is a quick listing of things to which you can contribute and an overview on how you can get started.\nPrevious\nThe Filecoin project\nNext\nBasics\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/the-blockchain",
    "content": "Basics\nThe blockchain\nThis section covers the basic concepts surrounding the Filecoin blockchain.\nPrevious\nNetworks\nNext\nActors\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/the-blockchain/actors",
    "content": "Basics\nThe blockchain\nActors\nActors are smart contracts that run on the Filecoin virtual machine (FVM) and are used to manage, query, and update the state of the Filecoin network. Smart contracts are small, self-executing blocks.\nPrevious\nThe blockchain\nNext\nAddresses\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/the-blockchain/addresses",
    "content": "Basics\nThe blockchain\nAddresses\nA Filecoin address is an identifier that refers to an actor in the Filecoin state. All actors (miner actors, the storage market actor, account actors) have an address.\nAll Filecoin addresses begin with an\nf\nto indicate the network (Filecoin), followed by any of the address prefix numbers (\n0\n,\n1\n,\n2\n,\n3\n,\n4\n) to indicate the address type. There are five address types:\nAddress prefix\nDescription\n0\nAn ID address.\n1\n2\nAn actor address.\n3\n4\nExtensible, user-defined actor addresses.\nf410\naddresses refers to Ethereum-compatible address space, each\nf410\naddress is equivalent to an\n0x\naddress.\nEach of the address types is described below.\nActor IDs\nAll actors have a short integer assigned to them by\nInitActor\n, a unique actor that can create\nnew\nactors. This integer that gets assigned is the ID of that actor. An\nID address\nis an actor’s ID prefixed with the network identifier and the address type.\nActor ID addresses are not\nrobust\nin the sense that they depend on chain state and are defined on-chain by the\nInitActor\n. Additionally, actor IDs can change for a brief time after creation if the same ID is assigned to different actors on different forks. Actor ID addresses are similar to monotonically increasing numeric primary keys in a relational database. So, when a chain reorganization occurs (similar to a rollback in a SQL database), you can refer to the same ID for different rows. The expected consensus algorithm will resolve the conflict. Once the state that defines a new ID reaches finality, no changes can occur, and the ID is bound to that actor forever.\nFor example, the mainnet burn account ID address,\nf099\n, is structured as follows:\nAddress type\n|\nf 0 9 9\n|    |\n|    Actor ID\n|\nNetwork identifier\nID addresses are often referred to by their shorthand\nf0\n.\nPublic keys\nActors managed directly by users, like accounts, are derived from a public-private key pair. If you have access to a private key, you can sign messages sent from that actor. The public key is used to derive an address for the actor. Public key addresses are referred to as\nrobust addresses\nas they do not depend on the Filecoin chain state.\nPublic key addresses allow devices, like hardware wallets, to derive a valid Filecoin address for your account using just the public key. The device doesn’t need to ask a remote node what your ID address is. Public key addresses provide a concise, safe, human-readable way to reference actors before the chain state is final. ID addresses are used as a space-efficient way to identify actors in the Filecoin chain state, where every byte matters.\nFilecoin supports two types of public key addresses:\nFor BLS addresses, Filecoin uses\ncurve bls12-381\nfor BLS signatures, which is a pair of two related curves,\nG1\nand\nG2\n.\nFilecoin uses\nG1\nfor public keys, as G1 allows for a smaller representation of public keys and\nG2\nfor signatures. This implements the same design as ETH2 but contrasts with Zcash, which has signatures on\nG1\nand public keys on\nG2\n. However, unlike ETH2, which stores private keys in big-endian order, Filecoin stores and interprets private keys in little-endian order.\nPublic key addresses are often referred to by their shorthand,\nf1\nor\nf3\n.\nActors\nActor addresses provide a way to create robust addresses for actors not associated with a public key. They are generated by taking a\nsha256\nhash of the output of the account creation. The ZH storage provider has the actor address\nf2plku564ddywnmb5b2ky7dhk4mb6uacsxuuev3pi\nand the ID address\nf01248\n.\nActor addresses are often referred to by their shorthand,\nf2\n.\nExtensible user-defined actors\nA predictable addressing scheme to support interactions with addresses that do not yet exist on-chain.\nUser-defined, custom addressing systems without extensive changes and network upgrades.\nSupport for native addressing schemes from foreign runtimes such as the EVM.\nAn\nf4\naddress is structured as\nf4<address-manager-actor-id>f<new-actor-id>\n, where\n<address-manager-actor-id>\nis the actor ID of the\naddress manager\n, and\n<new-actor-id>\nis the arbitrary actor ID chosen by that actor. An\naddress manager\nis an actor that can create new actors and assign an\nf4\naddress to the new actor.\nAs an example, suppose an address manager has an actor ID (an\nf0\naddress)\n123\n, and that address manager creates a new actor. Then, the\nf4\naddress of the actor created by the address manager is\nf4123fa3491xyz\n, where\nf4\nis the address class,\n123\nis the actor ID of the address manager,\nf\nis a separator, and\na3491xyz\nis the arbitrary\n<new-actor-id>\nchosen by that actor.\nPrevious\nActors\nNext\nBlocks and tipsets\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/the-blockchain/blocks-and-tipsets",
    "content": "Basics\nThe blockchain\nBlocks and tipsets\nLike many other blockchains, blocks are a fundamental concept in Filecoin. Unlike other blockchains, Filecoin is a chain of groups of blocks called tipsets rather than a chain of individual blocks.\nBlocks\nIn Filecoin, a block consists of:\nA block header\nA list of\nmessages\ncontained in the block\nA signed copy of each message listed\nEvery block refers to at least one\nparent block\n; that is, a block produced in a prior epoch.\nA\nmessage\nrepresents communication between two actors and thus changes in network state. The messages are listed in their order of appearance, deduplicated, and returned in canonical order of execution. So, in other words, a block describes all changes to the network state in a given epoch.\nBlocktime\nBlocktime is a concept that represents the average time it takes to mine or produce a new block on a blockchain. In Ethereum, for example, the blocktime is approximately 15 seconds on average, meaning that a new block is added to the Ethereum blockchain roughly every 15 seconds.\nIn the Filecoin network, storage providers compete to produce blocks by providing storage capacity and participating in the consensus protocol. The block time determines how frequently new blocks are added to the blockchain, which impacts the overall speed and responsiveness of the network.\nFilecoin has a block time of 30 seconds, and this duration was chosen for two main reasons:\nHardware requirements\n: If the block time were faster while maintaining the same gas limit or the number of messages per block, it would lead to increased hardware requirements. This includes the need for more storage space to accommodate the larger chain data resulting from more frequent block production.\nStorage provider operations\n: The block time also takes into account the various operations that occur during that duration on the storage provider (SP) side. As SPs generate new blocks, the 30-second block time allows for the necessary processes and computations to be carried out effectively. If the blocktime were shorter, SPs would encounter significantly more blocktime failures.\nBy considering these factors, the Filecoin network has established a block time of 30 seconds, balancing the need for efficient operations and hardware requirements.\nTipsets\nBenefits of tipsets\nIn other blockchains, blocks are used as the fundamental representation of network state, that is, the overall status of each participant in the network at a given time. However, this structure has the following disadvantages:\nPotential block producers may be hobbled by network latency.\nNot all valid work is rewarded.\nDecentralization and collaboration in block production are not incentivized.\nBecause Filecoin is a chain of tipsets rather than individual blocks, the network enjoys the following benefits:\nAll valid blocks generated in a given round are used to determine network state, increasing network efficiency and throughput.\nAll valid work is rewarded (that is, all validated block producers in an epoch receive a block reward).\nAll potential block producers are incentivized to produce blocks, disincentivizing centralization and promoting collaboration.\nBecause all blocks in a tipset have the same height and parent, Filecoin is able to achieve rapid convergence in the case of forks.\nIn summary, blocks, which contain actor messages, are grouped into tipsets in each epoch, which can be thought of as the overall description of the network state for a given epoch.\nTipsets in the Ethereum JSON-RPC\nWherever you see the term\nblock\nin the Ethereum JSON-RPC, you should mentally read\ntipset\n. Before the inclusion of the Filecoin EVM runtime, there was no single hash referring to a tipset. A tipset ID was the concatenation of block CIDs, which led to a variable-length ID and poor user experience.\nWith the Ethereum JSON-RPC, we introduced the concept of the\ntipset CID\nfor the first time. It is calculated by hashing the former\ntipset key\nusing a Blake-256 hash. Therefore, when you see the term:\nblock hash\n, think\ntipset hash\n.\nblock height\n, think\ntipset epoch\n.\nblock messages\n, think\nmessages in all blocks in a tipset, in their order of appearance, deduplicated and returned in canonical order of execution\n.\nPrevious\nAddresses\nNext\nConsensus\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/the-blockchain/consensus",
    "content": "Basics\nThe blockchain\nConsensus\nIn the Filecoin blockchain, network consensus is achieved using the Expected Consensus (EC) algorithm, a secret, fair, and verifiable consensus protocol used by the network to agree on the chain state\nPrevious\nBlocks and tipsets\nNext\nDrand\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/the-blockchain/drand",
    "content": "Basics\nThe blockchain\nDrand\nDrand, pronounced dee-rand, is a distributed randomness beacon daemon written in Golang.\nPrevious\nConsensus\nNext\nProofs\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/the-blockchain/proofs",
    "content": "Basics\nThe blockchain\nProofs\nIn Filecoin cryptographic proving systems, often simply referred to as proofs, are used to validate that a storage provider (SP) is properly storing data.\nPrevious\nDrand\nNext\nAssets\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin",
    "content": "Basics\nWhat is Filecoin\nThis section offers a detailed overview of Filecoin for developers, serving as a go-to reference for their needs.\nPrevious\nWelcome to Filecoin Docs\nNext\nCrypto-economics\nLast updated\n6 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin/blockchain",
    "content": "Basics\nWhat is Filecoin\nBlockchain\nA blockchain is a distributed database shared among nodes in a computer network. This page covers the design and functions of the Filecoin blockchain.\nBlockchain\nTipsets\nA tipset is a set of blocks with the same height, allowing multiple storage providers to produce blocks in each epoch, increasing network throughput. The Filecoin blockchain consists of a chain of tipsets rather than individual blocks. Each tipset is assigned a weight, enabling the consensus protocol to guide nodes to build on the heaviest chain and preventing interference from nodes attempting to produce invalid blocks.\nActors\nActors are ‘objects’ within the Filecoin network, each with a state and a set of methods for interaction, that pass messages to each other and ensure the system operates appropiately.\nBuilt-in actors\nSeveral built-in system actors power the Filecoin network as a decentralized storage network:\nInit actor\n: Initializes new actors and records the network name.\nCron actor\n: Scheduler that runs critical functions at every epoch.\nAccount actor\n: Manages user accounts (non-singleton).\nReward actor\n: Manages block rewards and token vesting (singleton).\nStorage miner actor\n: Manages storage mining operations and validates storage proofs.\nStorage power actor\n: Tracks storage power allocation for each provider.\nStorage market actor\n: Manages storage deals.\nMultisig actor\n: Handles Filecoin multi-signature wallet operations.\nPayment channel actor\n: Sets up and settles payment channel funds.\nDatacap actor\n: Manages datacap tokens.\nVerified registry actor\n: Manages verified clients.\nEthereum Address Manager (EAM) actor\n: Assigns Ethereum-compatible addresses on Filecoin, including EVM smart contract addresses.\nEthereum Virtual Machine (EVM) account actor\n: Represents an external Ethereum identity backed by a secp256k1 key.\nSystem actor\n: General system actor.\nNodes\nFilecoin nodes are categorized by the services they provide to the storage network, including chain verifier nodes, client nodes, storage provider nodes, and retrieval provider nodes. All participating nodes must provide chain verification services.\nFilecoin supports multiple protocol implementations to enhance security and resilience. Active implementations include:\nAddresses\nIn the Filecoin network, addresses identify actors in the Filecoin state. Each address encodes information about the corresponding actor, making it easy to use and resistant to errors. Filecoin has five address types. Mainnet addresses start with\nf\n, and Testnet addresses start with\nt\n.\nf0/t0\n: ID address for an actor in a human-readable format, such as\nf0123261\nfor a storage provider.\nf1/t1\n: secp256k1 wallet address, generated from an encrypted secp256k1 public key.\nf2/t2\n: Address assigned to an actor in a way that ensures stability across network forks.\nf3/t3\n: BLS wallet address, generated from a BLS public key.\nf4/t4\n: Address created and assigned to user-defined actors by customizable \"address management\" actors. This address can receive funds before an actor is deployed.\nf410/t410\n: Address space managed by the Ethereum Address Manager (EAM) actor, allowing Ethereum-compatible addresses to interact seamlessly with the Filecoin network. Ethereum addresses can be cast as\nf410/t410\naddresses and vice versa, enabling compatibility with existing Ethereum tools.\nConsensus\nExpected consensus\nExpected Consensus (EC) is the probabilistic, Byzantine fault-tolerant consensus algorithm underlying Filecoin. EC conducts a leader election among storage providers each epoch to determine which provider submits a block. Similar to proof-of-stake, Filecoin’s leader election relies on proof-of-storage, meaning the probability of being elected depends on how much provable storage a miner contributes to the network --measured in something called \"storage power\".\nUltimately, the EC process ends by gathering all valid blocks produced in an epoch to a tipset, applying a weighting function to select the heaviest chain, and adding the tipset to the heaviest chain accordingly.\nBlock production process\nThe block production process for each epoch is as follows:\nElect leaders from eligible miners.\nMiners check if they are elected.\nElected miners generate WinningPoSt using randomness.\nMiners build and propagate a block.\nVerify the winning miner and election.\nSelect the heaviest chain to add the tipset.\nFinality\nEC enforces soft finality, where miners at round\nN\nreject blocks forking off before round\nN - F\n(where\nF\nis set to\n900\n). This ensures finality without compromising chain availability.\nProofs\nFilecoin operates on proof-of-storage, where miners offer storage space and provide proofs to verify data storage.\nProof of replication\nWith proof-of-replication (PoRep), storage providers prove they have created a unique copy of the client’s data for the network.\nProof of spacetime\nStorage providers must continuously prove that they are storing clients' data throughout the entire duration of the storage deal. The proof-of-spacetime (PoSt) process includes two types of challenges:\nWinning PoSt\n: Verifies that a storage provider holds a copy of the data at a specific point in time.\nWindow PoSt\n: Confirms that the data has been consistently stored over a defined period.\nSlashing\nIf storage providers fail to maintain reliable uptime or act maliciously, they face penalties through a process called slashing. Filecoin enforces two types of slashing:\nStorage Fault Slashing\n: Penalizes providers who fail to maintain healthy and reliable storage sectors.\nConsensus Fault Slashing\n: Penalizes providers attempting to disrupt the security or availability of the consensus process.\nPrevious\nCrypto-economics\nNext\nStorage model\nLast updated\n7 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin/crypto-economics",
    "content": "Basics\nWhat is Filecoin\nCrypto-economics\nCrypto-economics is the study of how cryptocurrency can incentivize usage of a blockchain network. This page covers how Filecoin manages incentivization within the network.\nNative currency\nFilecoin’s native currency, FIL, is a utility token that incentivizes persistent storage on the Filecoin network. Storage providers earn FIL by offering reliable storage services or committing storage capacity to the network. With a maximum circulating supply of 2 billion FIL, no more than 2 billion Filecoin will ever exist.\nAs a utility token aligned with the network’s long-term growth, Filecoin issuance depends on the network’s provable utility and growth. Most of the Filecoin supply is only minted as the network achieves specific growth and utility milestones.\nFilecoin uses a dual minting model for block reward distribution:\nBaseline minting\nUp to 770 million FIL tokens are minted based on network performance. Full release of these tokens would only occur if the Filecoin network reaches a yottabyte of storage capacity within 20 years, approximately 1,000 times the capacity of today’s cloud storage.\nSimple minting\nAn additional 330 million FIL tokens are released on a 6-year half-life schedule, with 97% of these tokens projected to be released over about 30 years.\nAdditionally, 300 million FIL tokens are held in a mining reserve to incentivize future mining models.\nVesting\nMining rewards are subject to a vesting schedule to support long-term network alignment. For instance, 75% of block rewards earned by miners vest linearly over 180 days, while 25% are immediately accessible, improving miner cash flow and profitability. Further, FIL tokens are vested to Protocol Labs teams and the Filecoin Foundation over six years and to SAFT investors over three years, as outlined in the vesting schedule.\nCollateral and slashing\nTo ensure network security and reliable storage, storage providers must lock FIL as pledge collateral during block reward mining. Pledge collateral is based on projected block rewards a miner could earn. Collateral and all earned rewards are subject to slashing if the storage fails to meet reliability standards throughout a sector’s lifecycle.\nTotal supply\nFIL’s maximum circulating supply is capped at 2 billion FIL. However, this maximum will never be reached, as a portion of FIL is permanently removed from circulation through gas fees, penalties, and other mechanisms.\nPrevious\nWhat is Filecoin\nNext\nBlockchain\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin/networks",
    "content": "Basics\nWhat is Filecoin\nNetworks\nThe Filecoin network has several networks for testing, staging, and production purposes. This page provides information on available networks.\nPrevious\nProgramming on Filecoin\nNext\nThe blockchain\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin/programming-on-filecoin",
    "content": "Basics\nWhat is Filecoin\nProgramming on Filecoin\nOnce data is stored, computations can be performed directly on it without needing retrieval. This page covers the basics of programming on Filecoin.\nPrevious\nRetrieval market\nNext\nNetworks\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin/retrieval-market",
    "content": "Basics\nWhat is Filecoin\nRetrieval market\nThe retrieval market facilitates the negotiation of retrieval deals for serving stored data to clients in exchange for FIL.\nPrevious\nStorage market\nNext\nProgramming on Filecoin\nLast updated\n7 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin/storage-market",
    "content": "Basics\nWhat is Filecoin\nStorage market\nThe storage market is the entry point where storage providers and clients negotiate and publish storage deals on-chain.\nDeal making\nThe lifecycle of a deal within the storage market includes four distinct phases:\nDiscovery\n: The client identifies potential storage providers (SPs) and requests their prices.\nNegotiation\n: After selecting an SP, both parties agree to the terms of the deal.\nPublishing\n: The deal is published on-chain.\nHandoff\n: The deal is added to a sector, where the SP can provide cryptographic proofs of data storage.\nFilecoin Plus\nFilecoin Plus aims to maximize useful storage on the Filecoin network by incentivizing the storage of meaningful and valuable data. It offers verified clients low-cost or free storage through a system called datacap, a storage quota that boosts incentives for storage providers.\nVerified clients use datacap allocated by community-selected allocators to store data on the network. In exchange for storing verified deals, storage providers receive a 10x boost in storage power, which increases their block rewards as an incentive.\nDatacap\n: A token allocated to verified clients to spend on storage deals, offering a 10x quality multiplier for deals.\nAllocators\n: Community-selected entities responsible for verifying storage clients and allocating datacap tokens.\nVerified Clients\n: Active participants with datacap allocations for their data storage needs.\nStorage on-ramps\nTo simplify data storage on the Filecoin network, several tools offer streamlined integration of Filecoin and IPFS storage for applications or smart contracts.\nThese storage helpers provide libraries that abstract the Filecoin deal-making process into simple API calls. They also store data on IPFS for efficient and fast content retrieval.\nAvailable storage helpers include:\nPrevious\nStorage model\nNext\nRetrieval market\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/basics/what-is-filecoin/storage-model",
    "content": "Basics\nWhat is Filecoin\nStorage model\nA storage model defines how data is stored within a system. This page covers the basic aspects of Filecoin’s storage model.\nThe Filecoin storage model consists of three main components:\nProviders\nDeals\nSectors\nProviders\nProviders offer storage and retrieval services to network users. There are two types of providers:\nStorage Providers\nRetrieval Providers\nStorage providers\nStorage providers, often called SPs, are responsible for storing files and data for clients on the network. They also provide cryptographic proofs to verify that data is stored securely. The majority of providers on the Filecoin network are SPs.\nRetrieval providers\nRetrieval providers, or RPs, specialize in delivering quick access to data rather than long-term storage. While many storage providers also offer retrieval services, stand-alone RPs are increasingly joining the network to enhance data accessibility.\nDeals\nIn the Filecoin network, SPs and RPs offer storage or retrieval services to clients through deals. These deals are negotiated between two parties and outline terms such as data size, price, duration, and collateral.\nThe deal-making process initially occurs\noff-chain\n. Once both parties agree to the terms, the deal is published\non-chain\nfor network-wide visibility and validation.\nSectors\nSectors are the fundamental units of provable storage where storage providers securely store client data and generate PoSt (Proof of Spacetime) for the Filecoin network. Sectors come in standard sizes, typically\n32 GiB\nor\n64 GiB\n, and have a set lifespan that providers can extend before it expires.\nPrevious\nBlockchain\nNext\nStorage market\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/dapps",
    "content": "Builder Cookbook\ndApps\nVarious features from Filecoin ecosystem to build your dApps.\nPrevious\nPrivacy & Access Control\nNext\nChain-Data Query\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/dapps/chain-data-query",
    "content": "Builder Cookbook\ndApps\nChain-Data Query\nLearn how to connect to Filecoin RPC nodes and query Filecoin chain state and data.\nPrevious\ndApps\nNext\nOracles\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/dapps/cross-chain-bridges",
    "content": "Builder Cookbook\ndApps\nCross-Chain Bridges\nLearn to support multi-chain dApp use cases with cross-chain bridges.\nPrevious\nOracles\nNext\nDecentralized Database\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/dapps/decentralized-database",
    "content": "Builder Cookbook\ndApps\nDecentralized Database\nLearn how to store the application data with a decentralized database on Filecoin.\nPrevious\nCross-Chain Bridges\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/dapps/oracles",
    "content": "Builder Cookbook\ndApps\nOracles\nLearn how to use oracle smart contracts to access external data sources when building an FVM dApp.\nPrevious\nChain-Data Query\nNext\nCross-Chain Bridges\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/data-storage",
    "content": "Builder Cookbook\nData Storage\nRecipes of using Filecoin data storage features programmatically.\nPrevious\nTable of Contents\nNext\nStore Data\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/data-storage/privacy-and-access-control",
    "content": "Builder Cookbook\nData Storage\nPrivacy & Access Control\nLearn about encrypting data to be stored on Filecoin and gating access to data already stored on Filecoin.\nPrevious\nRetrieve Data\nNext\ndApps\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/data-storage/retrieve-data",
    "content": "Builder Cookbook\nData Storage\nRetrieve Data\nLearn how to retrieve data for the Filecoin network with different approaches as well as incentivize data retrievability.\nPrevious\nStore Data\nNext\nPrivacy & Access Control\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/data-storage/store-data",
    "content": "Builder Cookbook\nData Storage\nStore Data\nLearn how to store data on the Filecoin network using different mechanisms that suit your project's requirements.\nPrevious\nData Storage\nNext\nRetrieve Data\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/overview",
    "content": "Builder Cookbook\nOverview\nPrevious\nWeb3\nNext\nTable of Contents\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/builder-cookbook/table-of-contents",
    "content": "Builder Cookbook\nTable of Contents\nContains the full list of recipes. Start here to find the features to build your projects.\nPrevious\nOverview\nNext\nData Storage\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/calibration",
    "content": "Networks\nCalibration\nThe calibration network is the most realistic testnet simulation of the Filecoin mainnet.\nAlso see\nCalibration RPCs\nand\nCalibration Explorers\n.\nProspective storage providers can experience more realistic sealing performance and hardware requirements using final proofs constructions and parameters. Storage clients can store and retrieve\nreal data\non the network. Clients can also participate in deal-making workflows and storage and retrieval functionality. The sector size on the Calibration testnet is the same as on the Filecoin mainnet; 32 GiB and 64 GiB sectors are supported. This testnet also includes the Filecoin EVM-runtime features found on the Filecoin mainnet.\nDevelopers can reference pre-existing deals that are already available on the network. See the\n#fil-net-calibration-discuss\nchannel in the Filecoin Slack\nfor support.\nMaintainer\n:\nProtocol Labs\nGenesis\nCAR File:\nQmbHZuVjgtxvgtcE5H3FpE1ywEyawYmZcbx4Eh47WZ7YF8\nReset Timestamp:\n1667326380\n(\n2022-11-01T18:13:00Z\n)\nGenesis Block CID:\nbafy2bzacecyaggy24wol5ruvs6qm73gjibs2l2iyhcqmvi7r7a4ph7zx3yqd4\nSHA-1 Digest:\nf9004d1266e0b023a018eb2fe6bb403cb8204df4\nNetwork parameters\nSupported Sector Sizes:\n32 GiB\nand\n64 GiB\nConsensus Miner Min Power:\n32 GiB\nEpoch Duration Seconds:\n30\nExpected Leaders per Epoch:\n5\nWindowPoSt Proving Period:\n2880\nWindowPoSt Challenge Window:\n60\nWindowPoSt Period Deadlines:\n48\nPre-Commit Challenge Delay:\n150\nBootstrap peers\nBootstrap peers for Calibration testnet can be found at:\nhttps://github.com/filecoin-project/lotus/blob/release/\n[latest release]\n/build/bootstrap/calibnet.pi\nThe latest Lotus release can be found at https://github.com/filecoin-project/lotus/releases/latest/\nSnapshots\nLatest minimal snapshot\n(note, as of March 2024, this is a 3.5GB download)\nActive storage providers\nThe following storage providers are running on the Calibration testnet.\nPiKNiK\nt017840\n: Every deal accepted by this SP will be aggregated into 32 GiB sectors, which is the minimum size for calibration network. This miner has a preset sealing capacity of 2x 32 GiB sectors per day, defined as sectors in waitdeals will be flushed every 12 hours.\nMore information\nResources\nCalibration Faucet - Chainsafe\nCalibration Faucet - Zondax\nCalibration Faucet - Forest Explorer\nDataCap allocation\nSlack Channel for Updates: #fil-network-announcements\nSlack Channel for Questions: #fil-help\nLatest lightweight snapshot\ngenerated with\nForest\nby\nChainSafe\nComplete calibration net archival data\ngenerated with\nForest\nby\nChainSafe\nWas this page helpful?\nPrevious\nNetwork performance\nNext\nExplorers\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/calibration/explorers",
    "content": "Networks\nCalibration\nExplorers\nThe following block explorers are available for the Calibration testnet, listed in alphabetical order.\nPrevious\nCalibration\nNext\nRPCs\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/calibration/rpcs",
    "content": "Networks\nCalibration\nRPCs\nPublic RPC endpoints are available for the Calibration testnet.\nPrevious\nExplorers\nNext\nLocal testnet\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/deprecated-networks",
    "content": "Networks\nDeprecated networks\nThe following networks have been deprecated:\nNerpanet\nThe Nerpa test network, often called\nNerpanet\n, was designed with tiny sector sizes. This network was for application developers to test the very basic functionality of their applications before moving over to the calibration test network. It was deprecated on 2021-08-16.\nSpacenet\nThe Spacenet test network was created for the Interplanetary Consensus (IPC) project. This network was deprecated on 2023-09-11.\nWallaby\nThe Wallaby test network, often just called\nWallaby\n, was designed for internal Filecoin developers to test new features before rolling them out to the Hyperspace testnet, and then onto Mainnet. Wallaby was designed to be reset every week. It was deprecated on 2023-02-07.\nWas this page helpful?\nPrevious\nGet test tokens\nNext\nGeneral\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/local-testnet",
    "content": "Networks\nLocal testnet\nLocal networks are a useful way to get started with Filecoin development. This guide covers how to start a local network using Lotus as the Filecoin node implementation.\nPrevious\nRPCs\nNext\nGet test tokens\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/local-testnet/get-test-tokens",
    "content": "Networks\nLocal testnet\nGet test tokens\nTest funds are available to developer so that they can test their smart contracts and applications within the confines of a test network. This page covers how to get test funds from a local testnet.\nPrevious\nLocal testnet\nNext\nDeprecated networks\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/mainnet",
    "content": "Networks\nMainnet\nMainnet is the primary Filecoin network. Mainnet began on block 148,888. It supports 32 GiB and 64 GiB sectors.\nPrevious\nRelay\nNext\nExplorers\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/mainnet/explorers",
    "content": "Networks\nMainnet\nExplorers\nA block explorer is a tool that allows users to view and search the contents of blocks on a blockchain. This page covers available explorers for the Filecoin mainnet.\nPrevious\nMainnet\nNext\nRPCs\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/mainnet/network-performance",
    "content": "Networks\nMainnet\nNetwork performance\nYou can use these heuristics to understand general Filecoin network performance and how it fits your use case.\nPrevious\nRPCs\nNext\nCalibration\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/networks/mainnet/rpcs",
    "content": "Networks\nMainnet\nRPCs\nPublic RPC endpoints are available for the Filecoin mainnet.\nPrevious\nExplorers\nNext\nNetwork performance\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/full-nodes",
    "content": "Nodes\nFull-nodes\nThis section contain information on how to spin up a full Filecoin node using Lotus, and options for using remote nodes.\nPrevious\nVenus\nNext\nPre-requisites\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/full-nodes/basic-setup",
    "content": "Nodes\nFull-nodes\nBasic setup\nThis page gives a very basic overview of how to install Lotus on your computer.\nPrevious\nPre-requisites\nNext\nNode providers\nLast updated\n4 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/full-nodes/node-providers",
    "content": "Nodes\nFull-nodes\nNode providers\nA node providers, sometimes specifically called a remote node providers, are services that offers access to remote nodes on the Filecoin network.\nPrevious\nBasic setup\nNext\nLite-nodes\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/full-nodes/pre-requisites",
    "content": "Nodes\nFull-nodes\nPre-requisites\nThis page provide details on Lotus installation prerequisites and supported platforms.\nPrevious\nFull-nodes\nNext\nBasic setup\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/implementations",
    "content": "Nodes\nImplementations\nNodes are participants that contribute to the network’s operation and maintain its integrity. There are two major node implementations running on the Filecoin network today, with more in the works.\nPrevious\nIndustry\nNext\nLotus\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/implementations/lotus",
    "content": "Nodes\nImplementations\nLotus\nLotus is a full-featured implementation of the Filecoin network, including the storage, retrieval, and mining functionalities. It is the reference implementation of the Filecoin protocol.\nPrevious\nImplementations\nNext\nVenus\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/implementations/venus",
    "content": "Nodes\nImplementations\nVenus\nVenus is an open-source implementation of the Filecoin network, developed by the blockchain company IPFSForce. Venus is built in Go and is designed to be fast, efficient, and scalable.\nVenus is a full-featured implementation of the Filecoin protocol, providing storage, retrieval, and mining functionalities. It is compatible with the Lotus implementation and can interoperate with other Filecoin nodes on the network.\nOne of the key features of Venus is its support for the Chinese language and market. Venus provides a Chinese language user interface and documentation, making it easier for Chinese users to participate in the Filecoin network.\nVenus also includes several advanced features, such as automatic fault tolerance, intelligent storage allocation, and decentralized data distribution. These features are designed to improve the reliability and efficiency of the storage and retrieval processes on the Filecoin network.\nInteract with Venus\nHere are some of the most common ways to interact with Venus:\nVenus API\nVenus provides a comprehensive API that allows developers to interact with the Filecoin network programmatically. The API includes methods for performing various operations such as storing and retrieving data, mining blocks, and transferring FIL tokens. You can use the API to build custom applications or integrate Filecoin functionality into your existing applications.\nCommand-line interface\nVenus includes a powerful command-line interface that allows developers to interact with the Filecoin network from the terminal. You can use the CLI to perform various operations such as creating wallets, sending FIL transactions, and querying the network. The CLI is a quick and easy way to interact with the network and is particularly useful for testing and development purposes.\nContribute to source\nIf you are interested in contributing to the development of Venus itself, you can do so by contributing to the open-source codebase on GitHub. You can submit bug reports, suggest new features, or submit code changes to improve the functionality, security, or performance of the network.\nMore information\nFor more information about Venus, including advanced configuration, see the\nVenus documentation site\n.\nWas this page helpful?\nPrevious\nLotus\nNext\nFull-nodes\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/lite-nodes",
    "content": "Nodes\nLite-nodes\nThis section covers what lite-nodes are, and how developers can use them to interact with the Filecoin network.\nPrevious\nNode providers\nNext\nSpin up a lite-node\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/nodes/lite-nodes/spin-up-a-lite-node",
    "content": "Nodes\nLite-nodes\nSpin up a lite-node\nLite-nodes are a simplified node option that allows developers to perform lightweight tasks on a local node. This page covers how to spin up a lite node on your local machine.\nPrevious\nLite-nodes\nNext\nFundamentals\nLast updated\n4 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/built-in-actors",
    "content": "Reference\nBuilt-in actors\nBuilt-in actors are how the Filecoin network manages and updates global state. This page contains information on how smart contracts can access built-in actors.\nPrevious\nExchange integration\nNext\nProtocol API\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/built-in-actors/filecoin.sol",
    "content": "Reference\nBuilt-in actors\nFilecoin.sol\nThis page covers the built-in actors Filecoin.sol API.\nPrevious\nProtocol API\nNext\nJSON-RPC\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/built-in-actors/protocol-api",
    "content": "Reference\nBuilt-in actors\nProtocol API\nThis page covers the Built-in actors Protocol API.\nPrevious\nBuilt-in actors\nNext\nFilecoin.sol\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/exchanges",
    "content": "Reference\nExchanges\nThis section contains reference information regarding how to integrate Filecoin into an exchange.\nPrevious\nTools\nNext\nExchange integration\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/exchanges/exchange-integration",
    "content": "Reference\nExchanges\nExchange integration\nThis page lists the general steps and workflows you need to follow to offer FIL on an exchange.\nPrevious\nExchanges\nNext\nBuilt-in actors\nLast updated\n21 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/general",
    "content": "Reference\nGeneral\nHelpful reference materials for the Filecoin specification, implementations, and ecosystem.\nPrevious\nDeprecated networks\nNext\nGlossary\nLast updated\n27 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/general/glossary",
    "content": "Reference\nGeneral\nGlossary\nDefinitions and usage for Filecoin terminology\nPrevious\nGeneral\nNext\nSpecifications\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/general/specifications",
    "content": "Reference\nGeneral\nSpecifications\nThis page quickly covers what the Filecoin Specification is, and how you can access it.\nPrevious\nGlossary\nNext\nTools\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/general/tools",
    "content": "Reference\nGeneral\nTools\nThis page lists a collection of tools and resources you can use to build on top of the Filecoin network using the FVM.\nPrevious\nSpecifications\nNext\nExchanges\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc",
    "content": "Reference\nJSON-RPC\nFind out how to manage and interact with the Filecoin network using the standard JSON-RPC API.\nQuick start\nThe easiest way to test the API is to use Curl commands. A Curl command to the Filecoin network looks something like this:\ncurl --location --request POST '<NODE_ADDRESS>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\"jsonrpc\":\"2.0\",\n\"method\":\"<API_METHOD_TO_CALL>\",\n\"params\": [<ARRAY OF PARAMETERS>],\n\"id\":1\n}'\nStep-by-step example\nIn a terminal window, use Curl to request the current chain head from a public\nGlif\nnode.\\\ncurl -X POST 'https://api.node.glif.io' \\\n-H 'Content-Type: application/json' \\\n--data '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"Filecoin.ChainHead\",\"params\":[]}'\n{\"jsonrpc\":\"2.0\",\"result\":{\"Cids\":[{\"/\":\"bafy2bzaceayoigaf3v5muqmknpjfkguse43jp4t2zxhpmykhqynqhkdgpgybc\"},{\"/\":\"bafy2bzacecnrtzlhn6h75gm7tozhzuw77plvdhniwzfj7wgmyuju6wn573h22\"},{\"/\":\"bafy2bzacecygiaxfsqv7ecb2gvodzh74eret3pchwe5e4j5a3mzlwasvndi6i\"},{\"/\":\"bafy2bzacebe477tdmijfse4je2g63gnnkdgzj3ftq6zbygd7toszkrsjts6uu\"},{\"/\":\"bafy2bzacedoe6hcxy2cgqzbg4p7qolbd5imbjpjnz2tj4n7o3kw2md4uv2ttq\"},{\"/\":\"bafy2bzacec7wbqvskwvolireljmufszdu5nk37yyg4qtxgnrwbyipgoenmhc6\"},{\"/\":\"bafy2bzaceahxdiauteywlbjnwj3ntr72qcbamtq3nbvjzyn5wruithpyqyxbm\"}],\"Blocks\":[{\"Miner\":\"f0693008\",\"Ticket\":{\"VRFProof\":\"uLR0LHfNBAfQzyYUVBiIEXzyblPv3yPIEsJQGTpaAvO1ZriPZ7wC2IFpw7mrz1RvDQEfsgRXGxb6APTRvrPiFEAe35RFNLKC9SYb64PNcDYwGY4de5LdlHfyUv+Ovwg5\"}...\nThe ChainHead endpoint doesn’t require any input parameters, so we’ve left\nparams\nan empty array\n[]\n.\nThe above command will output a large chunk of JSON data. You can use\nJSON processor JQ\nto\nprettify\nthe output:\ncurl -X POST 'https://api.node.glif.io' \\\n-H 'Content-Type: application/json' \\\n--data '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"Filecoin.ChainHead\",\"params\":[]}' \\\n| jq\n{\n\"jsonrpc\": \"2.0\",\n\"result\": {\n\"Cids\": [\n{\n\"/\": \"bafy2bzacecrbhy67by4upktab6rvbgd3w5jml7zog4ifoaupo35yo4rbbc4am\"\n},\n{\n\"/\": \"bafy2bzacecm42csr2ysmgpj54lz762iom4n4gcafkerijirzsfzq3jni2gqyu\"\n}\n],\n\"Blocks\": [\n{\n\"Miner\": \"f0152747\",\n\"Ticket\": {\n...\nPermissions\nEach method has specific permissions that must be met before you can receive a response from a Filecoin node. Methods with the\nread\npermission can be called by anyone at anytime, without the need for a token. All other permissions require you to send an authentication along with you request.\nread\n: Read node state, no private data.\nwrite\n: Write to local store / chain, and read permissions.\nsign\n: Use private keys stored in wallet for signing, read and write permissions.\nadmin\n: Manage permissions, read, write, and sign permissions.\nAuthentication\nEach node implementation has different ways to generate and manage authentication tokens. Take a look at your node’s specific documentation:\nLotus\nVenus\nIf you are using a node provider service like\nGlif\n, take a look at your providers documentation to find out how to manage authentication tokens.\nWas this page helpful?\nPrevious\nFilecoin.sol\nNext\nAuth\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/auth",
    "content": "Reference\nJSON-RPC\nAuth\nPrevious\nJSON-RPC\nNext\nChain\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/chain",
    "content": "Reference\nJSON-RPC\nChain\nThe Chain method group contains methods for interacting with the blockchain, but that do not require any form of state computation.\nChainBlockstoreInfo\nChainBlockstoreInfo returns some basic information about the blockstore\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"abc\": 123\n}\nChainCheckBlockstore\nChainCheckBlockstore performs an (asynchronous) health check on the chain/state blockstore if supported by the underlying implementation.\nPerms: admin\nInputs:\nnull\nResponse:\n{}\nChainDeleteObj\nChainDeleteObj deletes node referenced by the given CID\nPerms: admin\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{}\nChainExport\nChainExport returns a stream of bytes with CAR dump of chain data. The exported chain data includes the header chain from the given tipset back to genesis, the entire genesis state, and the most recent 'nroots' state trees. If oldmsgskip is set, messages from before the requested roots are also not included.\nPerms: read\nInputs:\n[\n10101,\ntrue,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"Ynl0ZSBhcnJheQ==\"\nChainExportRangeInternal\nChainExportRangeInternal triggers the export of a chain CAR-snapshot directly to disk. It is similar to ChainExport, except, depending on options, the snapshot can include receipts, messages and stateroots for the length between the specified head and tail, thus producing \"archival-grade\" snapshots that include all the on-chain data. The header chain is included back to genesis and these snapshots can be used to initialize Filecoin nodes.\nPerms: admin\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n{\n\"WriteBufferSize\": 123,\n\"NumWorkers\": 123,\n\"IncludeMessages\": true,\n\"IncludeReceipts\": true,\n\"IncludeStateRoots\": true\n}\n]\nResponse:\n{}\nChainGetBlock\nChainGetBlock returns the block specified by the given CID.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{\n\"Miner\": \"f01234\",\n\"Ticket\": {\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ElectionProof\": {\n\"WinCount\": 9,\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"BeaconEntries\": [\n{\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"WinPoStProof\": [\n{\n\"PoStProof\": 8,\n\"ProofBytes\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"Parents\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n],\n\"ParentWeight\": \"0\",\n\"Height\": 10101,\n\"ParentStateRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"ParentMessageReceipts\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Messages\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"BLSAggregate\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Timestamp\": 42,\n\"BlockSig\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ForkSignaling\": 42,\n\"ParentBaseFee\": \"0\"\n}\nChainGetBlockMessages\nChainGetBlockMessages returns messages stored in the specified block.\nNote: If there are multiple blocks in a tipset, it's likely that some messages will be duplicated. It's also possible for blocks in a tipset to have different messages from the same sender at the same nonce. When that happens, only the first message (in a block with lowest ticket) will be considered for execution\nNOTE: THIS METHOD SHOULD ONLY BE USED FOR GETTING MESSAGES IN A SPECIFIC BLOCK\nDO NOT USE THIS METHOD TO GET MESSAGES INCLUDED IN A TIPSET Use ChainGetParentMessages, which will perform correct message deduplication\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{\n\"BlsMessages\": [\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n],\n\"SecpkMessages\": [\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n],\n\"Cids\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\n}\nChainGetEvents\nChainGetEvents returns the events under an event AMT root CID.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n[\n{\n\"Emitter\": 1000,\n\"Entries\": [\n{\n\"Flags\": 7,\n\"Key\": \"string value\",\n\"Codec\": 42,\n\"Value\": \"Ynl0ZSBhcnJheQ==\"\n}\n]\n}\n]\nChainGetGenesis\nChainGetGenesis returns the genesis tipset.\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n}\nChainGetMessage\nChainGetMessage reads a message referenced by the specified CID from the chain blockstore.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\nChainGetMessagesInTipset\nChainGetMessagesInTipset returns message stores in current tipset\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"Cid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n}\n]\nChainGetNode\nPerms: read\nInputs:\n[\"string value\"]\nResponse:\n{\n\"Cid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Obj\": {}\n}\nChainGetParentMessages\nChainGetParentMessages returns messages stored in parent tipset of the specified block.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n[\n{\n\"Cid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n}\n]\nChainGetParentReceipts\nChainGetParentReceipts returns receipts for messages in parent tipset of the specified block. The receipts in the list returned is one-to-one with the messages returned by a call to ChainGetParentMessages with the same blockCid.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n[\n{\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"GasUsed\": 9,\n\"EventsRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n}\n]\nChainGetPath\nChainGetPath returns a set of revert/apply operations needed to get from one tipset to another, for example:\nto\n^\nfrom   tAA\n^     ^\ntBA    tAB\n^---*--^\n^\ntRR\nWould return\n[revert(tBA), apply(tAB), apply(tAA)]\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"Type\": \"string value\",\n\"Val\": {\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n}\n}\n]\nChainGetTipSet\nChainGetTipSet returns the tipset specified by the given TipSetKey.\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n}\nChainGetTipSetAfterHeight\nChainGetTipSetAfterHeight looks back for a tipset at the specified epoch. If there are no blocks at the specified epoch, the first non-nil tipset at a later epoch will be returned.\nPerms: read\nInputs:\n[\n10101,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n}\nChainGetTipSetByHeight\nChainGetTipSetByHeight looks back for a tipset at the specified epoch. If there are no blocks at the specified epoch, a tipset at an earlier epoch will be returned.\nPerms: read\nInputs:\n[\n10101,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n}\nChainHasObj\nChainHasObj checks if a given CID exists in the chain blockstore.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\ntrue\nChainHead\nChainHead returns the current head of the chain.\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n}\nChainHotGC\nChainHotGC does online (badger) GC on the hot store; only supported if you are using the splitstore\nPerms: admin\nInputs:\n[\n{\n\"Threshold\": 12.3,\n\"Periodic\": true,\n\"Moving\": true\n}\n]\nResponse:\n{}\nChainNotify\nChainNotify returns channel with chain head updates. First message is guaranteed to be of len == 1, and type == 'current'.\nPerms: read\nInputs:\nnull\nResponse:\n[\n{\n\"Type\": \"string value\",\n\"Val\": {\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n}\n}\n]\nChainPrune\nChainPrune forces compaction on cold store and garbage collects; only supported if you are using the splitstore\nPerms: admin\nInputs:\n[\n{\n\"MovingGC\": true,\n\"RetainState\": 9\n}\n]\nResponse:\n{}\nChainPutObj\nChainPutObj puts a given object into the block store\nPerms: admin\nInputs:\n[{}]\nResponse:\n{}\nChainReadObj\nChainReadObj reads ipld nodes referenced by the specified CID from chain blockstore and returns raw bytes.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n\"Ynl0ZSBhcnJheQ==\"\nChainSetHead\nChainSetHead forcefully sets current chain head. Use with caution.\nPerms: admin\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{}\nChainStatObj\nChainStatObj returns statistics about the graph referenced by 'obj'. If 'base' is also specified, then the returned stat will be a diff between the two objects.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{\n\"Size\": 42,\n\"Links\": 42\n}\nChainTipSetWeight\nChainTipSetWeight computes weight for the specified tipset.\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nPrevious\nAuth\nNext\nClient\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/client",
    "content": "Reference\nJSON-RPC\nClient\nPrevious\nChain\nNext\nCreate\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/create",
    "content": "Reference\nJSON-RPC\nCreate\nPrevious\nClient\nNext\nEth\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/eth",
    "content": "Reference\nJSON-RPC\nEth\nThese methods are used for Ethereum-compatible JSON-RPC calls\nEthAccounts will always return [] since we don't expect Lotus to manage private keys\nEthAccounts\nThere are not yet any comments for this method.\nPerms: read\nInputs:\nnull\nResponse:\n[\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\"]\nEthAddressToFilecoinAddress\nEthAddressToFilecoinAddress converts an EthAddress into an f410 Filecoin Address\nPerms: read\nInputs:\n[\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\"]\nResponse:\n\"f01234\"\nFilecoinAddressToEthAddress\nFilecoinAddressToEthAddress converts any Filecoin address to an EthAddress.\nThis method supports all Filecoin address types:\nf0\nand\nf4\naddresses: Converted directly.\nf1/f2/f3\naddresses: First converted to their corresponding\nf0\nID address, then to an\n0x\nEthAddress.\nNote:\nRequirements:\nFor\nf1/f2/f3\naddresses, they must be instantiated on-chain, as\nf0\nID addresses are only assigned to actors when they are created on-chain. The simplest way to instantiate an address on chain is to send a transaction to the address.\nParameters:\nfilecoinAddress: The Filecoin address to convert.\nblkNum: The block number or state for the conversion. Defaults to \"finalized\" for maximum safety. Possible values: \"pending\", \"latest\", \"finalized\", \"safe\", or a specific block number represented as hex.\nPerms: read\nInput:\n[\"t410fghja63ghyzd54cbswfapglsutx5e64xnm7mazwi\"]\nResponse:\n\"0x31d20f6cc7c647de0832b140f32e549dfa4f72ed\"\nInput:\n[\"t15xwdubazj7aft6ylmiw54fa27zyyl3rpc6olgcy\", \"safe\"]\nResponse:\n\"0xff00000000000000000000000000000000000064\"\nEthBlockNumber\nEthBlockNumber returns the height of the latest (heaviest) TipSet\nPerms: read\nInputs:\nnull\nResponse:\n\"0x5\"\nEthCall\nPerms: read\nInputs:\n[\n{\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"gas\": \"0x5\",\n\"gasPrice\": \"0x0\",\n\"value\": \"0x0\",\n\"data\": \"0x07\"\n},\n\"string value\"\n]\nResponse:\n\"0x07\"\nEthChainId\nPerms: read\nInputs:\nnull\nResponse:\n\"0x5\"\nEthEstimateGas\nPerms: read\nInputs:\n[\n{\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"gas\": \"0x5\",\n\"gasPrice\": \"0x0\",\n\"value\": \"0x0\",\n\"data\": \"0x07\"\n}\n]\nResponse:\n\"0x5\"\nEthFeeHistory\nPerms: read\nInputs:\n[\"Bw==\"]\nResponse:\n{\n\"oldestBlock\": \"0x5\",\n\"baseFeePerGas\": [\"0x0\"],\n\"gasUsedRatio\": [12.3],\n\"reward\": []\n}\nEthGasPrice\nPerms: read\nInputs:\nnull\nResponse:\n\"0x0\"\nEthGetBalance\nPerms: read\nInputs:\n[\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\", \"string value\"]\nResponse:\n\"0x0\"\nEthGetBlockByHash\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\", true]\nResponse:\n{\n\"hash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"parentHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"sha3Uncles\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"miner\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"stateRoot\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"transactionsRoot\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"receiptsRoot\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"logsBloom\": \"0x07\",\n\"difficulty\": \"0x5\",\n\"totalDifficulty\": \"0x5\",\n\"number\": \"0x5\",\n\"gasLimit\": \"0x5\",\n\"gasUsed\": \"0x5\",\n\"timestamp\": \"0x5\",\n\"extraData\": \"0x07\",\n\"mixHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"nonce\": \"0x0707070707070707\",\n\"baseFeePerGas\": \"0x0\",\n\"size\": \"0x5\",\n\"transactions\": [{}],\n\"uncles\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n]\n}\nEthGetBlockByNumber\nPerms: read\nInputs:\n[\"string value\", true]\nResponse:\n{\n\"hash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"parentHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"sha3Uncles\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"miner\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"stateRoot\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"transactionsRoot\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"receiptsRoot\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"logsBloom\": \"0x07\",\n\"difficulty\": \"0x5\",\n\"totalDifficulty\": \"0x5\",\n\"number\": \"0x5\",\n\"gasLimit\": \"0x5\",\n\"gasUsed\": \"0x5\",\n\"timestamp\": \"0x5\",\n\"extraData\": \"0x07\",\n\"mixHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"nonce\": \"0x0707070707070707\",\n\"baseFeePerGas\": \"0x0\",\n\"size\": \"0x5\",\n\"transactions\": [{}],\n\"uncles\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n]\n}\nEthGetBlockTransactionCountByHash\nEthGetBlockTransactionCountByHash returns the number of messages in the TipSet\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\n\"0x5\"\nEthGetBlockTransactionCountByNumber\nEthGetBlockTransactionCountByNumber returns the number of messages in the TipSet\nPerms: read\nInputs:\n[\"0x5\"]\nResponse:\n\"0x5\"\nEthGetCode\nPerms: read\nInputs:\n[\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\", \"string value\"]\nResponse:\n\"0x07\"\nEthGetFilterChanges\nPolling method for a filter, returns event logs which occurred since last poll. (requires write perm since timestamp of last filter execution will be written)\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\n[{}]\nEthGetFilterLogs\nReturns event logs matching filter with given id. (requires write perm since timestamp of last filter execution will be written)\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\n[{}]\nEthGetLogs\nReturns event logs matching given filter spec.\nPerms: read\nInputs:\n[\n{\n\"fromBlock\": \"2301220\",\n\"address\": [\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\"],\n\"topics\": null\n}\n]\nResponse:\n[{}]\nEthGetMessageCidByTransactionHash\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nEthGetStorageAt\nPerms: read\nInputs:\n[\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\", \"0x07\", \"string value\"]\nResponse:\n\"0x07\"\nEthGetTransactionByBlockHashAndIndex\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\", \"0x5\"]\nResponse:\n{\n\"chainId\": \"0x5\",\n\"nonce\": \"0x5\",\n\"hash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\",\n\"transactionIndex\": \"0x5\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"value\": \"0x0\",\n\"type\": \"0x5\",\n\"input\": \"0x07\",\n\"gas\": \"0x5\",\n\"maxFeePerGas\": \"0x0\",\n\"maxPriorityFeePerGas\": \"0x0\",\n\"accessList\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n],\n\"v\": \"0x0\",\n\"r\": \"0x0\",\n\"s\": \"0x0\"\n}\nEthGetTransactionByBlockNumberAndIndex\nPerms: read\nInputs:\n[\"0x5\", \"0x5\"]\nResponse:\n{\n\"chainId\": \"0x5\",\n\"nonce\": \"0x5\",\n\"hash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\",\n\"transactionIndex\": \"0x5\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"value\": \"0x0\",\n\"type\": \"0x5\",\n\"input\": \"0x07\",\n\"gas\": \"0x5\",\n\"maxFeePerGas\": \"0x0\",\n\"maxPriorityFeePerGas\": \"0x0\",\n\"accessList\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n],\n\"v\": \"0x0\",\n\"r\": \"0x0\",\n\"s\": \"0x0\"\n}\nEthGetTransactionByHash\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\n{\n\"chainId\": \"0x5\",\n\"nonce\": \"0x5\",\n\"hash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\",\n\"transactionIndex\": \"0x5\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"value\": \"0x0\",\n\"type\": \"0x5\",\n\"input\": \"0x07\",\n\"gas\": \"0x5\",\n\"maxFeePerGas\": \"0x0\",\n\"maxPriorityFeePerGas\": \"0x0\",\n\"accessList\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n],\n\"v\": \"0x0\",\n\"r\": \"0x0\",\n\"s\": \"0x0\"\n}\nEthGetTransactionByHashLimited\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\", 10101]\nResponse:\n{\n\"chainId\": \"0x5\",\n\"nonce\": \"0x5\",\n\"hash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\",\n\"transactionIndex\": \"0x5\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"value\": \"0x0\",\n\"type\": \"0x5\",\n\"input\": \"0x07\",\n\"gas\": \"0x5\",\n\"maxFeePerGas\": \"0x0\",\n\"maxPriorityFeePerGas\": \"0x0\",\n\"accessList\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n],\n\"v\": \"0x0\",\n\"r\": \"0x0\",\n\"s\": \"0x0\"\n}\nEthGetTransactionCount\nPerms: read\nInputs:\n[\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\", \"string value\"]\nResponse:\n\"0x5\"\nEthGetTransactionHashByCid\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\nEthGetTransactionReceipt\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\n{\n\"transactionHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"transactionIndex\": \"0x5\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"root\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"status\": \"0x5\",\n\"contractAddress\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"cumulativeGasUsed\": \"0x5\",\n\"gasUsed\": \"0x5\",\n\"effectiveGasPrice\": \"0x0\",\n\"logsBloom\": \"0x07\",\n\"logs\": [\n{\n\"address\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"data\": \"0x07\",\n\"topics\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n],\n\"removed\": true,\n\"logIndex\": \"0x5\",\n\"transactionIndex\": \"0x5\",\n\"transactionHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\"\n}\n],\n\"type\": \"0x5\"\n}\nEthGetTransactionReceiptLimited\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\", 10101]\nResponse:\n{\n\"transactionHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"transactionIndex\": \"0x5\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"root\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"status\": \"0x5\",\n\"contractAddress\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"cumulativeGasUsed\": \"0x5\",\n\"gasUsed\": \"0x5\",\n\"effectiveGasPrice\": \"0x0\",\n\"logsBloom\": \"0x07\",\n\"logs\": [\n{\n\"address\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"data\": \"0x07\",\n\"topics\": [\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\n],\n\"removed\": true,\n\"logIndex\": \"0x5\",\n\"transactionIndex\": \"0x5\",\n\"transactionHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": \"0x5\"\n}\n],\n\"type\": \"0x5\"\n}\nEthMaxPriorityFeePerGas\nPerms: read\nInputs:\nnull\nResponse:\n\"0x0\"\nEthNewBlockFilter\nInstalls a persistent filter to notify when a new block arrives.\nPerms: read\nInputs:\nnull\nResponse:\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\nEthNewFilter\nInstalls a persistent filter based on given filter spec.\nPerms: read\nInputs:\n[\n{\n\"fromBlock\": \"2301220\",\n\"address\": [\"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\"],\n\"topics\": null\n}\n]\nResponse:\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\nEthNewPendingTransactionFilter\nInstalls a persistent filter to notify when new messages arrive in the message pool.\nPerms: read\nInputs:\nnull\nResponse:\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\nEthProtocolVersion\nPerms: read\nInputs:\nnull\nResponse:\n\"0x5\"\nEthSendRawTransaction\nPerms: read\nInputs:\n[\"0x07\"]\nResponse:\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\nEthSubscribe\nSubscribe to different event types using websockets eventTypes is one or more of:\nnewHeads: notify when new blocks arrive.\npendingTransactions: notify when new messages arrive in the message pool.\nlogs: notify new event logs that match a criteria params contains additional parameters used with the log event type The client will receive a stream of EthSubscriptionResponse values until EthUnsubscribe is called.\nPerms: read\nInputs:\n[\"Bw==\"]\nResponse:\n\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"\nEthSyncing\nPerms: read\nInputs:\nnull\nResponse:\nfalse\nEthTraceBlock\nTraceAPI related methods\nReturns traces created at given block\nPerms: read\nInputs:\n[\"string value\"]\nResponse:\n[\n{\n\"action\": {\n\"callType\": \"string value\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"gas\": \"0x5\",\n\"input\": \"0x07\",\n\"value\": \"0x0\"\n},\n\"result\": {\n\"gasUsed\": \"0x5\",\n\"output\": \"0x07\"\n},\n\"subtraces\": 123,\n\"traceAddress\": [123],\n\"Type\": \"string value\",\n\"blockHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"blockNumber\": 9,\n\"transactionHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"transactionPosition\": 123\n}\n]\nEthTraceReplayBlockTransactions\nReplays all transactions in a block returning the requested traces for each transaction\nPerms: read\nInputs:\n[\"string value\", [\"string value\"]]\nResponse:\n[\n{\n\"output\": \"0x07\",\n\"stateDiff\": \"string value\",\n\"trace\": [\n{\n\"action\": {\n\"callType\": \"string value\",\n\"from\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"to\": \"0x5cbeecf99d3fdb3f25e309cc264f240bb0664031\",\n\"gas\": \"0x5\",\n\"input\": \"0x07\",\n\"value\": \"0x0\"\n},\n\"result\": {\n\"gasUsed\": \"0x5\",\n\"output\": \"0x07\"\n},\n\"subtraces\": 123,\n\"traceAddress\": [123],\n\"Type\": \"string value\"\n}\n],\n\"transactionHash\": \"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\",\n\"vmTrace\": \"string value\"\n}\n]\nEthUninstallFilter\nUninstalls a filter with given id.\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\ntrue\nEthUnsubscribe\nUnsubscribe from a websocket subscription\nPerms: read\nInputs:\n[\"0x37690cfec6c1bf4c3b9288c7a5d783e98731e90b0a4c177c2a374c7a9427355e\"]\nResponse:\ntrue\nPrevious\nCreate\nNext\nGas\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/gas",
    "content": "Reference\nJSON-RPC\nGas\nGasEstimateFeeCap\nGasEstimateFeeCap estimates gas fee cap\nPerms: read\nInputs:\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n9,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nGasEstimateGasLimit\nGasEstimateGasLimit estimates gas used by the message and returns it. It fails if message fails to execute.\nPerms: read\nInputs:\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n9\nGasEstimateGasPremium\nGasEstimateGasPremium estimates what gas price should be used for a message to have high likelihood of inclusion in\nnblocksincl\nepochs.\nPerms: read\nInputs:\n[\n42,\n\"f01234\",\n9,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nGasEstimateMessageGas\nGasEstimateMessageGas estimates gas values for unset message gas fields\nPerms: read\nInputs:\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n{\n\"MaxFee\": \"0\",\n\"MsgUuid\": \"07070707-0707-0707-0707-070707070707\"\n},\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\nPrevious\nEth\nNext\nI\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/i",
    "content": "Reference\nJSON-RPC\nI\nPrevious\nGas\nNext\nLog\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/log",
    "content": "Reference\nJSON-RPC\nLog\nLogAlerts\nPerms: admin\nInputs:\nnull\nResponse:\n[\n{\n\"Type\": {\n\"System\": \"string value\",\n\"Subsystem\": \"string value\"\n},\n\"Active\": true,\n\"LastActive\": {\n\"Type\": \"string value\",\n\"Message\": \"json raw message\",\n\"Time\": \"0001-01-01T00:00:00Z\"\n},\n\"LastResolved\": {\n\"Type\": \"string value\",\n\"Message\": \"json raw message\",\n\"Time\": \"0001-01-01T00:00:00Z\"\n}\n}\n]\nLogList\nPerms: write\nInputs:\nnull\nResponse:\n[\"string value\"]\nLogSetLevel\nPerms: write\nInputs:\n[\"string value\", \"string value\"]\nResponse:\n{}\nPrevious\nI\nNext\nMarket\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/market",
    "content": "Reference\nJSON-RPC\nMarket\nMarketAddBalance\nMarketAddBalance adds funds to the market actor\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"0\"]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nMarketGetReserved\nMarketGetReserved gets the amount of funds that are currently reserved for the address\nPerms: sign\nInputs:\n[\"f01234\"]\nResponse:\n\"0\"\nMarketReleaseFunds\nMarketReleaseFunds releases funds reserved by MarketReserveFunds\nPerms: sign\nInputs:\n[\"f01234\", \"0\"]\nResponse:\n{}\nMarketReserveFunds\nMarketReserveFunds reserves funds for a deal\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"0\"]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nMarketWithdraw\nMarketWithdraw withdraws unlocked funds from the market actor\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"0\"]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nPrevious\nLog\nNext\nMiner\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/miner",
    "content": "Reference\nJSON-RPC\nMiner\nMinerCreateBlock\nPerms: write\nInputs:\n[\n{\n\"Miner\": \"f01234\",\n\"Parents\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n\"Ticket\": {\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Eproof\": {\n\"WinCount\": 9,\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"BeaconValues\": [\n{\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"Messages\": [\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n],\n\"Epoch\": 10101,\n\"Timestamp\": 42,\n\"WinningPoStProof\": [\n{\n\"PoStProof\": 8,\n\"ProofBytes\": \"Ynl0ZSBhcnJheQ==\"\n}\n]\n}\n]\nResponse:\n{\n\"Header\": {\n\"Miner\": \"f01234\",\n\"Ticket\": {\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ElectionProof\": {\n\"WinCount\": 9,\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"BeaconEntries\": [\n{\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"WinPoStProof\": [\n{\n\"PoStProof\": 8,\n\"ProofBytes\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"Parents\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n],\n\"ParentWeight\": \"0\",\n\"Height\": 10101,\n\"ParentStateRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"ParentMessageReceipts\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Messages\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"BLSAggregate\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Timestamp\": 42,\n\"BlockSig\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ForkSignaling\": 42,\n\"ParentBaseFee\": \"0\"\n},\n\"BlsMessages\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n],\n\"SecpkMessages\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\n}\nMinerGetBaseInfo\nThere are not yet any comments for this method.\nPerms: read\nInputs:\n[\n\"f01234\",\n10101,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"MinerPower\": \"0\",\n\"NetworkPower\": \"0\",\n\"Sectors\": [\n{\n\"SealProof\": 8,\n\"SectorNumber\": 9,\n\"SectorKey\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"SealedCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n}\n],\n\"WorkerKey\": \"f01234\",\n\"SectorSize\": 34359738368,\n\"PrevBeaconEntry\": {\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"BeaconEntries\": [\n{\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"EligibleForMining\": true\n}\nPrevious\nMarket\nNext\nMpool\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/mpool",
    "content": "Reference\nJSON-RPC\nMpool\nThe Mpool methods are for interacting with the message pool. The message pool manages all incoming and outgoing 'messages' going over the network.\nMpoolBatchPush\nMpoolBatchPush batch pushes a signed message to mempool.\nPerms: write\nInputs:\n[\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\n]\nResponse:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nMpoolBatchPushMessage\nMpoolBatchPushMessage batch pushes a unsigned message to mempool.\nPerms: sign\nInputs:\n[\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n],\n{\n\"MaxFee\": \"0\",\n\"MsgUuid\": \"07070707-0707-0707-0707-070707070707\"\n}\n]\nResponse:\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\nMpoolBatchPushUntrusted\nMpoolBatchPushUntrusted batch pushes a signed message to mempool from untrusted sources.\nPerms: write\nInputs:\n[\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\n]\nResponse:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nMpoolCheckMessages\nMpoolCheckMessages performs logical checks on a batch of messages\nPerms: read\nInputs:\n[\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\n]\n]\nResponse:\n[\n[\n{\n\"Cid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Code\": 0,\n\"OK\": true,\n\"Err\": \"string value\",\n\"Hint\": {\n\"abc\": 123\n}\n}\n]\n]\nMpoolCheckPendingMessages\nMpoolCheckPendingMessages performs logical checks for all pending messages from a given address\nPerms: read\nInputs:\n[\"f01234\"]\nResponse:\n[\n[\n{\n\"Cid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Code\": 0,\n\"OK\": true,\n\"Err\": \"string value\",\n\"Hint\": {\n\"abc\": 123\n}\n}\n]\n]\nMpoolCheckReplaceMessages\nMpoolCheckReplaceMessages performs logical checks on pending messages with replacement\nPerms: read\nInputs:\n[\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\n]\nResponse:\n[\n[\n{\n\"Cid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Code\": 0,\n\"OK\": true,\n\"Err\": \"string value\",\n\"Hint\": {\n\"abc\": 123\n}\n}\n]\n]\nMpoolClear\nMpoolClear clears pending messages from the mpool. If clearLocal is true, ALL messages will be cleared. If clearLocal is false, local messages will be protected, all others will be cleared.\nPerms: write\nInputs:\n[true]\nResponse:\n{}\nMpoolGetConfig\nMpoolGetConfig returns (a copy of) the current mpool config\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"PriorityAddrs\": [\"f01234\"],\n\"SizeLimitHigh\": 123,\n\"SizeLimitLow\": 123,\n\"ReplaceByFeeRatio\": 1.23,\n\"PruneCooldown\": 60000000000,\n\"GasLimitOverestimation\": 12.3\n}\nMpoolGetNonce\nMpoolGetNonce gets next nonce for the specified sender. Note that this method may not be atomic. Use MpoolPushMessage instead.\nPerms: read\nInputs:\n[\"f01234\"]\nResponse:\n42\nMpoolPending\nMpoolPending returns pending mempool messages.\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\nMpoolPush\nMpoolPush pushes a signed message to mempool.\nPerms: write\nInputs:\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nMpoolPushMessage\nMpoolPushMessage atomically assigns a nonce, signs, and pushes a message to mempool. maxFee is only used when GasFeeCap/GasPremium fields aren't specified\nWhen maxFee is set to 0, MpoolPushMessage will guess appropriate fee based on current chain conditions\nPerms: sign\nInputs:\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n{\n\"MaxFee\": \"0\",\n\"MsgUuid\": \"07070707-0707-0707-0707-070707070707\"\n}\n]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\nMpoolPushUntrusted\nMpoolPushUntrusted pushes a signed message to mempool from untrusted sources.\nPerms: write\nInputs:\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nMpoolSelect\nMpoolSelect returns a list of pending messages for inclusion in the next block\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n12.3\n]\nResponse:\n[\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\nMpoolSetConfig\nMpoolSetConfig sets the mpool config to (a copy of) the supplied config\nPerms: admin\nInputs:\n[\n{\n\"PriorityAddrs\": [\"f01234\"],\n\"SizeLimitHigh\": 123,\n\"SizeLimitLow\": 123,\n\"ReplaceByFeeRatio\": 1.23,\n\"PruneCooldown\": 60000000000,\n\"GasLimitOverestimation\": 12.3\n}\n]\nResponse:\n{}\nMpoolSub\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"Type\": 0,\n\"Message\": {\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n}\nPrevious\nMiner\nNext\nMsig\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/msig",
    "content": "Reference\nJSON-RPC\nMsig\nThe Msig methods are used to interact with multisig wallets on the filecoin network\nMsigAddApprove\nMsigAddApprove approves a previously proposed AddSigner message It takes the following params: , , , , ,\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", 42, \"f01234\", \"f01234\", true]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigAddCancel\nMsigAddCancel cancels a previously proposed AddSigner message It takes the following params: , , , ,\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", 42, \"f01234\", true]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigAddPropose\nMsigAddPropose proposes adding a signer in the multisig It takes the following params: , , ,\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"f01234\", true]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigApprove\nMsigApprove approves a previously-proposed multisig message by transaction ID It takes the following params: ,\nPerms: sign\nInputs:\n[\"f01234\", 42, \"f01234\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigApproveTxnHash\nMsigApproveTxnHash approves a previously-proposed multisig message, specified using both transaction ID and a hash of the parameters used in the proposal. This method of approval can be used to ensure you only approve exactly the transaction you think you are. It takes the following params: , , , , , , ,\nPerms: sign\nInputs:\n[\"f01234\", 42, \"f01234\", \"f01234\", \"0\", \"f01234\", 42, \"Ynl0ZSBhcnJheQ==\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigCancel\nMsigCancel cancels a previously-proposed multisig message It takes the following params: ,\nPerms: sign\nInputs:\n[\"f01234\", 42, \"f01234\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigCancelTxnHash\nMsigCancel cancels a previously-proposed multisig message It takes the following params: , , , , , ,\nPerms: sign\nInputs:\n[\"f01234\", 42, \"f01234\", \"0\", \"f01234\", 42, \"Ynl0ZSBhcnJheQ==\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigCreate\nMsigCreate creates a multisig wallet It takes the following params: , , , ,\nPerms: sign\nInputs:\n[42, [\"f01234\"], 10101, \"0\", \"f01234\", \"0\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigGetAvailableBalance\nMsigGetAvailableBalance returns the portion of a multisig's balance that can be withdrawn or spent\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nMsigGetPending\nMsigGetPending returns pending transactions for the given multisig wallet. Once pending transactions are fully approved, they will no longer appear here.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"ID\": 9,\n\"To\": \"f01234\",\n\"Value\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"Approved\": [\"f01234\"]\n}\n]\nMsigGetVested\nMsigGetVested returns the amount of FIL that vested in a multisig in a certain period. It takes the following params: , ,\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nMsigGetVestingSchedule\nMsigGetVestingSchedule returns the vesting details of a given multisig.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"InitialBalance\": \"0\",\n\"StartEpoch\": 10101,\n\"UnlockDuration\": 10101\n}\nMsigPropose\nMsigPropose proposes a multisig message It takes the following params: , , , , ,\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"0\", \"f01234\", 42, \"Ynl0ZSBhcnJheQ==\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigRemoveSigner\nMsigRemoveSigner proposes the removal of a signer from the multisig. It accepts the multisig to make the change on, the proposer address to send the message from, the address to be removed, and a boolean indicating whether or not the signing threshold should be lowered by one along with the address removal.\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"f01234\", true]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigSwapApprove\nMsigSwapApprove approves a previously proposed SwapSigner It takes the following params: , , , , ,\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", 42, \"f01234\", \"f01234\", \"f01234\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigSwapCancel\nMsigSwapCancel cancels a previously proposed SwapSigner message It takes the following params: , , , ,\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", 42, \"f01234\", \"f01234\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nMsigSwapPropose\nMsigSwapPropose proposes swapping 2 signers in the multisig It takes the following params: , , ,\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"f01234\", \"f01234\"]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"ValidNonce\": true\n}\nPrevious\nMpool\nNext\nNet\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/net",
    "content": "Reference\nJSON-RPC\nNet\nNetAddrsListen\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"ID\": \"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\",\n\"Addrs\": [\n\"/ip4/52.36.61.156/tcp/1347/p2p/12D3KooWFETiESTf1v4PGUvtnxMAcEFMzLZbJGg4tjWfGEimYior\"\n]\n}\nNetAgentVersion\nPerms: read\nInputs:\n[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]\nResponse:\n\"string value\"\nNetAutoNatStatus\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"Reachability\": 1,\n\"PublicAddrs\": [\"string value\"]\n}\nNetBandwidthStats\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"TotalIn\": 9,\n\"TotalOut\": 9,\n\"RateIn\": 12.3,\n\"RateOut\": 12.3\n}\nNetBandwidthStatsByPeer\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"12D3KooWSXmXLJmBR1M7i9RW9GQPNUhZSzXKzxDHWtAgNuJAbyEJ\": {\n\"TotalIn\": 174000,\n\"TotalOut\": 12500,\n\"RateIn\": 100,\n\"RateOut\": 50\n}\n}\nNetBandwidthStatsByProtocol\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"/fil/hello/1.0.0\": {\n\"TotalIn\": 174000,\n\"TotalOut\": 12500,\n\"RateIn\": 100,\n\"RateOut\": 50\n}\n}\nNetBlockAdd\nPerms: admin\nInputs:\n[\n{\n\"Peers\": [\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"],\n\"IPAddrs\": [\"string value\"],\n\"IPSubnets\": [\"string value\"]\n}\n]\nResponse:\n{}\nNetBlockList\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"Peers\": [\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"],\n\"IPAddrs\": [\"string value\"],\n\"IPSubnets\": [\"string value\"]\n}\nNetBlockRemove\nPerms: admin\nInputs:\n[\n{\n\"Peers\": [\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"],\n\"IPAddrs\": [\"string value\"],\n\"IPSubnets\": [\"string value\"]\n}\n]\nResponse:\n{}\nNetConnect\nPerms: write\nInputs:\n[\n{\n\"ID\": \"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\",\n\"Addrs\": [\n\"/ip4/52.36.61.156/tcp/1347/p2p/12D3KooWFETiESTf1v4PGUvtnxMAcEFMzLZbJGg4tjWfGEimYior\"\n]\n}\n]\nResponse:\n{}\nNetConnectedness\nPerms: read\nInputs:\n[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]\nResponse:\n1\nNetDisconnect\nPerms: write\nInputs:\n[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]\nResponse:\n{}\nNetFindPeer\nPerms: read\nInputs:\n[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]\nResponse:\n{\n\"ID\": \"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\",\n\"Addrs\": [\n\"/ip4/52.36.61.156/tcp/1347/p2p/12D3KooWFETiESTf1v4PGUvtnxMAcEFMzLZbJGg4tjWfGEimYior\"\n]\n}\nNetLimit\nPerms: read\nInputs:\n[\"string value\"]\nResponse:\n{\n\"Memory\": 123,\n\"Streams\": 3,\n\"StreamsInbound\": 1,\n\"StreamsOutbound\": 2,\n\"Conns\": 4,\n\"ConnsInbound\": 3,\n\"ConnsOutbound\": 4,\n\"FD\": 5\n}\nNetListening\nPerms: read\nInputs:\nnull\nResponse:\ntrue\nNetPeerInfo\nPerms: read\nInputs:\n[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]\nResponse:\n{\n\"ID\": \"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\",\n\"Agent\": \"string value\",\n\"Addrs\": [\"string value\"],\n\"Protocols\": [\"string value\"],\n\"ConnMgrMeta\": {\n\"FirstSeen\": \"0001-01-01T00:00:00Z\",\n\"Value\": 123,\n\"Tags\": {\n\"name\": 42\n},\n\"Conns\": {\n\"name\": \"2021-03-08T22:52:18Z\"\n}\n}\n}\nNetPeers\nPerms: read\nInputs:\nnull\nResponse:\n[\n{\n\"ID\": \"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\",\n\"Addrs\": [\n\"/ip4/52.36.61.156/tcp/1347/p2p/12D3KooWFETiESTf1v4PGUvtnxMAcEFMzLZbJGg4tjWfGEimYior\"\n]\n}\n]\nNetPing\nPerms: read\nInputs:\n[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]\nResponse:\n60000000000\nNetProtectAdd\nPerms: admin\nInputs:\n[[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]]\nResponse:\n{}\nNetProtectList\nPerms: read\nInputs:\nnull\nResponse:\n[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]\nNetProtectRemove\nPerms: admin\nInputs:\n[[\"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\"]]\nResponse:\n{}\nNetPubsubScores\nPerms: read\nInputs:\nnull\nResponse:\n[\n{\n\"ID\": \"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\",\n\"Score\": {\n\"Score\": 12.3,\n\"Topics\": {\n\"/blocks\": {\n\"TimeInMesh\": 60000000000,\n\"FirstMessageDeliveries\": 122,\n\"MeshMessageDeliveries\": 1234,\n\"InvalidMessageDeliveries\": 3\n}\n},\n\"AppSpecificScore\": 12.3,\n\"IPColocationFactor\": 12.3,\n\"BehaviourPenalty\": 12.3\n}\n}\n]\nNetSetLimit\nPerms: admin\nInputs:\n[\n\"string value\",\n{\n\"Memory\": 123,\n\"Streams\": 3,\n\"StreamsInbound\": 1,\n\"StreamsOutbound\": 2,\n\"Conns\": 4,\n\"ConnsInbound\": 3,\n\"ConnsOutbound\": 4,\n\"FD\": 5\n}\n]\nResponse:\n{}\nNetStat\nPerms: read\nInputs:\n[\"string value\"]\nResponse:\n{\n\"System\": {\n\"NumStreamsInbound\": 123,\n\"NumStreamsOutbound\": 123,\n\"NumConnsInbound\": 123,\n\"NumConnsOutbound\": 123,\n\"NumFD\": 123,\n\"Memory\": 9\n},\n\"Transient\": {\n\"NumStreamsInbound\": 123,\n\"NumStreamsOutbound\": 123,\n\"NumConnsInbound\": 123,\n\"NumConnsOutbound\": 123,\n\"NumFD\": 123,\n\"Memory\": 9\n},\n\"Services\": {\n\"abc\": {\n\"NumStreamsInbound\": 1,\n\"NumStreamsOutbound\": 2,\n\"NumConnsInbound\": 3,\n\"NumConnsOutbound\": 4,\n\"NumFD\": 5,\n\"Memory\": 123\n}\n},\n\"Protocols\": {\n\"abc\": {\n\"NumStreamsInbound\": 1,\n\"NumStreamsOutbound\": 2,\n\"NumConnsInbound\": 3,\n\"NumConnsOutbound\": 4,\n\"NumFD\": 5,\n\"Memory\": 123\n}\n},\n\"Peers\": {\n\"abc\": {\n\"NumStreamsInbound\": 1,\n\"NumStreamsOutbound\": 2,\n\"NumConnsInbound\": 3,\n\"NumConnsOutbound\": 4,\n\"NumFD\": 5,\n\"Memory\": 123\n}\n}\n}\nNetVersion\nPerms: read\nInputs:\nnull\nResponse:\n\"string value\"\nPrevious\nMsig\nNext\nNode\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/node",
    "content": "Reference\nJSON-RPC\nNode\nThese methods are general node management and status commands\nNodeStatus\nThere are not yet any comments for this method.\nPerms: read\nInputs:\n[true]\nResponse:\n{\n\"SyncStatus\": {\n\"Epoch\": 42,\n\"Behind\": 42\n},\n\"PeerStatus\": {\n\"PeersToPublishMsgs\": 123,\n\"PeersToPublishBlocks\": 123\n},\n\"ChainStatus\": {\n\"BlocksPerTipsetLast100\": 12.3,\n\"BlocksPerTipsetLastFinality\": 12.3\n}\n}\nPrevious\nNet\nNext\nPaych\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/paych",
    "content": "Reference\nJSON-RPC\nPaych\nThe Paych methods are for interacting with and managing payment channels\nPaychAllocateLane\nPerms: sign\nInputs:\n[\"f01234\"]\nResponse:\n42\nPaychAvailableFunds\nPerms: sign\nInputs:\n[\"f01234\"]\nResponse:\n{\n\"Channel\": \"f01234\",\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"ConfirmedAmt\": \"0\",\n\"PendingAmt\": \"0\",\n\"NonReservedAmt\": \"0\",\n\"PendingAvailableAmt\": \"0\",\n\"PendingWaitSentinel\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"QueuedAmt\": \"0\",\n\"VoucherRedeemedAmt\": \"0\"\n}\nPaychAvailableFundsByFromTo\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\"]\nResponse:\n{\n\"Channel\": \"f01234\",\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"ConfirmedAmt\": \"0\",\n\"PendingAmt\": \"0\",\n\"NonReservedAmt\": \"0\",\n\"PendingAvailableAmt\": \"0\",\n\"PendingWaitSentinel\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"QueuedAmt\": \"0\",\n\"VoucherRedeemedAmt\": \"0\"\n}\nPaychCollect\nPerms: sign\nInputs:\n[\"f01234\"]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nPaychFund\nPaychFund gets or creates a payment channel between address pair. The specified amount will be added to the channel through on-chain send for future use\nPerms: sign\nInputs:\n[\"f01234\", \"f01234\", \"0\"]\nResponse:\n{\n\"Channel\": \"f01234\",\n\"WaitSentinel\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n}\nPaychGet\nPaychGet gets or creates a payment channel between address pair The specified amount will be reserved for use. If there aren't enough non-reserved funds available, funds will be added through an on-chain message.\nWhen opts.OffChain is true, this call will not cause any messages to be sent to the chain (no automatic channel creation/funds adding). If the operation can't be performed without sending a message an error will be returned. Note that even when this option is specified, this call can be blocked by previous operations on the channel waiting for on-chain operations.\nPerms: sign\nInputs:\n[\n\"f01234\",\n\"f01234\",\n\"0\",\n{\n\"OffChain\": true\n}\n]\nResponse:\n{\n\"Channel\": \"f01234\",\n\"WaitSentinel\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n}\nPaychGetWaitReady\nPerms: sign\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n\"f01234\"\nPaychList\nPerms: read\nInputs:\nnull\nResponse:\n[\"f01234\"]\nPaychNewPayment\nPerms: sign\nInputs:\n[\n\"f01234\",\n\"f01234\",\n[\n{\n\"Amount\": \"0\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"MinSettle\": 10101,\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n}\n]\n]\nResponse:\n{\n\"Channel\": \"f01234\",\n\"WaitSentinel\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Vouchers\": [\n{\n\"ChannelAddr\": \"f01234\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"SecretHash\": \"Ynl0ZSBhcnJheQ==\",\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Lane\": 42,\n\"Nonce\": 42,\n\"Amount\": \"0\",\n\"MinSettleHeight\": 10101,\n\"Merges\": [\n{\n\"Lane\": 42,\n\"Nonce\": 42\n}\n],\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n}\n]\n}\nPaychSettle\nPerms: sign\nInputs:\n[\"f01234\"]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nPaychStatus\nPerms: read\nInputs:\n[\"f01234\"]\nResponse:\n{\n\"ControlAddr\": \"f01234\",\n\"Direction\": 1\n}\nPaychVoucherAdd\nPerms: write\nInputs:\n[\n\"f01234\",\n{\n\"ChannelAddr\": \"f01234\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"SecretHash\": \"Ynl0ZSBhcnJheQ==\",\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Lane\": 42,\n\"Nonce\": 42,\n\"Amount\": \"0\",\n\"MinSettleHeight\": 10101,\n\"Merges\": [\n{\n\"Lane\": 42,\n\"Nonce\": 42\n}\n],\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n},\n\"Ynl0ZSBhcnJheQ==\",\n\"0\"\n]\nResponse:\n\"0\"\nPaychVoucherCheckSpendable\nPerms: read\nInputs:\n[\n\"f01234\",\n{\n\"ChannelAddr\": \"f01234\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"SecretHash\": \"Ynl0ZSBhcnJheQ==\",\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Lane\": 42,\n\"Nonce\": 42,\n\"Amount\": \"0\",\n\"MinSettleHeight\": 10101,\n\"Merges\": [\n{\n\"Lane\": 42,\n\"Nonce\": 42\n}\n],\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n},\n\"Ynl0ZSBhcnJheQ==\",\n\"Ynl0ZSBhcnJheQ==\"\n]\nResponse:\ntrue\nPaychVoucherCheckValid\nPerms: read\nInputs:\n[\n\"f01234\",\n{\n\"ChannelAddr\": \"f01234\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"SecretHash\": \"Ynl0ZSBhcnJheQ==\",\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Lane\": 42,\n\"Nonce\": 42,\n\"Amount\": \"0\",\n\"MinSettleHeight\": 10101,\n\"Merges\": [\n{\n\"Lane\": 42,\n\"Nonce\": 42\n}\n],\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n}\n]\nResponse:\n{}\nPaychVoucherCreate\nPerms: sign\nInputs:\n[\"f01234\", \"0\", 42]\nResponse:\n{\n\"Voucher\": {\n\"ChannelAddr\": \"f01234\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"SecretHash\": \"Ynl0ZSBhcnJheQ==\",\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Lane\": 42,\n\"Nonce\": 42,\n\"Amount\": \"0\",\n\"MinSettleHeight\": 10101,\n\"Merges\": [\n{\n\"Lane\": 42,\n\"Nonce\": 42\n}\n],\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n},\n\"Shortfall\": \"0\"\n}\nPaychVoucherList\nPerms: write\nInputs:\n[\"f01234\"]\nResponse:\n[\n{\n\"ChannelAddr\": \"f01234\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"SecretHash\": \"Ynl0ZSBhcnJheQ==\",\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Lane\": 42,\n\"Nonce\": 42,\n\"Amount\": \"0\",\n\"MinSettleHeight\": 10101,\n\"Merges\": [\n{\n\"Lane\": 42,\n\"Nonce\": 42\n}\n],\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n}\n]\nPaychVoucherSubmit\nPerms: sign\nInputs:\n[\n\"f01234\",\n{\n\"ChannelAddr\": \"f01234\",\n\"TimeLockMin\": 10101,\n\"TimeLockMax\": 10101,\n\"SecretHash\": \"Ynl0ZSBhcnJheQ==\",\n\"Extra\": {\n\"Actor\": \"f01234\",\n\"Method\": 1,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Lane\": 42,\n\"Nonce\": 42,\n\"Amount\": \"0\",\n\"MinSettleHeight\": 10101,\n\"Merges\": [\n{\n\"Lane\": 42,\n\"Nonce\": 42\n}\n],\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n},\n\"Ynl0ZSBhcnJheQ==\",\n\"Ynl0ZSBhcnJheQ==\"\n]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nPrevious\nNode\nNext\nRaft\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/raft",
    "content": "Reference\nJSON-RPC\nRaft\nPrevious\nPaych\nNext\nStart\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/start",
    "content": "Reference\nJSON-RPC\nStart\nPrevious\nRaft\nNext\nState\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/state",
    "content": "Reference\nJSON-RPC\nState\nThe State methods are used to query, inspect, and interact with chain state. Most methods take a TipSetKey as a parameter. The state looked up is the parent state of the tipset. A nil TipSetKey can be provided as a param, this will cause the heaviest tipset in the chain to be used.\nStateAccountKey\nStateAccountKey returns the public key address of the given ID address for secp and bls accounts\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"f01234\"\nStateActorCodeCIDs\nStateActorCodeCIDs returns the CIDs of all the builtin actors for the given network version\nPerms: read\nInputs:\n[21]\nResponse:\n{}\nStateActorManifestCID\nStateActorManifestCID returns the CID of the builtin actors manifest for the given network version\nPerms: read\nInputs:\n[21]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nStateAllMinerFaults\nStateAllMinerFaults returns all non-expired Faults that occur within lookback epochs of the given tipset\nPerms: read\nInputs:\n[\n10101,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"Miner\": \"f01234\",\n\"Epoch\": 10101\n}\n]\nStateCall\nStateCall runs the given message and returns its result without any persisted changes.\nStateCall applies the message to the tipset's parent state. The message is not applied on-top-of the messages in the passed-in tipset.\nPerms: read\nInputs:\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"MsgCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Msg\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"GasUsed\": 9,\n\"EventsRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"GasCost\": {\n\"Message\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"GasUsed\": \"0\",\n\"BaseFeeBurn\": \"0\",\n\"OverEstimationBurn\": \"0\",\n\"MinerPenalty\": \"0\",\n\"MinerTip\": \"0\",\n\"Refund\": \"0\",\n\"TotalCost\": \"0\"\n},\n\"ExecutionTrace\": {\n\"Msg\": {\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"Value\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"ParamsCodec\": 42,\n\"GasLimit\": 42,\n\"ReadOnly\": true,\n\"CodeCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"ReturnCodec\": 42\n},\n\"GasCharges\": [\n{\n\"Name\": \"string value\",\n\"tg\": 9,\n\"cg\": 9,\n\"sg\": 9,\n\"tt\": 60000000000\n}\n],\n\"Subcalls\": [\n{\n\"Msg\": {\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"Value\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"ParamsCodec\": 42,\n\"GasLimit\": 42,\n\"ReadOnly\": true,\n\"CodeCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"ReturnCodec\": 42\n},\n\"GasCharges\": [\n{\n\"Name\": \"string value\",\n\"tg\": 9,\n\"cg\": 9,\n\"sg\": 9,\n\"tt\": 60000000000\n}\n],\n\"Subcalls\": null\n}\n]\n},\n\"Error\": \"string value\",\n\"Duration\": 60000000000\n}\nStateChangedActors\nStateChangedActors returns all the actors whose states change between the two given state CIDs TODO: Should this take tipset keys instead?\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{\n\"t01236\": {\n\"Code\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Head\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Nonce\": 42,\n\"Balance\": \"0\",\n\"Address\": \"f01234\"\n}\n}\nStateCirculatingSupply\nStateCirculatingSupply returns the exact circulating supply of Filecoin at the given tipset. This is not used anywhere in the protocol itself, and is only for external consumption.\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nStateCompute\nStateCompute is a flexible command that applies the given messages on the given tipset. The messages are run as though the VM were at the provided height.\nWhen called, StateCompute will:\nLoad the provided tipset, or use the current chain head if not provided\nCompute the tipset state of the provided tipset on top of the parent state\n(note that this step runs before vmheight is applied to the execution)\nExecute state upgrade if any were scheduled at the epoch, or in null blocks preceding the tipset\nCall the cron actor on null blocks preceding the tipset\nFor each block in the tipset\nApply messages in blocks in the specified\nAward block reward by calling the reward actor\nCall the cron actor for the current epoch\nIf the specified vmheight is higher than the current epoch, apply any needed state upgrades to the state\nApply the specified messages to the state\nThe vmheight parameter sets VM execution epoch, and can be used to simulate message execution in different network versions. If the specified vmheight epoch is higher than the epoch of the specified tipset, any state upgrades until the vmheight will be executed on the state before applying messages specified by the user.\nNote that the initial tipset state computation is not affected by the vmheight parameter - only the messages in the\napply\nset are\nIf the caller wants to simply compute the state, vmheight should be set to the epoch of the specified tipset.\nMessages in the\napply\nparameter must have the correct nonces, and gas values set.\nPerms: read\nInputs:\n[\n10101,\n[\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n],\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Root\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Trace\": [\n{\n\"MsgCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Msg\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"GasUsed\": 9,\n\"EventsRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"GasCost\": {\n\"Message\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"GasUsed\": \"0\",\n\"BaseFeeBurn\": \"0\",\n\"OverEstimationBurn\": \"0\",\n\"MinerPenalty\": \"0\",\n\"MinerTip\": \"0\",\n\"Refund\": \"0\",\n\"TotalCost\": \"0\"\n},\n\"ExecutionTrace\": {\n\"Msg\": {\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"Value\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"ParamsCodec\": 42,\n\"GasLimit\": 42,\n\"ReadOnly\": true,\n\"CodeCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"ReturnCodec\": 42\n},\n\"GasCharges\": [\n{\n\"Name\": \"string value\",\n\"tg\": 9,\n\"cg\": 9,\n\"sg\": 9,\n\"tt\": 60000000000\n}\n],\n\"Subcalls\": [\n{\n\"Msg\": {\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"Value\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"ParamsCodec\": 42,\n\"GasLimit\": 42,\n\"ReadOnly\": true,\n\"CodeCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"ReturnCodec\": 42\n},\n\"GasCharges\": [\n{\n\"Name\": \"string value\",\n\"tg\": 9,\n\"cg\": 9,\n\"sg\": 9,\n\"tt\": 60000000000\n}\n],\n\"Subcalls\": null\n}\n]\n},\n\"Error\": \"string value\",\n\"Duration\": 60000000000\n}\n]\n}\nStateComputeDataCID\nStateComputeDataCID computes DataCID from a set of on-chain deals\nPerms: read\nInputs:\n[\n\"f01234\",\n8,\n[5432],\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\nStateDealProviderCollateralBounds\nStateDealProviderCollateralBounds returns the min and max collateral a storage provider can issue. It takes the deal size and verified status as parameters.\nPerms: read\nInputs:\n[\n1032,\ntrue,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Min\": \"0\",\n\"Max\": \"0\"\n}\nStateDecodeParams\nStateDecodeParams attempts to decode the provided params, based on the recipient actor address and method number.\nPerms: read\nInputs:\n[\n\"f01234\",\n1,\n\"Ynl0ZSBhcnJheQ==\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{}\nStateEncodeParams\nStateEncodeParams attempts to encode the provided json params to the binary from\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n1,\n\"json raw message\"\n]\nResponse:\n\"Ynl0ZSBhcnJheQ==\"\nStateGetActor\nStateGetActor returns the indicated actor's nonce and balance.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Code\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Head\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Nonce\": 42,\n\"Balance\": \"0\",\n\"Address\": \"f01234\"\n}\nStateGetAllocation\nStateGetAllocation returns the allocation for a given address and allocation ID.\nPerms: read\nInputs:\n[\n\"f01234\",\n0,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Client\": 1000,\n\"Provider\": 1000,\n\"Data\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Size\": 1032,\n\"TermMin\": 10101,\n\"TermMax\": 10101,\n\"Expiration\": 10101\n}\nStateGetAllocationForPendingDeal\nStateGetAllocationForPendingDeal returns the allocation for a given deal ID of a pending deal. Returns nil if pending allocation is not found.\nPerms: read\nInputs:\n[\n5432,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Client\": 1000,\n\"Provider\": 1000,\n\"Data\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Size\": 1032,\n\"TermMin\": 10101,\n\"TermMax\": 10101,\n\"Expiration\": 10101\n}\nStateGetAllocations\nStateGetAllocations returns the all the allocations for a given client.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{}\nStateGetBeaconEntry\nStateGetBeaconEntry returns the beacon entry for the given filecoin epoch. If the entry has not yet been produced, the call will block until the entry becomes available\nPerms: read\nInputs:\n[10101]\nResponse:\n{\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\nStateGetClaim\nStateGetClaim returns the claim for a given address and claim ID.\nPerms: read\nInputs:\n[\n\"f01234\",\n0,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Provider\": 1000,\n\"Client\": 1000,\n\"Data\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Size\": 1032,\n\"TermMin\": 10101,\n\"TermMax\": 10101,\n\"TermStart\": 10101,\n\"Sector\": 9\n}\nStateGetClaims\nStateGetClaims returns the all the claims for a given provider.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{}\nStateGetNetworkParams\nStateGetNetworkParams return current network params\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"NetworkName\": \"lotus\",\n\"BlockDelaySecs\": 42,\n\"ConsensusMinerMinPower\": \"0\",\n\"SupportedProofTypes\": [8],\n\"PreCommitChallengeDelay\": 10101,\n\"ForkUpgradeParams\": {\n\"UpgradeSmokeHeight\": 10101,\n\"UpgradeBreezeHeight\": 10101,\n\"UpgradeIgnitionHeight\": 10101,\n\"UpgradeLiftoffHeight\": 10101,\n\"UpgradeAssemblyHeight\": 10101,\n\"UpgradeRefuelHeight\": 10101,\n\"UpgradeTapeHeight\": 10101,\n\"UpgradeKumquatHeight\": 10101,\n\"BreezeGasTampingDuration\": 10101,\n\"UpgradeCalicoHeight\": 10101,\n\"UpgradePersianHeight\": 10101,\n\"UpgradeOrangeHeight\": 10101,\n\"UpgradeClausHeight\": 10101,\n\"UpgradeTrustHeight\": 10101,\n\"UpgradeNorwegianHeight\": 10101,\n\"UpgradeTurboHeight\": 10101,\n\"UpgradeHyperdriveHeight\": 10101,\n\"UpgradeChocolateHeight\": 10101,\n\"UpgradeOhSnapHeight\": 10101,\n\"UpgradeSkyrHeight\": 10101,\n\"UpgradeSharkHeight\": 10101,\n\"UpgradeHyggeHeight\": 10101,\n\"UpgradeLightningHeight\": 10101,\n\"UpgradeThunderHeight\": 10101,\n\"UpgradeWatermelonHeight\": 10101\n},\n\"Eip155ChainID\": 123\n}\nStateGetRandomnessDigestFromBeacon\nStateGetRandomnessDigestFromBeacon is used to sample the beacon for randomness.\nPerms: read\nInputs:\n[\n10101,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"Bw==\"\nStateGetRandomnessDigestFromTickets\nStateGetRandomnessDigestFromTickets. is used to sample the chain for randomness.\nPerms: read\nInputs:\n[\n10101,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"Bw==\"\nStateGetRandomnessFromBeacon\nStateGetRandomnessFromBeacon is used to sample the beacon for randomness.\nPerms: read\nInputs:\n[\n2,\n10101,\n\"Ynl0ZSBhcnJheQ==\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"Bw==\"\nStateGetRandomnessFromTickets\nStateGetRandomnessFromTickets is used to sample the chain for randomness.\nPerms: read\nInputs:\n[\n2,\n10101,\n\"Ynl0ZSBhcnJheQ==\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"Bw==\"\nStateListActors\nStateListActors returns the addresses of every actor in the state\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\"f01234\"]\nStateListMessages\nStateListMessages looks back and returns all messages with a matching to or from address, stopping at the given height.\nPerms: read\nInputs:\n[\n{\n\"To\": \"f01234\",\n\"From\": \"f01234\"\n},\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n10101\n]\nResponse:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nStateListMiners\nStateListMiners returns the addresses of every miner that has claimed power in the Power Actor\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\"f01234\"]\nStateLookupID\nStateLookupID retrieves the ID address of the given address\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"f01234\"\nStateLookupRobustAddress\nStateLookupRobustAddress returns the public key address of the given ID address for non-account addresses (multisig, miners etc)\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"f01234\"\nStateMarketBalance\nStateMarketBalance looks up the Escrow and Locked balances of the given address in the Storage Market\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Escrow\": \"0\",\n\"Locked\": \"0\"\n}\nStateMarketDeals\nStateMarketDeals returns information about every deal in the Storage Market\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"t026363\": {\n\"Proposal\": {\n\"PieceCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"PieceSize\": 1032,\n\"VerifiedDeal\": true,\n\"Client\": \"f01234\",\n\"Provider\": \"f01234\",\n\"Label\": \"\",\n\"StartEpoch\": 10101,\n\"EndEpoch\": 10101,\n\"StoragePricePerEpoch\": \"0\",\n\"ProviderCollateral\": \"0\",\n\"ClientCollateral\": \"0\"\n},\n\"State\": {\n\"SectorStartEpoch\": 10101,\n\"LastUpdatedEpoch\": 10101,\n\"SlashEpoch\": 10101,\n\"VerifiedClaim\": 0\n}\n}\n}\nStateMarketParticipants\nStateMarketParticipants returns the Escrow and Locked balances of every participant in the Storage Market\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"t026363\": {\n\"Escrow\": \"0\",\n\"Locked\": \"0\"\n}\n}\nStateMarketStorageDeal\nStateMarketStorageDeal returns information about the indicated deal\nPerms: read\nInputs:\n[\n5432,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Proposal\": {\n\"PieceCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"PieceSize\": 1032,\n\"VerifiedDeal\": true,\n\"Client\": \"f01234\",\n\"Provider\": \"f01234\",\n\"Label\": \"\",\n\"StartEpoch\": 10101,\n\"EndEpoch\": 10101,\n\"StoragePricePerEpoch\": \"0\",\n\"ProviderCollateral\": \"0\",\n\"ClientCollateral\": \"0\"\n},\n\"State\": {\n\"SectorStartEpoch\": 10101,\n\"LastUpdatedEpoch\": 10101,\n\"SlashEpoch\": 10101,\n\"VerifiedClaim\": 0\n}\n}\nStateMinerActiveSectors\nStateMinerActiveSectors returns info about sectors that a given miner is actively proving.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"SectorNumber\": 9,\n\"SealProof\": 8,\n\"SealedCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"DealIDs\": [5432],\n\"Activation\": 10101,\n\"Expiration\": 10101,\n\"DealWeight\": \"0\",\n\"VerifiedDealWeight\": \"0\",\n\"InitialPledge\": \"0\",\n\"ExpectedDayReward\": \"0\",\n\"ExpectedStoragePledge\": \"0\",\n\"ReplacedSectorAge\": 10101,\n\"ReplacedDayReward\": \"0\",\n\"SectorKeyCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"SimpleQAPower\": true\n}\n]\nStateMinerAllocated\nStateMinerAllocated returns a bitfield containing all sector numbers marked as allocated in miner state\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[0]\nStateMinerAvailableBalance\nStateMinerAvailableBalance returns the portion of a miner's balance that can be withdrawn or spent\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nStateMinerDeadlines\nStateMinerDeadlines returns all the proving deadlines for the given miner\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"PostSubmissions\": [5, 1],\n\"DisputableProofCount\": 42\n}\n]\nStateMinerFaults\nStateMinerFaults returns a bitfield indicating the faulty sectors of the given miner\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[5, 1]\nStateMinerInfo\nStateMinerInfo returns info about the indicated miner\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Owner\": \"f01234\",\n\"Worker\": \"f01234\",\n\"NewWorker\": \"f01234\",\n\"ControlAddresses\": [\"f01234\"],\n\"WorkerChangeEpoch\": 10101,\n\"PeerId\": \"12D3KooWGzxzKZYveHXtpG6AsrUJBcWxHBFS2HsEoGTxrMLvKXtf\",\n\"Multiaddrs\": [\"Ynl0ZSBhcnJheQ==\"],\n\"WindowPoStProofType\": 8,\n\"SectorSize\": 34359738368,\n\"WindowPoStPartitionSectors\": 42,\n\"ConsensusFaultElapsed\": 10101,\n\"PendingOwnerAddress\": \"f01234\",\n\"Beneficiary\": \"f01234\",\n\"BeneficiaryTerm\": {\n\"Quota\": \"0\",\n\"UsedQuota\": \"0\",\n\"Expiration\": 10101\n},\n\"PendingBeneficiaryTerm\": {\n\"NewBeneficiary\": \"f01234\",\n\"NewQuota\": \"0\",\n\"NewExpiration\": 10101,\n\"ApprovedByBeneficiary\": true,\n\"ApprovedByNominee\": true\n}\n}\nStateMinerInitialPledgeCollateral\nStateMinerInitialPledgeCollateral returns the initial pledge collateral for the specified miner's sector\nPerms: read\nInputs:\n[\n\"f01234\",\n{\n\"SealProof\": 8,\n\"SectorNumber\": 9,\n\"SealedCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"SealRandEpoch\": 10101,\n\"DealIDs\": [5432],\n\"Expiration\": 10101,\n\"UnsealedCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nStateMinerPartitions\nStateMinerPartitions returns all partitions in the specified deadline\nPerms: read\nInputs:\n[\n\"f01234\",\n42,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"AllSectors\": [5, 1],\n\"FaultySectors\": [5, 1],\n\"RecoveringSectors\": [5, 1],\n\"LiveSectors\": [5, 1],\n\"ActiveSectors\": [5, 1]\n}\n]\nStateMinerPower\nStateMinerPower returns the power of the indicated miner\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"MinerPower\": {\n\"RawBytePower\": \"0\",\n\"QualityAdjPower\": \"0\"\n},\n\"TotalPower\": {\n\"RawBytePower\": \"0\",\n\"QualityAdjPower\": \"0\"\n},\n\"HasMinPower\": true\n}\nStateMinerPreCommitDepositForPower\nStateMinerInitialPledgeCollateral returns the precommit deposit for the specified miner's sector\nPerms: read\nInputs:\n[\n\"f01234\",\n{\n\"SealProof\": 8,\n\"SectorNumber\": 9,\n\"SealedCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"SealRandEpoch\": 10101,\n\"DealIDs\": [5432],\n\"Expiration\": 10101,\n\"UnsealedCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nStateMinerProvingDeadline\nStateMinerProvingDeadline calculates the deadline at some epoch for a proving period and returns the deadline-related calculations.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"CurrentEpoch\": 10101,\n\"PeriodStart\": 10101,\n\"Index\": 42,\n\"Open\": 10101,\n\"Close\": 10101,\n\"Challenge\": 10101,\n\"FaultCutoff\": 10101,\n\"WPoStPeriodDeadlines\": 42,\n\"WPoStProvingPeriod\": 10101,\n\"WPoStChallengeWindow\": 10101,\n\"WPoStChallengeLookback\": 10101,\n\"FaultDeclarationCutoff\": 10101\n}\nStateMinerRecoveries\nStateMinerRecoveries returns a bitfield indicating the recovering sectors of the given miner\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[5, 1]\nStateMinerSectorAllocated\nStateMinerSectorAllocated checks if a sector number is marked as allocated.\nPerms: read\nInputs:\n[\n\"f01234\",\n9,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\ntrue\nStateMinerSectorCount\nStateMinerSectorCount returns the number of sectors in a miner's sector set and proving set\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Live\": 42,\n\"Active\": 42,\n\"Faulty\": 42\n}\nStateMinerSectors\nStateMinerSectors returns info about the given miner's sectors. If the filter bitfield is nil, all sectors are included.\nPerms: read\nInputs:\n[\n\"f01234\",\n[0],\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n[\n{\n\"SectorNumber\": 9,\n\"SealProof\": 8,\n\"SealedCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"DealIDs\": [5432],\n\"Activation\": 10101,\n\"Expiration\": 10101,\n\"DealWeight\": \"0\",\n\"VerifiedDealWeight\": \"0\",\n\"InitialPledge\": \"0\",\n\"ExpectedDayReward\": \"0\",\n\"ExpectedStoragePledge\": \"0\",\n\"ReplacedSectorAge\": 10101,\n\"ReplacedDayReward\": \"0\",\n\"SectorKeyCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"SimpleQAPower\": true\n}\n]\nStateNetworkName\nStateNetworkName returns the name of the network the node is synced to\nPerms: read\nInputs:\nnull\nResponse:\n\"lotus\"\nStateNetworkVersion\nStateNetworkVersion returns the network version at the given tipset\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n21\nStateReadState\nStateReadState returns the indicated actor's state.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Balance\": \"0\",\n\"Code\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"State\": {}\n}\nStateReplay\nStateReplay replays a given message, assuming it was included in a block in the specified tipset.\nIf a tipset key is provided, and a replacing message is not found on chain, the method will return an error saying that the message wasn't found\nIf no tipset key is provided, the appropriate tipset is looked up, and if the message was gas-repriced, the on-chain message will be replayed - in that case the returned InvocResult.MsgCid will not match the Cid param\nIf the caller wants to ensure that exactly the requested message was executed, they MUST check that InvocResult.MsgCid is equal to the provided Cid. Without this check both the requested and original message may appear as successfully executed on-chain, which may look like a double-spend.\nA replacing message is a message with a different CID, any of Gas values, and different signature, but with all other parameters matching (source/destination, nonce, params, etc.)\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{\n\"MsgCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Msg\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"GasUsed\": 9,\n\"EventsRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"GasCost\": {\n\"Message\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"GasUsed\": \"0\",\n\"BaseFeeBurn\": \"0\",\n\"OverEstimationBurn\": \"0\",\n\"MinerPenalty\": \"0\",\n\"MinerTip\": \"0\",\n\"Refund\": \"0\",\n\"TotalCost\": \"0\"\n},\n\"ExecutionTrace\": {\n\"Msg\": {\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"Value\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"ParamsCodec\": 42,\n\"GasLimit\": 42,\n\"ReadOnly\": true,\n\"CodeCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"ReturnCodec\": 42\n},\n\"GasCharges\": [\n{\n\"Name\": \"string value\",\n\"tg\": 9,\n\"cg\": 9,\n\"sg\": 9,\n\"tt\": 60000000000\n}\n],\n\"Subcalls\": [\n{\n\"Msg\": {\n\"From\": \"f01234\",\n\"To\": \"f01234\",\n\"Value\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"ParamsCodec\": 42,\n\"GasLimit\": 42,\n\"ReadOnly\": true,\n\"CodeCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"MsgRct\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"ReturnCodec\": 42\n},\n\"GasCharges\": [\n{\n\"Name\": \"string value\",\n\"tg\": 9,\n\"cg\": 9,\n\"sg\": 9,\n\"tt\": 60000000000\n}\n],\n\"Subcalls\": null\n}\n]\n},\n\"Error\": \"string value\",\n\"Duration\": 60000000000\n}\nStateSearchMsg\nStateSearchMsg looks back up to limit epochs in the chain for a message, and returns its receipt and the tipset where it was executed\nNOTE: If a replacing message is found on chain, this method will return a MsgLookup for the replacing message - the MsgLookup.Message will be a different CID than the one provided in the 'cid' param, MsgLookup.Receipt will contain the result of the execution of the replacing message.\nIf the caller wants to ensure that exactly the requested message was executed, they must check that MsgLookup.Message is equal to the provided 'cid', or set the\nallowReplaced\nparameter to false. Without this check, and with\nallowReplaced\nset to true, both the requested and original message may appear as successfully executed on-chain, which may look like a double-spend.\nA replacing message is a message with a different CID, any of Gas values, and different signature, but with all other parameters matching (source/destination, nonce, params, etc.)\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n10101,\ntrue\n]\nResponse:\n{\n\"Message\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Receipt\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"GasUsed\": 9,\n\"EventsRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"ReturnDec\": {},\n\"TipSet\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n\"Height\": 10101\n}\nStateSectorExpiration\nStateSectorExpiration returns epoch at which given sector will expire\nPerms: read\nInputs:\n[\n\"f01234\",\n9,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"OnTime\": 10101,\n\"Early\": 10101\n}\nStateSectorGetInfo\nStateSectorGetInfo returns the on-chain info for the specified miner's sector. Returns null in case the sector info isn't found NOTE: returned info.Expiration may not be accurate in some cases, use StateSectorExpiration to get accurate expiration epoch\nPerms: read\nInputs:\n[\n\"f01234\",\n9,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"SectorNumber\": 9,\n\"SealProof\": 8,\n\"SealedCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"DealIDs\": [5432],\n\"Activation\": 10101,\n\"Expiration\": 10101,\n\"DealWeight\": \"0\",\n\"VerifiedDealWeight\": \"0\",\n\"InitialPledge\": \"0\",\n\"ExpectedDayReward\": \"0\",\n\"ExpectedStoragePledge\": \"0\",\n\"ReplacedSectorAge\": 10101,\n\"ReplacedDayReward\": \"0\",\n\"SectorKeyCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"SimpleQAPower\": true\n}\nStateSectorPartition\nStateSectorPartition finds deadline/partition with the specified sector\nPerms: read\nInputs:\n[\n\"f01234\",\n9,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Deadline\": 42,\n\"Partition\": 42\n}\nStateSectorPreCommitInfo\nStateSectorPreCommitInfo returns the PreCommit info for the specified miner's sector. Returns nil and no error if the sector isn't precommitted.\nNote that the sector number may be allocated while PreCommitInfo is nil. This means that either allocated sector numbers were compacted, and the sector number was marked as allocated in order to reduce size of the allocated sectors bitfield, or that the sector was precommitted, but the precommit has expired.\nPerms: read\nInputs:\n[\n\"f01234\",\n9,\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"Info\": {\n\"SealProof\": 8,\n\"SectorNumber\": 9,\n\"SealedCID\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"SealRandEpoch\": 10101,\n\"DealIDs\": [5432],\n\"Expiration\": 10101,\n\"UnsealedCid\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"PreCommitDeposit\": \"0\",\n\"PreCommitEpoch\": 10101\n}\nStateVMCirculatingSupplyInternal\nStateVMCirculatingSupplyInternal returns an approximation of the circulating supply of Filecoin at the given tipset. This is the value reported by the runtime interface to actors code.\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{\n\"FilVested\": \"0\",\n\"FilMined\": \"0\",\n\"FilBurnt\": \"0\",\n\"FilLocked\": \"0\",\n\"FilCirculating\": \"0\",\n\"FilReserveDisbursed\": \"0\"\n}\nStateVerifiedClientStatus\nStateVerifiedClientStatus returns the data cap for the given address. Returns nil if there is no entry in the data cap table for the address.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nStateVerifiedRegistryRootKey\nStateVerifiedRegistryRootKey returns the address of the Verified Registry's root key\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"f01234\"\nStateVerifierStatus\nStateVerifierStatus returns the data cap for the given address. Returns nil if there is no entry in the data cap table for the address.\nPerms: read\nInputs:\n[\n\"f01234\",\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n\"0\"\nStateWaitMsg\nStateWaitMsg looks back up to limit epochs in the chain for a message. If not found, it blocks until the message arrives on chain, and gets to the indicated confidence depth.\nNOTE: If a replacing message is found on chain, this method will return a MsgLookup for the replacing message - the MsgLookup.Message will be a different CID than the one provided in the 'cid' param, MsgLookup.Receipt will contain the result of the execution of the replacing message.\nIf the caller wants to ensure that exactly the requested message was executed, they must check that MsgLookup.Message is equal to the provided 'cid', or set the\nallowReplaced\nparameter to false. Without this check, and with\nallowReplaced\nset to true, both the requested and original message may appear as successfully executed on-chain, which may look like a double-spend.\nA replacing message is a message with a different CID, any of Gas values, and different signature, but with all other parameters matching (source/destination, nonce, params, etc.)\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n42,\n10101,\ntrue\n]\nResponse:\n{\n\"Message\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Receipt\": {\n\"ExitCode\": 0,\n\"Return\": \"Ynl0ZSBhcnJheQ==\",\n\"GasUsed\": 9,\n\"EventsRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n},\n\"ReturnDec\": {},\n\"TipSet\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n],\n\"Height\": 10101\n}\nPrevious\nStart\nNext\nSync\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/sync",
    "content": "Reference\nJSON-RPC\nSync\nThe Sync method group contains methods for interacting with and observing the lotus sync service.\nSyncCheckBad\nSyncCheckBad checks if a block was marked as bad, and if it was, returns the reason.\nPerms: read\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n\"string value\"\nSyncCheckpoint\nSyncCheckpoint marks a blocks as checkpointed, meaning that it won't ever fork away from it.\nPerms: admin\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\n{}\nSyncIncomingBlocks\nSyncIncomingBlocks returns a channel streaming incoming, potentially not yet synced block headers.\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"Miner\": \"f01234\",\n\"Ticket\": {\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ElectionProof\": {\n\"WinCount\": 9,\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"BeaconEntries\": [\n{\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"WinPoStProof\": [\n{\n\"PoStProof\": 8,\n\"ProofBytes\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"Parents\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n],\n\"ParentWeight\": \"0\",\n\"Height\": 10101,\n\"ParentStateRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"ParentMessageReceipts\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Messages\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"BLSAggregate\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Timestamp\": 42,\n\"BlockSig\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ForkSignaling\": 42,\n\"ParentBaseFee\": \"0\"\n}\nSyncMarkBad\nSyncMarkBad marks a blocks as bad, meaning that it won't ever by synced. Use with extreme caution.\nPerms: admin\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{}\nSyncState\nSyncState returns the current status of the lotus sync system.\nPerms: read\nInputs:\nnull\nResponse:\n{\n\"ActiveSyncs\": [\n{\n\"WorkerID\": 42,\n\"Base\": {\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n},\n\"Target\": {\n\"Cids\": null,\n\"Blocks\": null,\n\"Height\": 0\n},\n\"Stage\": 1,\n\"Height\": 10101,\n\"Start\": \"0001-01-01T00:00:00Z\",\n\"End\": \"0001-01-01T00:00:00Z\",\n\"Message\": \"string value\"\n}\n],\n\"VMApplied\": 42\n}\nSyncSubmitBlock\nSyncSubmitBlock can be used to submit a newly created block to the. network through this node\nPerms: write\nInputs:\n[\n{\n\"Header\": {\n\"Miner\": \"f01234\",\n\"Ticket\": {\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ElectionProof\": {\n\"WinCount\": 9,\n\"VRFProof\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"BeaconEntries\": [\n{\n\"Round\": 42,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"WinPoStProof\": [\n{\n\"PoStProof\": 8,\n\"ProofBytes\": \"Ynl0ZSBhcnJheQ==\"\n}\n],\n\"Parents\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n],\n\"ParentWeight\": \"0\",\n\"Height\": 10101,\n\"ParentStateRoot\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"ParentMessageReceipts\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"Messages\": {\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n\"BLSAggregate\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"Timestamp\": 42,\n\"BlockSig\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"ForkSignaling\": 42,\n\"ParentBaseFee\": \"0\"\n},\n\"BlsMessages\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n],\n\"SecpkMessages\": [\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\n}\n]\nResponse:\n{}\nSyncUnmarkAllBad\nSyncUnmarkAllBad purges bad block cache, making it possible to sync to chains previously marked as bad\nPerms: admin\nInputs:\nnull\nResponse:\n{}\nSyncUnmarkBad\nSyncUnmarkBad unmarks a blocks as bad, making it possible to be validated and synced again.\nPerms: admin\nInputs:\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n}\n]\nResponse:\n{}\nSyncValidateTipset\nSyncValidateTipset indicates whether the provided tipset is valid or not\nPerms: read\nInputs:\n[\n[\n{\n\"/\": \"bafy2bzacea3wsdh6y3a36tb3skempjoxqpuyompjbmfeyf34fi3uy6uue42v4\"\n},\n{\n\"/\": \"bafy2bzacebp3shtrn43k7g3unredz7fxn4gj533d3o43tqn2p2ipxxhrvchve\"\n}\n]\n]\nResponse:\ntrue\nPrevious\nState\nNext\nWallet\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/wallet",
    "content": "Reference\nJSON-RPC\nWallet\nWalletBalance\nWalletBalance returns the balance of the given address at the current head of the chain.\nPerms: read\nInputs:\n[\"f01234\"]\nResponse:\n\"0\"\nWalletDefaultAddress\nWalletDefaultAddress returns the address marked as default in the wallet.\nPerms: write\nInputs:\nnull\nResponse:\n\"f01234\"\nWalletDelete\nWalletDelete deletes an address from the wallet.\nPerms: admin\nInputs:\n[\"f01234\"]\nResponse:\n{}\nWalletExport\nWalletExport returns the private key of an address in the wallet.\nPerms: admin\nInputs:\n[\"f01234\"]\nResponse:\n{\n\"Type\": \"bls\",\n\"PrivateKey\": \"Ynl0ZSBhcnJheQ==\"\n}\nWalletHas\nWalletHas indicates whether the given address is in the wallet.\nPerms: write\nInputs:\n[\"f01234\"]\nResponse:\ntrue\nWalletImport\nWalletImport receives a KeyInfo, which includes a private key, and imports it into the wallet.\nPerms: admin\nInputs:\n[\n{\n\"Type\": \"bls\",\n\"PrivateKey\": \"Ynl0ZSBhcnJheQ==\"\n}\n]\nResponse:\n\"f01234\"\nWalletList\nWalletList lists all the addresses in the wallet.\nPerms: write\nInputs:\nnull\nResponse:\n[\"f01234\"]\nWalletNew\nWalletNew creates a new address in the wallet with the given sigType. Available key types: bls, secp256k1, secp256k1-ledger Support for numerical types: 1 - secp256k1, 2 - BLS is deprecated\nPerms: write\nInputs:\n[\"bls\"]\nResponse:\n\"f01234\"\nWalletSetDefault\nWalletSetDefault marks the given address as as the default one.\nPerms: write\nInputs:\n[\"f01234\"]\nResponse:\n{}\nWalletSign\nWalletSign signs the given bytes using the given address.\nPerms: sign\nInputs:\n[\"f01234\", \"Ynl0ZSBhcnJheQ==\"]\nResponse:\n{\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\nWalletSignMessage\nWalletSignMessage signs the given message using the given address.\nPerms: sign\nInputs:\n[\n\"f01234\",\n{\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\n]\nResponse:\n{\n\"Message\": {\n\"Version\": 42,\n\"To\": \"f01234\",\n\"From\": \"f01234\",\n\"Nonce\": 42,\n\"Value\": \"0\",\n\"GasLimit\": 9,\n\"GasFeeCap\": \"0\",\n\"GasPremium\": \"0\",\n\"Method\": 1,\n\"Params\": \"Ynl0ZSBhcnJheQ==\",\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n},\n\"Signature\": {\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n},\n\"CID\": {\n\"/\": \"bafy2bzacebbpdegvr3i4cosewthysg5xkxpqfn2wfcz6mv2hmoktwbdxkax4s\"\n}\n}\nWalletValidateAddress\nWalletValidateAddress validates whether a given string can be decoded as a well-formed address\nPerms: read\nInputs:\n[\"string value\"]\nResponse:\n\"f01234\"\nWalletVerify\nWalletVerify takes an address, a signature, and some bytes, and indicates whether the signature is valid. The address does not have to be in the wallet.\nPerms: read\nInputs:\n[\n\"f01234\",\n\"Ynl0ZSBhcnJheQ==\",\n{\n\"Type\": 2,\n\"Data\": \"Ynl0ZSBhcnJheQ==\"\n}\n]\nResponse:\ntrue\nPrevious\nSync\nNext\nWeb3\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/reference/json-rpc/web3",
    "content": "Reference\nJSON-RPC\nWeb3\nPrevious\nWallet\nNext\nOverview\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced",
    "content": "Smart contracts\nAdvanced\nThis section contains information on the advances features of the Filecoin network, specifically focused at smart contract developers.\nPrevious\nBest practices\nNext\nWrapped FIL\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/aggregated-deal-making",
    "content": "Smart contracts\nAdvanced\nAggregated deal-making\nLearn about aggregated deal-making on the Filecoin blockchain, where developers can combine small storage deals into larger, more attractive deals for storage providers.\nPrevious\nCross-chain bridges\nNext\nContract automation\nLast updated\n3 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/contract-automation",
    "content": "Smart contracts\nAdvanced\nContract automation\nSmart contract automation enables decentralized applications (dapps) to interact with both on-chain and off-chain data in an automated and trustless manner. Automation tools allow developers to build\nPrevious\nAggregated deal-making\nNext\nRelay\nLast updated\n3 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/cross-chain-bridges",
    "content": "Smart contracts\nAdvanced\nCross-chain bridges\nBlockchain networks are often isolated and cannot interact with each other directly, so cross-chain bridges serve as a link between them and bring interoperability between different blockchains.\nPrevious\nFEVM Indexers\nNext\nAggregated deal-making\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/fevm-indexers",
    "content": "Smart contracts\nAdvanced\nFEVM Indexers\nFEVM Indexers allow users and developers to query Filecoin chain data in an extremely quick manner. Learn what FEVM indexers are available on Filecoin and how to use them through existing data provide\nPrevious\nMultisig\nNext\nCross-chain bridges\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/multicall",
    "content": "Smart contracts\nAdvanced\nMulticall\nMulticall allows you to aggregate multiple contract reads into a single JSON-RPC request, and execute multiple state-changing calls in a single transaction on the FVM.\nPrevious\nOracles\nNext\nMultisig\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/multisig",
    "content": "Smart contracts\nAdvanced\nMultisig\nMultisig wallets enhance security and decentralization by requiring multiple signatures for transactions, distributing control among multiple participants.\nPrevious\nMulticall\nNext\nFEVM Indexers\nLast updated\n21 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/oracles",
    "content": "Smart contracts\nAdvanced\nOracles\nOracles act as a bridge between the Filecoin network and external data sources. Secure oracles allow smart contracts on the FVM to access and use external data sources.\nPrevious\nWrapped FIL\nNext\nMulticall\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/relay",
    "content": "Smart contracts\nAdvanced\nRelay\nRelay is a service that allows users to interact with the Filecoin network using meta transactions. Users can submit transactions to the network without having to pay gas fees. Instead, a relayer pays\nPrevious\nContract automation\nNext\nMainnet\nLast updated\n3 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/advanced/wrapped-fil",
    "content": "Smart contracts\nAdvanced\nWrapped FIL\nWrapped FIL (wFIL) is the canonical wrapper token of the native Filecoin (FIL) token. Wrapped FIL features a 1-to-1 ratio pegged to FIL.\nPrevious\nAdvanced\nNext\nOracles\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts",
    "content": "Smart contracts\nDeveloping contracts\nThis section contains a wealth of information specifically about building smart contracts on the Filecoin network.\nPrevious\nRaaS interfaces\nNext\nGet test tokens\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/best-practices",
    "content": "Smart contracts\nDeveloping contracts\nBest practices\nThis page describes best practices for testing, developing and deploying smart contracts on the Filecoin network.\nPrevious\nVerify a contract\nNext\nAdvanced\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/call-built-in-actors",
    "content": "Smart contracts\nDeveloping contracts\nCall built-in actors\nFilecoin built-in actors can be invoked in a smart contract using either the Protocol API or the Filecoin.sol library. This page provides instructions on how to use each method.\nPrevious\nSolidity libraries\nNext\nFilecoin.sol\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/client-contract-tutorial",
    "content": "Smart contracts\nDeveloping contracts\nDirect deal-making with Client contract\nThis page covers the client contract, and includes a tutorial on how developers can use the client contract to create storage deals programmatically.\nPrevious\nFilecoin.sol\nNext\nUsing RaaS\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/filecoin.sol",
    "content": "Smart contracts\nDeveloping contracts\nFilecoin.sol\nExternal Solidity libraries can help developers create their applications quicker by offloading some of the work to already existing smart contracts.\nThe Filecoin Solidity library allows developers to:\nInteract with Filecoin built-in actors.\nSimplify the interaction with the Filecoin storage market, miner actors, the verified registry for Filecoin Plus automation, and more.\nFilecoin-specific data types such as\nFilAddress\n,\nFilActorID\n,\nCIDs\n, storage deals, and more.\nOpenZeppelin-like utilities specific to Filecoin.\nCBOR serialization and deserialization for parameters and return data.\nIn order to access exported Filecoin built-in actor methods in your smart contract, you will need to import Filecoin.sol in your Solidity project. As they are embeddable libraries, they don’t need to be present on-chain. You can just import the library you desire and call its methods.\nOnce the library is installed in your project, you can write Solidity code to call APIs from different built-in actors using Filecoin-specific data types or data conversions from the utility library.\nAdd to your contract\nRun the following command in your Solidity project, which is created using any smart contract development framework such as Hardhat, Truffle, or Foundry.\nnpm install filecoin-solidity-api\nUsage\nOnce installed, you can call built-in actors in the library after importing them into your smart contract.\n// contracts/MyNFT.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport { MarketAPI } from \"filecoin-solidity-api/contracts/v0.8/MarketAPI.sol\";\nimport { CommonTypes } from \"filecoin-solidity-api/contracts/v0.8/types/CommonTypes.sol\";\nimport { MarketTypes } from \"filecoin-solidity-api/contracts/v0.8/types/MarketTypes.sol\";\nimport { BigIntCBOR } from \"filecoin-solidity-api/contracts/v0.8/cbor/BigIntCbor.sol\";\ncontract MyFilecoinContract {\n...\n}\nAccountAPI.sol\n: validates signatures from an address.\nMinerAPI.sol\n: manages storage provider operation.\nMarketAPI.sol\n: manages storage deals on Filecoin.\nPowerAPI.sol\n: manages storage power for each storage provider and the whole network.\nDataCap.sol\nand\nVerifRegAPI.sol\n: manages DataCap and verified clients for Filecoin Plus.\nUnlike OpenZeppelin contracts, you do not need to inherit contracts to use their features. With Filecoin.sol you just need to call the methods from those solidity contracts:\nCommonTypes.FilActorId minerID = CommonTypes.FilActorId.wrap(1130);\nCommonTypes.BigInt memory returnData = MinerAPI.getVestingFunds(minerID);\nFilecoin.sol also offers several utility libraries to help developers to convert data types for different variables, including FILAddress, BigIntegers, ActorID, and CBOR. You can import those libraries from the\nutils\nfolder:\nimport \"filecoin-solidity-api/contracts/v0.8/utils/Actor.sol\";\nimport \"filecoin-solidity-api/contracts/v0.8/utils/BigInts.sol\";\nimport \"filecoin-solidity-api/contracts/v0.8/utils/FilAddresses.sol\";\nExample\nWe can write a simple Solidity smart contract to query basic information for a Filecoin storage deal:\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\nimport \"filecoin-solidity-api/contracts/v0.8/MarketAPI.sol\";\nimport \"filecoin-solidity-api/contracts/v0.8/types/MarketTypes.sol\";\nimport \"hardhat/console.sol\";\ncontract StorageDealQuery {\n// Query the start epoch and duration(in epochs) of a deal proposal.\nfunction get_deal_term(uint64 dealID) public returns (MarketTypes.GetDealTermReturn memory) {\nreturn MarketAPI.getDealTerm(dealID);\n}\n// Query the storage provider who stores the date for this deal.\nfunction get_deal_provider(uint64 dealID) public returns (uint64) {\nreturn MarketAPI.getDealProvider(dealID);\n}\n// Query the collateral required from the storage provider for this deal proposal.\nfunction get_deal_provider_collateral(uint64 dealID) public returns (CommonTypes.BigInt memory) {\nreturn MarketAPI.getDealProviderCollateral(dealID);\n}\n}\nNext steps\nCheck out these links to learn more about the Filecoin.sol library.\nPrevious\nCall built-in actors\nNext\nDirect deal-making with Client contract\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/foundry",
    "content": "Smart contracts\nDeveloping contracts\nFoundry\nFoundry is a fast toolkit for application development written in Rust equipped with a testing framework, as well as utilities for interacting with smart contracts and getting chain data.\nPrevious\nHardhat\nNext\nSolidity libraries\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/get-test-tokens",
    "content": "Smart contracts\nDeveloping contracts\nGet test tokens\nTest funds are available to developer so that they can test their smart contracts and applications within the confines of a test network. This page covers how to get test funds.\nPrevious\nDeveloping contracts\nNext\nRemix\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/hardhat",
    "content": "Smart contracts\nDeveloping contracts\nHardhat\nHardhat is an open-source development environment designed to provide developers with a flexible and extensible framework for building, testing, and deploying smart contracts.\nPrevious\nRemix\nNext\nFoundry\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/remix",
    "content": "Smart contracts\nDeveloping contracts\nRemix\nThe Filecoin EVM runtime allows developers to use Ethereum tooling, like Remix, with the Filecoin network.\nPrevious\nGet test tokens\nNext\nHardhat\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/solidity-libraries",
    "content": "Smart contracts\nDeveloping contracts\nSolidity libraries\nWith Filecoin Virtual Machine (FVM), Solidity developers can use existing libraries listed on this page in their FVM smart contracts.\nPrevious\nFoundry\nNext\nCall built-in actors\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/using-raas",
    "content": "Smart contracts\nDeveloping contracts\nUsing RaaS\nThis page is a tutorial on how to replicate, renew and repair storage deals on Filecoin.\nPrevious\nDirect deal-making with Client contract\nNext\nVerify a contract\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/developing-contracts/verify-a-contract",
    "content": "Smart contracts\nDeveloping contracts\nVerify a contract\nThis page lists various Filecoin Ethereum Virtual Machine (FEVM) explorers with verification tools, and provides a tutorial on how to verify a contract using Filfox.\nPrevious\nUsing RaaS\nNext\nBest practices\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime",
    "content": "Smart contracts\nFilecoin EVM-runtime\nThis section explains what the Filecoin EVM-runtime (FEVM) is, and how developers can use it to interact with the Filecoin network.\nPrevious\nFAQs\nNext\nActor types\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/actor-types",
    "content": "Smart contracts\nFilecoin EVM-runtime\nActor types\nIn the Filecoin network, an address is a unique identifier that refers to an actor in the Filecoin state. All actors in Filecoin have a corresponding address which varies from the different usages.\nPrevious\nFilecoin EVM-runtime\nNext\nAddress types\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/address-types",
    "content": "Smart contracts\nFilecoin EVM-runtime\nAddress types\nIn the Filecoin network, an address is a unique identifier that refers to an actor in the Filecoin state. All actors in Filecoin have a corresponding address which varies from the different usages.\nFilecoin has five address classes, and actors tend to have\nmultiple\naddresses. Furthermore, each address class has its own rules for converting between binary and text.\nThe goal of using different types of addresses is to provide a robust address format that is scalable, easy to use, and reliable. These addresses encode information including：\nNetwork prefix: indicates the network the actor belongs to.\nProtocol indicator: identify the type and version of this address.\nPayload: identify the actor according to the protocol.\nChecksum: validate the address.\nFilecoin addresses can be represented either as raw bytes or a string. Raw bytes format will always be used on-chain. An address can also be encoded to a string, including a checksum and network prefix. The string format will never appear on-chain and is only for human-readable purposes.\nFilecoin address can be broken down like this:\nNetwork prefix\nProtocol indicator\nPayload\nChecksum\nf\n/\nt\n1 byte:\n0\n/\n1\n/\n2\n/\n3\n/\n4\nn\nbytes\n4 bytes\nThe network prefix is prepended to an address when encoding to a string. The network prefix indicates which network an address belongs to. Network prefixes never appear on-chain and are only used when encoding an address to a human-readable format.\nf\n- addresses on the Filecoin mainnet.\nt\n- addresses used on any Filecoin testnet.\nThe protocol indicator identifies the address type, which describes how a method should interpret the information in the\npayload\nfield of an address.\n0\n: An ID address.\n1\n: A wallet address generated from a secp256k public key.\n2\n: An actor address.\n3\n: A wallet address generated from BLS public key.\n4\n: A delegated address for user-defined foreign actors:\n410\n: Ethereum-compatible address space managed by the Ethereum address manager (EAM). Each 410 address is equivalent to an 0x address.\nEach address type is described below.\nID addresses\nAll addresses have a short integer assigned to them by\nInitActor\nsequentially, a unique actor that can create\nnew\nactors. The integer that gets assigned is the ID of that actor. An\nID address\nis an actor’s ID prefixed with the network identifier and the protocol indicator. Therefore, any address in the Filecoin network has a unique ID address assigned to it.\nThe mainnet burn account ID address is\nf099\nand is structured as follows:\nProtocol Indicator\n|\nf 0 9 9\n|    |\n|    Actor ID\n|\nNetwork identifier\nActor addresses\nAddressed representing an actor deployed through the init actor in the Filecoin network. It provides a way to create robust addresses for actors not associated with a public key. They are generated by taking a\nsha256\nhash of the output of the account creation.\nActor addresses are often referred to by their shorthand,\n2\n.\nWallet addresses\nAddresses managed directly by users, like accounts, are derived from a public-private key pair. If you have access to a private key, you can sign messages sent from that wallet address. The public key is used to derive an address for the actor. Public key addresses are referred to as\nrobust addresses\nas they do not depend on the Filecoin chain state.\nPublic key addresses allow devices, like hardware wallets, to derive a valid Filecoin address for your account using just the public key. The device doesn’t need to ask a remote node what your ID address is. Public key addresses provide a concise, safe, human-readable way to reference actors before the chain state is final. ID addresses are a space-efficient way to identify actors in the Filecoin chain state, where every byte matters.\nFilecoin supports two types of public key addresses:\nt1iandfn6d...ddboqxbhoeva\n- a testnet wallet address generated using secp256k1.\nt3vxj34sbdr3...road7cbygq\n- a testnet wallet address generated using BLS.\nDelegated addresses\nImplement foreign addressing systems in Filecoin.\nA predictable addressing scheme to support interactions with addresses that do not yet exist on-chain.\nUser-defined, programmable addressing systems without extensive changes and network upgrades.\nFor example, a testnet delegated address using the Ethereum Addressing System is structured as follows:\nAddress manager actor ID\n|\nt 410 iandfn6d...\n|     |\n|     New actor ID\n|\nNetwork identifier\nThe\naddress manager actor ID\nis the actor ID of the address manager actor, which creates new actors and assigns a\n4\naddress to the new actor. This leverages the extensible feature of the\nf4\naddress class.\nThe\nnew actor ID\nis the arbitrary actor ID chosen by that actor.\nRestrictions\nThis address type plays an essential role in supporting the FEVM. It allows the Filecoin network to be able to recognize the foreign address and validate and execute the transactions sent and signed by the supported foreign addresses.\nThe supported foreign addresses can be cast as\nf4/t4\naddresses, and vice-versa. But not with\nf1/t1\nor\nf3/t3\naddresses.\nEthereum Address Manager\nEthereum Address Manager (EAM) is a built-in actor that manages the Ethereum address space, anchored at the\n410\naddress namespace. It acts like an EVM smart contract factory, offering methods to create and assign the\nf410/t410\nFilecoin address to Ethereum address.\nThe subaddress of an\nf410/t410\naddress is the original Ethereum address. Ethereum addresses can be cast as\nf410\naddresses, and vice-versa. The\nf410/t410\naddress will be used for the Ethereum-compatible FVM (FEVM) development tools and applications built on FEVM.\nExample\n# An Ethereum wallet address.\n0xd388ab098ed3e84c0d808776440b48f685198498\n# The corresponding Filecoin address on Calibration.\nt410f2oekwcmo2pueydmaq53eic2i62crtbeyuzx2gmy\nIf you have an Ethereum wallet address starting with\n0x\n, then the Ethereum Address Manager (EAM) will assign a corresponding\nt410\nFilecoin address to it. If you send 10 TFIL to\n0xd388ab098ed3e84c0d808776440b48f685198498\nusing a wallet like MetaMask, you will receive 10 TFIL to your\nt410f2oekwcmo2pueydmaq53eic2i62crtbeyuzx2gmy\naddress on Filecoin Calibration testnet.\n# A Filecoin smart contract address.\nt410fl5qeigmkcytz7b6sqoojtcetqwf37dm4zv4aijq\n# The corresponding Ethereum smart contract address.\n0x5f6044198a16279f87d2839c998893858bbf8d9c\nAgain, assume you have deployed a solidity smart contract on Filecoin Calibration. Then you will receive a smart contract address starting with\nt410\n. EAM will also assign a corresponding\n0x\nEthereum address to it.\nWhen you try to invoke this smart contract on Filecoin using Ethereum tooling, you need to use your\n0x5f6044198a16279f87d2839c998893858bbf8d9c\nsmart contract address.\nConverting to a 0x-style Address\nThe Filecoin EVM runtime introduces support for\n0x\nEthereum-style addresses. Filecoin addresses starting with either\nf0\nor\nf410f\ncan be converted to the\n0x\nformat as follows:\nAddresses starting with\nf0\ncan be converted to the\n0x\nformat by:\nExtracting the\nactor_id\n(e.g., the\n1234\nin\nf01234\n).\nHex encode with a\n0xff\nprefix:\nsprintf(\"0xff0000000000000000000000%016x\", actor_id)\n.\nAddresses starting with\nf410f\naddress can be converted to the\n0x\nformat by:\nRemoving the\nf410f\nprefix.\nDecoding the remainder as base 32 (RFC 4648 without padding).\nTrim off the last 4 bytes. This is a\nchecksum\nthat can optionally be verified, but that’s beyond the scope of this documentation.\nAssert that the remaining address is 20 bytes long.\nHex-encode:\nsprintf(0x%040x\", actor_id)\n.\nf0\naddresses are\nnot\nre-org stable and should not be used until the chain has settled.\nConverting to a Filecoin Address\nOn the flip side, Ethereum-style addresses can be converted to a Filecoin address as follows:\nAddresses starting with\n0xff0000000000000000000000\ncan be converted to a Filecoin address by:\nDecoding the last 16 hex digits into a uint64\nFormat the address as\nf0${decimal(id)}\nwhere decimal(id) is the decimal representation of the decoded actor ID.\nOtherwise, it maps to f410f…\nPrevious\nActor types\nNext\nFILForwarder\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/difference-with-ethereum",
    "content": "Smart contracts\nFilecoin EVM-runtime\nDifference with Ethereum\nWhile Filecoin EVM runtime aims to be compatible with the Ethereum ecosystem, it has some marked differences.\nPrevious\nFILForwarder\nNext\nHow gas works\nLast updated\n7 days ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/filforwarder",
    "content": "Smart contracts\nFilecoin EVM-runtime\nFILForwarder\nThe FilForwarder is a smart contract that lets users transfer FIL from an Ethereum-based f4 address to a Filecoin address of a different type.\nPrevious\nAddress types\nNext\nDifference with Ethereum\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/how-gas-works",
    "content": "Smart contracts\nFilecoin EVM-runtime\nHow gas works\nInstead of assigning a fixed gas cost in each instruction, the Filecoin EVM runtime charges FIL gas based on the WASM code execution of the Filecoin EVM runtime interpreter.\nPrevious\nDifference with Ethereum\nNext\nPrecompiles\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/filecoin-evm-runtime/precompiles",
    "content": "Smart contracts\nFilecoin EVM-runtime\nPrecompiles\nA precompile refers to a pre-existing piece of code or a smart contract that is already deployed on the Filecoin network for use by developers.\nPrevious\nHow gas works\nNext\nProgrammatic storage\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/fundamentals",
    "content": "Smart contracts\nFundamentals\nLearn about the various tools and options for adding Filecoin storage to software applications, smart contracts, and workflows.\nPrevious\nSpin up a lite-node\nNext\nThe Filecoin Virtual Machine\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/fundamentals/erc-20-quickstart",
    "content": "Smart contracts\nFundamentals\nERC-20 quickstart\nIn this quickstart tutorial we’ll walk through how to deploy your first smart-contract to the Filecoin network.\nPrevious\nFilecoin EVM runtime\nNext\nRoadmap\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/fundamentals/faqs",
    "content": "Smart contracts\nFundamentals\nFAQs\nA list of frequent asked questions about FVM, FEVM and how to build on Filecoin network.\nPrevious\nSupport\nNext\nFilecoin EVM-runtime\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/fundamentals/filecoin-evm-runtime",
    "content": "Smart contracts\nFundamentals\nFilecoin EVM runtime\nThis page details what exactly EVM compatibility means for the FVM, and any other information that Ethereum developers may need to build applications on Filecoin.\nPrevious\nThe Filecoin Virtual Machine\nNext\nERC-20 quickstart\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/fundamentals/roadmap",
    "content": "Smart contracts\nFundamentals\nRoadmap\nThe FVM project has come a long way in an incredibly short amount of time. This is the roadmap for FVM features for the Filecoin network.\nGoal\nThe goal of the FVM project is to add general programmability to the Filecoin blockchain. Doing so will give developers all kinds of creative options, including:\nOrchestrating storage.\nCreating L2 networks on top of the Filecoin blockchain.\nProviding new incentive structures for providers and users.\nFrequently verifying that providers are storing data correctly.\nAutomatically finding which storage providers are storing what data.\nMany more data-based applications.\nFilecoin was the first network deploying programmability, post-genesis, to ensure that layer 0 of the Filecoin blockchain was stable and fully functional. Due to the large amounts of capital already secured within the Filecoin network, the development of the FVM needs to be careful and gradual.\nRoadmap\nThe FVM roadmap is split into three initiatives:\nMilestone 1: Initialize the project and allow built-in actors to run on the FVM.\nMilestone 2: Enable the deployment of Ethereum virtual machine (EVM) compatible smart contracts onto the FVM. Also, allow developers to create and deploy their own native actors to the FVM.\nMilestone 3: Continue to enhance programmability on FVM.\n✅ Milestone 0\n✅ Lotus mainnet canaries with FVM support\nCompleted in February 2022\nThe reference FVM implementation has been integrated into a fork of Lotus (the Filecoin reference client). A fleet of canary nodes have been launched on mainnet, running WASM-compiled built-in actors on the FVM. The canaries are monitored for consensus faults and to gather telemetry. This milestone is a testing milestone that’s critical to collect raw execution data to feed into the overhaul of the gas model, in preparation for user-programmability. It implies no network upgrade.\n✅ Milestone 0.5\n✅ Ability to run FVM node and sync mainnet\nCompleted in March 2022\nAny node operator can sync the Filecoin Mainnet using the FVM and Rust built-in actors, integrated in Lotus, Venus, Forest, and Fuhon implementations. It implies no network upgrade.\n✅ Milestone 1\n✅ Introduction of non-programmable WASM-based FVM\nCompleted in May 2022\nMainnet will atomically switch from the current legacy virtual machines to the WASM-based reference FVM. A new gas model will be activated that accounts for actual WASM execution costs. Only Rust built-in actors will be supported at this time. This milestone requires a network upgrade.\n✅ Network Version 17 (nv17): Initial protocol refactors for programmability\nCompleted in November 2022\nAn initial set of protocol refactors targeting built-in actors, including the ability to introduce new storage markets via user-defined smart contracts.\n✅ Milestone 2.1\n✅ Ability to deploy EVM contracts to mainnet (FEVM)\nCompleted in March 2023\nThe Filecoin network will become user-programmable for the first time. Developers will be able to deploy smart contracts written in Solidity or Yul, and compiled to EVM. Smart contracts will be able to access Filecoin functionality by invoking built-in actors. Existing Ethereum tooling will be compatible with Filecoin. This milestone requires a network upgrade.\n✅ Hyperspace testnet goes live\nCompleted on January 16th 2023\nA new stable developer testnet called Hyperspace will be launched as the pre-production testnet. The community is invited to participate in heavy functional, technical, and security testing. Incentives and bounties will be available for developers and security researchers.\n✅ FEVM goes live on mainnet\nCompleted on March 14th 2023\n🔄 Milestone 2.2\n🔄 Ability to deploy Wasm actors to mainnet\nTo complete midway through 2023\nDevelopers will be able to deploy custom smart contracts written in Rust, AssemblyScript, or Go, and compiled to WASM bytecode. SDKs, tutorials, and other developer materials will be generally available. This milestone requires a network upgrade.\n🔮 Milestone 3+\n🔮 Further incremental protocol refactors to enhance programmability\nTo complete in 2023\nA series of additional incremental protocol upgrades (besides nv17) to move system functionality from privileged space to user space. The result will be a lighter and less opinionated base Filecoin protocol, where storage markets, deal-making, incentives, etc. are extensible, modular, and highly customizable through user-deployed actors. Enhanced programming features such as user-provided cron, asynchronous call patterns, and more will start to be developed at this stage.\nPrevious\nERC-20 quickstart\nNext\nSupport\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/fundamentals/support",
    "content": "Smart contracts\nFundamentals\nSupport\nIf you need assistance while exploring the Filecoin virtual machine, you can reach out to the team and community using the links on this page.\nPrevious\nRoadmap\nNext\nFAQs\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/fundamentals/the-fvm",
    "content": "Smart contracts\nFundamentals\nThe Filecoin Virtual Machine\nThe Filecoin Virtual Machine (FVM) is a runtime environment enabling users to deploy their own smart contracts on the Filecoin blockchain. This page covers the basics of the FVM.\nPrevious\nFundamentals\nNext\nFilecoin EVM runtime\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/programmatic-storage",
    "content": "Smart contracts\nProgrammatic storage\nThis section covers how to programmatically store data on the Filecoin network.\nPrevious\nPrecompiles\nNext\nAggregated deal-making\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/programmatic-storage/aggregated-deal-making",
    "content": "Smart contracts\nProgrammatic storage\nAggregated deal-making\nAggregation of smaller data pieces to store on Filecoin\nPrevious\nProgrammatic storage\nNext\nDirect deal-making\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/programmatic-storage/direct-deal-making",
    "content": "Smart contracts\nProgrammatic storage\nDirect deal-making\nThis page explains the direct deal-making process in regards to the Filecoin network.\nPrevious\nAggregated deal-making\nNext\nData replication, renewal and repair (RaaS)\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/programmatic-storage/raas",
    "content": "Smart contracts\nProgrammatic storage\nData replication, renewal and repair (RaaS)\nReplicate, Renew, and Repair your storage deals with a service\nRaaS refers to replication, renew and repair of storage deals. It is a feature of programmatic storage on Filecoin, enabled by FVM. This page covers the basic features of RaaS and handy tutorial to help you get started.\nIntroduction\nWhat does it mean to replicate, renew, or repair data storage deals through a Filecoin smart contract?\nRaaS refers to replication, renewal and repair as a service, for data stored in storage deals on Filecoin:\nReplication refers to the option to store a user-defined number of replicas of your data.\nRenewal refers to the option to automatically observe on-chain storage deals until the expiry of their deal term, and automatically renew the deal.\nRepair refers to the automatic observation of storage deals, to ensure they are not in a faulted sector. If they are, these workers repair them automatically.\nThe motivation behind RaaS is to enable perpetual data storage on Filecoin.\n“As a service\" refers to the opportunity to provide these RaaS features as services, to incentivize clients to use them and/or storage platforms to enable them. These are a part of the Filecoin programmable storage market with FVM.\nRaaS modules\nThere are two ways available to use with RaaS, for different purposes - the self-hosted RaaS where the Client runs all components and aggregator-hosted RaaS, which refers to a fully hosted RaaS service that is provided to the Client by aggregators.\nAt the RaaS, any contract or storage platform that has the metadata of the stored data, can request the RaaS node to perform its functions. However, the RaaS node has to be self-hosted in order to function. Storage platforms have the opportunity to build an aggregator-hosted RaaS node, to provide hosted replication, renewal, and repair services to clients.\nA RaaS node, which monitors deals done through aggregators on Filecoin, will take action if replication, renew, or repair requirements are not observed.\nRaaS nodes are only able to monitor deals from aggregators, since the nodes listen to the SubmitAggregatorRequest event in order to pick these deals up.\nHere is a brief outline of the RaaS process:\nAn Aggregator sends a CID to the RaaS node, requesting for replication, renewal and/or repair as needed.\nThe RaaS smart contracts maintains the information of deals created by the RaaS, including deal_id and miner_id.\nThe RaaS node periodically checks the deal status on the Filecoin network, by interacting with the RaaS` smart contract.\nIf the deal requires replication, renewal and/or repair, the RaaS node resubmit deals to aggregators and requests the aggregator to make a new deal.\nTutorial\nInteracting with the Smart Contract\nFirst, you need to either:\nOR\nUse an existing instance of the\nFullInterface\nlocated at\n0x6ec8722e6543fB5976a547434c8644b51e24785b\n. This instance is on the Calibration testnet only, for the moment.\nInteract with the smart contract by submitting a CID of your choice to the\nsubmit\nfunction. This will create a new deal request that will be picked up by the RaaS services.\n// contractInstance is the address of the contract you deployed or the FullInterface address above.\nconst dealStatus = await ethers.getContractAt(\"DealStatus\", contractInstance);\n// Submit the CID of the file you want to upload to the Filecoin network in the following way.\nawait dealStatus.submit(ethers.utils.toUtf8Bytes(newJob.cid));\nBefore that, you need to know how to register the various RaaS workers. Note that RaaS functionality will NOT function automatically if deals are only created using submit function.\nReplicate, renew, and repair\nYou can add workers to perform replication, renewal, and repair jobs by having them listen to the\nSubmitAggregatorRequest\n. The methods for doing so differ between the Base and Full interfaces.\nThis event listener performs processing for each job submitted to the contract to add RaaS service workers and eventually to call\ncomplete\non the contract.\n// Initialize the listener for the Deal Creation event\nasync function initializeDealCreationListener() {\nconst dealStatus = await ethers.getContractAt(contractName, contractInstance);\n/// Logic for handling SubmitAggregatorRequest events\nfunction handleEvent(transactionId, cid) {\nconsole.log(`Received SubmitAggregatorRequest event: (Transaction ID: ${transactionId}, CID: ${cid})`);\n// ... other code to handle the event emission\n(async () => {\n// ... other code\n// After processing this event, reattach the event listener\nif (dealStatus.listenerCount(\"SubmitAggregatorRequest\") === 0) {\ndealStatus.once(\"SubmitAggregatorRequest\", handleEvent);\n}\n})();\n}\n// Start listening to the first event and recursively handle the next events\nif (dealStatus.listenerCount(\"SubmitAggregatorRequest\") === 0) {\ndealStatus.once(\"SubmitAggregatorRequest\", handleEvent);\n}\n}\nTo use this, call\nyarn service\nin the terminal and proceed through the frontend, as you normally would when uploading a file. Register the workers using the autocompleted CID that appears in the box.\nIf you want to register the workers manually for a job that you didn't upload, paste in the known CID of your file into the box and register the jobs.\nPrevious\nDirect deal-making\nNext\nRaaS interfaces\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/smart-contracts/programmatic-storage/raas-interfaces",
    "content": "Smart contracts\nProgrammatic storage\nRaaS interfaces\nSpecifications for RaaS interfaces.\nRaaS has a base and full interface to enable replication, renew and repair of storage deals.\nSelf-hosted RaaS\nRaaS refers to replication, renewal and repair as a service, for data stored in storage deals on Filecoin. Developers can leverage the self-hosted RaaS to provide RaaS features, within their storage solution, using the RaaS Starter Kit.\nSelf-hosted RaaS requires 4 components:\nThe Client who has data to upload\nAn Aggregator platform (a type of storage solution) that receives the Client’s data and makes a storage deal on Filecoin\nThe RaaS node, hosted by the developer, that checks if the storage deal requires replication, renewal and/or repair\nThe RaaS DealStatus smart contract that the RaaS node executes checks with\nIn the example of replication:\nThe client generates a\nCID\nfor the data and requests the RaaS node to store data.\nThe RaaS node takes the client’s data and makes the storage deal onto Filecoin.\nThe client registers a replication job to the RaaS node and defines the number of replicas of their data to store, by calling the\n/register_jobs\nAPI on the RaaS node (e.g. “This data needs to have a minimum of 10 copies on the network”).\nThe RaaS node periodically checks the client data’s\nCID\nfor its deal status on Filecoin.\nThe RaaS node requests deal status with the DealStatus smart contract, via\ngetActiveDeals(CID)\nand checks if the client’s data is stored with the accurate number of replicas.\nThe DealStatus smart contract returns the information of active deals to the RaaS node.\nIf the number of replicas does not match the client’s requirements, the RaaS node is notified.\nThe RaaS node fetches the data via its\nCID\nand resubmit a request to create new storage deals (repeat step 2).\nWhen the client requests for retrieval of data, it queries the RaaS node, which will fetch the data from the storage provider on Filecoin or provide an IPFS pinned copy (depends on how RaaS node is setup to store the data).\nIn the example of renewal:\nThe client generates a\nCID\nfor the data and requests the RaaS node to store data.\nThe RaaS node takes the client’s data and makes the storage deal onto Filecoin.\nThe client registers a renewal job to the RaaS node and defines the renewal threshold for the data’s storage deal, by calling the\n/register_jobs\nAPI on the RaaS node (e.g. renew storage deals that are 1 month away from expiry).\nThe RaaS node periodically checks the client data’s\nCID\nfor its deal status on Filecoin.\nThe RaaS node requests deal status with the DealStatus smart contract, via\ngetExpiringDeals(CID)\nand checks if any of its active deals is expiring.\nThe DealStatus smart contract returns the information of expiring deals to the RaaS node.\nIf deals with the client’s data are expiring, the RaaS node is notified.\nThe RaaS node fetches the data via its\nCID\nand resubmit a request to create new storage deals (repeat step 2).\nWhen the client requests for retrieval of data, it queries the RaaS node, which will fetch the data from the storage provider on Filecoin or provide an IPFS pinned copy (depends on how RaaS node is setup to store the data).\nIn the example of repair\nThe client generates a\nCID\nfor the data and requests the RaaS node to store data.\nThe RaaS node takes the client’s data and makes the storage deal onto Filecoin.\nThe client registers a repair job to the RaaS node and defines the repair threshold for the data’s storage deal, by calling the\n/register_jobs\nAPI on the RaaS node (e.g. “this deal needs repairing if it is not proven active for X epochs”).\nIf the deal ID and corresponding deal sector are not being actively proven for X epochs, the deal will require repairing.\nThe RaaS node fetches the data via its\nCID\nand resubmit a request to create new storage deals (repeat step 2).\nAggregator-hosted RaaS\nPrevious\nData replication, renewal and repair (RaaS)\nNext\nDeveloping contracts\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/architecture",
    "content": "Storage providers\nArchitecture\nThis section covers the architectural components and processes that storage providers should be aware of when creating their infrastructure.\nPrevious\nReturn-on-investment\nNext\nSoftware components\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/architecture/lotus-automation",
    "content": "Storage providers\nArchitecture\nStorage provider automation\n1-click deployment automation for the storage provider stack allows new storage providers to quickly learn and deploy Lotus and Boost.\nPrevious\nSoftware components\nNext\nSealing pipeline\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/architecture/lotus-components",
    "content": "Storage providers\nArchitecture\nSoftware components\nUnderstanding the components of Lotus is necessary in understanding subsequent sections on sealing, and what it means to build well-balanced storage provider architecture.\nPrevious\nArchitecture\nNext\nStorage provider automation\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/architecture/network-indexer",
    "content": "Storage providers\nArchitecture\nNetwork indexer\nInterPlanetary Network Indexer (IPNI) enables users to search for content-addressable data available from storage providers. This page discusses the implications of IPNI for storage providers.\nPrevious\nSealing-as-a-service\nNext\nInfrastructure\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/architecture/sealing-as-a-service",
    "content": "Storage providers\nArchitecture\nSealing-as-a-service\nThis page describes how sealing-as-a-service works, and the benefits to storage providers.\nPrevious\nSealing rate\nNext\nNetwork indexer\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/architecture/sealing-pipeline",
    "content": "Storage providers\nArchitecture\nSealing pipeline\nThe process of sealing sectors is called the sealing pipeline. It is important for storage providers to understand the steps of the process.\nPrevious\nStorage provider automation\nNext\nSealing rate\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/architecture/sealing-rate",
    "content": "Storage providers\nArchitecture\nSealing rate\nThe rate at which storage providers complete the sealing pipeline process is called the sealing rate sealing capacity. This page describes considerations and advice in regards to sealing rate.\nPrevious\nSealing pipeline\nNext\nSealing-as-a-service\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/basics",
    "content": "Storage providers\nBasics\nThis page will help you understand how to plan a profitable business, design a suitable storage provider architecture, and make the right hardware investments.\nPrevious\nWays to contribute\nNext\nQuickstart guide\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/basics/quickstart-guide",
    "content": "Storage providers\nBasics\nQuickstart guide\nThis page is a quick start guide for storage providers in the Filecoin ecosystem.\nPrevious\nBasics\nNext\nFilecoin economics\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals",
    "content": "Storage providers\nFilecoin deals\nThis section covers the different types of deals in the Filecoin network, and how they relate to storage providers.\nPrevious\nCommitted capacity\nNext\nStorage deals\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals/auxiliary-services",
    "content": "Storage providers\nFilecoin deals\nAuxiliary services\nAs a storage provider, you can set your business apart from the rest by offering additional services to your customers. Many new use-cases for the Filecoin network are emerging as new technologies are\nPrevious\nCharging for data\nNext\nReturn-on-investment\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals/charging-for-data",
    "content": "Storage providers\nFilecoin deals\nCharging for data\nThis page covers how storage providers can charge for data on the Filecoin network.\nPrevious\nSnap deals\nNext\nAuxiliary services\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals/filecoin-programs",
    "content": "Storage providers\nFilecoin deals\nFilecoin programs and tools\nThis page covers the various programs and services that storage providers can take part in.\nPrevious\nVerified deals\nNext\nSnap deals\nLast updated\n2 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals/return-on-investment",
    "content": "Storage providers\nFilecoin deals\nReturn-on-investment\nThis page covers the potential return-on-investment (ROI) for storage providers (SPs) and how each SP can calculate their ROI.\nPrevious\nAuxiliary services\nNext\nArchitecture\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals/snap-deals",
    "content": "Storage providers\nFilecoin deals\nSnap deals\nSnap Deals are a way to convert Committed Capacity sectors (that store no real data) into data sectors to be used for storing actual data and potentially Filecoin Plus data.\nPrevious\nFilecoin programs and tools\nNext\nCharging for data\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals/storage-deals",
    "content": "Storage providers\nFilecoin deals\nStorage deals\nThis page discusses what storage deals are, and how storage providers can prepare for them.\nPrevious\nFilecoin deals\nNext\nVerified deals\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-deals/verified-deals",
    "content": "Storage providers\nFilecoin deals\nVerified deals\nThis page discusses what verified deals are, and how they can impact storage providers.\nPrevious\nStorage deals\nNext\nFilecoin programs and tools\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-economics",
    "content": "Storage providers\nFilecoin economics\nThis section discusses the economics of Filecoin in relation to storage providers.\nPrevious\nQuickstart guide\nNext\nStorage proving\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-economics/block-rewards",
    "content": "Storage providers\nFilecoin economics\nBlock rewards\nThis page describes block rewards in Filecoin, where storage providers are elected to produce new blocks and earn FIL as rewards.\nPrevious\nFIL collateral\nNext\nSlashing\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-economics/committed-capacity",
    "content": "Storage providers\nFilecoin economics\nCommitted capacity\nThe content discusses participating in the network by providing Committed Capacity (CC) sectors. CC sectors are storage sectors that are filled with random data, instead of customer data.\nPrevious\nSlashing\nNext\nFilecoin deals\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-economics/fil-collateral",
    "content": "Storage providers\nFilecoin economics\nFIL collateral\nThis page discusses the concept of collateral in Filecoin for storage providers.\nPrevious\nStorage proving\nNext\nBlock rewards\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-economics/slashing",
    "content": "Storage providers\nFilecoin economics\nSlashing\nSlashing penalizes storage providers that either fail to provide reliable uptime or act maliciously against the network. This page discusses what slashing means to storage providers.\nPrevious\nBlock rewards\nNext\nCommitted capacity\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/filecoin-economics/storage-proving",
    "content": "Storage providers\nFilecoin economics\nStorage proving\nPrevious\nFilecoin economics\nNext\nFIL collateral\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/infrastructure",
    "content": "Storage providers\nInfrastructure\nThis section covers various infrastructure considerations that storage providers should be aware of.\nPrevious\nNetwork indexer\nNext\nStorage\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/infrastructure/backup-and-disaster-recovery",
    "content": "Storage providers\nInfrastructure\nBackup and disaster recovery\nThis page covers the basics of backups and disaster recovery for storage providers. A backup strategy is only as good as the last successful restore.\nPrevious\nNetwork\nNext\nReference architectures\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/infrastructure/network",
    "content": "Storage providers\nInfrastructure\nNetwork\nThis page covers topics related to internet bandwidth requirements, LAN bandwidth considerations, the use of VLANs for network traffic separation, network redundancy measures, and common topologies.\nPrevious\nStorage\nNext\nBackup and disaster recovery\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/infrastructure/reference-architectures",
    "content": "Storage providers\nInfrastructure\nReference architectures\nThis page contains some reference architectures that storage providers can use to build out their infrastructure.\nPrevious\nBackup and disaster recovery\nNext\nSkills\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/infrastructure/storage",
    "content": "Storage providers\nInfrastructure\nStorage\nThis page covers RAID configurations, performance implications and availability, I/O behavior for sealed and unsealed sectors, and read/write performance considerations.\nPrevious\nInfrastructure\nNext\nNetwork\nLast updated\n1 month ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/skills",
    "content": "Storage providers\nSkills\nThis section covers the technical skills and knowledge required to become a storage provider.\nPrevious\nReference architectures\nNext\nLinux\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/skills/industry",
    "content": "Storage providers\nSkills\nIndustry\nThis content covers the importance of understanding and meeting specific requirements, certifications, and compliance standards when working with customers in certain industries.\nPrevious\nSales\nNext\nImplementations\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/skills/linux",
    "content": "Storage providers\nSkills\nLinux\nThis page covers importance of understanding the Linux operating system including installation, configuration, environment variables, performance optimization, and performance analysis.\nPrevious\nSkills\nNext\nNetwork\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/skills/network",
    "content": "Storage providers\nSkills\nNetwork\nThis page covers the importance of network skills for a storage provider setup, including network architecture, monitoring, security, infrastructure components, and performance optimizations.\nNetwork skills are crucial for building and maintaining a well-functioning storage provider setup. The network architecture plays a vital role in the overall performance of the storage system. Without a proper network architecture, the system can easily become bogged down and suffer from poor performance.\nTo ensure optimal performance, it is essential to understand where the bottlenecks in the network setup are. This requires a good understanding of network topology, protocols, and hardware. It is also important to be familiar with network monitoring tools that can help identify performance issues and optimize network traffic.\nIn\naddition\n, knowledge of security protocols and best practices is essential for protecting the storage provider setup from unauthorized access, data breaches, and other security threats. Understanding network security principles can help ensure the integrity and confidentiality of data stored on the network.\nOverall\n, network skills are essential for building a high-performing, well-balanced storage provider setup. A solid understanding of network architecture, topology, protocols, and security principles can help optimize performance, prevent bottlenecks, and protect against security threats.\nFor example, a storage provider setup may have multiple servers that are connected to a network. If the network architecture is not designed properly, data transfer between the servers can become slow and cause delays. This can lead to poor performance and frustrated users. By understanding network architecture and designing the network properly, such bottlenecks can be avoided.\nMonitoring\nthe network is also crucial in identifying potential performance issues. Network monitoring tools can provide insights into network traffic patterns, bandwidth usage, and other metrics that can be used to optimize performance. Monitoring the network can help identify bottlenecks and areas where improvements can be made.\nNetwork security\nis another important consideration for storage provider setups. A network that is not properly secured can be vulnerable to unauthorized access, data breaches, and other security threats. Network security principles such as firewalls, encryption, and access control can be used to protect the storage provider setup from these threats.\nIn summary\n, network skills are essential for building and maintaining a high-performing storage provider setup. A solid understanding of network architecture, topology, protocols, and security principles can help optimize performance, prevent bottlenecks, and protect against security threats. Monitoring the network is also crucial in identifying potential issues and ensuring smooth data flow.\nNetwork infrastructure\nNetwork infrastructure, including switches, routers, and firewalls, plays a crucial role in the performance, reliability, and security of any network. Having the right infrastructure in place is essential to ensuring smooth and seamless network connectivity.\nSwitches\nare essential for connecting multiple devices within a network. They direct data traffic between devices on the same network, allowing for efficient communication and data transfer. Switches come in a variety of sizes and configurations, from small desktop switches for home networks to large modular switches for enterprise networks. Choosing the right switch for your network can help ensure optimal performance and reliability.\nRouters\n, on the other hand, are responsible for connecting different networks together. They enable communication between devices on different networks, such as connecting a home network to the internet or connecting multiple offices in a business network. Routers also provide advanced features such as firewall protection and traffic management to help ensure network security and optimize network performance.\nFirewalls\nact as a first line of defense against external threats. They filter traffic coming into and out of a network, blocking malicious traffic and allowing legitimate traffic to pass through. Firewalls come in various forms, from hardware firewalls to software firewalls, and can be configured to block specific types of traffic or restrict access to certain parts of the network.\nWhen it comes to network infrastructure, it’s important to choose switches, routers, and firewalls that are reliable, efficient, and secure. This means taking into account factors such as network size, bandwidth requirements, and security needs when selecting infrastructure components.\nIn addition to choosing the right components, it’s also important to properly configure and maintain them. This includes tasks such as setting up VLANs, implementing security features such as access control lists (ACLs), and regularly updating firmware and software to ensure optimal performance and security.\nIn summary\n, network infrastructure, including switches, routers, and firewalls, is essential for building a reliable and secure network. Whether you are building a small home network or a large-scale enterprise network, investing in the right infrastructure components and properly configuring and maintaining them can help ensure optimal network performance, reliability, and security.\nPerformance\nPerformance is a critical aspect of a storage provider setup, particularly when dealing with high network throughput requirements between multiple systems. To ensure optimal performance, it is important to use network benchmarking tools such as iperf and iperf3. These tools make it easy to test network throughput and identify bottlenecks in the network setup.\nBy using iperf or iperf3, you can determine the maximum network throughput between two systems. This can help you identify potential performance issues, such as network congestion or insufficient bandwidth. By running network benchmarks, you can also determine the impact of changes to the network setup, such as adding or removing hardware components.\nAs a storage provider, you also need to make trade-offs between performance and cost. Higher bandwidth networks typically offer better performance but come with a higher cost. Therefore, you need to perform calculations to determine whether investing in a higher bandwidth network is worth the cost.\nFor example\n, if your storage provider setup requires high network throughput, but your budget is limited, you may need to prioritize certain network components, such as switches and network cards, over others. By analyzing the performance impact of each component and comparing it to the cost, you can make informed decisions about which components to invest in.\nIn summary\n, performance is a critical aspect of a storage provider setup, particularly when dealing with high network throughput requirements. Network benchmarking tools such as iperf and iperf3 can help identify potential performance issues and optimize the network setup. To make informed decisions about the network setup, you also need to make trade-offs between performance and cost by analyzing the impact of each component and comparing it to the cost.\nPrevious\nLinux\nNext\nSecurity\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/skills/sales",
    "content": "Storage providers\nSkills\nSales\nThis content covers the business and commercial aspects of running a storage provider business.\nRunning a storage provider business is not just about having technical expertise and providing storage services. It is also about building and maintaining relationships with clients, negotiating contracts, and managing finances effectively. A storage provider must be able to communicate the value of their services to potential clients, as well as ensure that current clients are satisfied and receive the support they need.\nSales skills\nare important for storage providers to differentiate themselves from the competition, market their services effectively, and attract new customers. This requires an understanding of the market, the needs of potential clients, and how to tailor their services to meet those needs. Storage providers should also be able to identify opportunities for growth and expansion, and have a strategy in place for pursuing those opportunities.\nIn addition to sales skills, financial management skills are also crucial for running a successful storage provider business. This includes budgeting, forecasting, and managing cash flow effectively. It is important for storage providers to understand the costs associated with providing their services, and to price their services appropriately in order to generate revenue and cover their expenses.\nOverall, sales skills are essential for storage providers to succeed in a competitive market. By combining technical expertise with strong business and commercial skills, storage providers can build a successful and sustainable business.\nBusiness aspects\nRunning a storage provider business involves several business aspects that require careful attention to ensure long-term success. The first and most obvious aspect is investment in hardware and FIL as collateral. Hardware is the backbone of any storage provider’s business, and ensuring that you have the right equipment to provide reliable and high-performance storage is critical. Additionally, FIL is the primary currency used within the Filecoin network, and as a storage provider, you need to ensure that you have a sufficient amount of FIL as collateral to cover your storage deals.\nAs your business grows, the amount of hardware and FIL needed will increase, and it is important to have a clear plan for scaling your business. This involves not only investing in additional hardware and FIL but also managing operational costs such as electricity, cooling, and maintenance. Having a skilled business team that can manage and plan for these costs is essential.\nAnother important aspect of running a storage provider business is managing your relationships with investors, venture capitalists, and banks. These organizations can provide much-needed funding to help grow your business, but they will only invest if they are confident in your ability to manage your business effectively. This means having a strong business plan, a skilled team, and a clear strategy for growth.\nIn summary, the business aspects of running a storage provider business are critical to its success. This involves managing investments in hardware and FIL, planning for scalability and managing operational costs, and building strong relationships with investors, venture capitalists, and banks.\nCommercial aspects\nA storage provider needs to get storage deals to grow his network power and to earn money. There are at least 2 ways to get storage deals, each one requiring specific sales skills.\nObtaining data replicas from other storage providers and programs:\nCertain Filecoin data programs will specify the minimum amount of replicas needed to perform a deal. This means deals need to be stored across multiple storage providers in the ecosystem, so you can work with peers in the network to share clients’ data replicas.\nWorking in the ecosystem and building connections with other storage providers takes time and effort, and is essentially a sales activity.\nOnboarding your own customers:\nAcquiring your own customers, and bringing their data onto the Filecoin network, requires business development skills and people on your team who actively work with data owners (customers) to educate them about the advantages of decentralized storage.\nIt takes additional effort to work with customers and their data, but it has the additional advantage of being able to charge your customer for the data being stored. This means an additional revenue stream compared to only storing copies of deals, and earning block rewards.\nPrevious\nStorage\nNext\nIndustry\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/skills/security",
    "content": "Storage providers\nSkills\nSecurity\nThis page covers the importance of security for Filecoin storage providers, including the need to mitigate potential security threats and implement appropriate security controls.\nBeing a Filecoin storage provider involves more than just storing customer data. You are also responsible for managing Filecoin wallets and running systems that require 24/7 uptime to avoid losing collateral. This means that if your network or systems are compromised due to a security intrusion, you risk experiencing downtime or even losing access to your systems and storage. Therefore, maintaining proper security is of utmost importance.\nAs a storage provider, you must have the necessary skills and expertise to identify and mitigate potential security threats. This includes understanding common attack vectors such as phishing, malware, and social engineering. On top of that, you must be proficient at implementing appropriate security controls such as firewalls, intrusion detection and prevention systems, and access controls.\nAdditionally, you must also be able to keep up with the latest security trends and technologies to ensure that your systems remain secure over time. This can involve ongoing training and education, as well as staying informed about new threats and vulnerabilities.\nIn summary, as a Filecoin storage provider, you have a responsibility to ensure the security of your customer’s data, your own systems, and the Filecoin network as a whole. This requires a thorough understanding of security best practices, ongoing training and education, and a commitment to staying informed about the latest security trends and technologies.\nNetwork security\nWhen it comes to network security, it is important to have a solid first line of defense in place. One effective strategy is to implement a redundant firewall setup that can filter incoming traffic as well as traffic between your VLANs.\nA next-generation firewall (NGFW) can provide even more robust security by incorporating an intrusion prevention system (IPS) at the network perimeter. This can help to detect and prevent potential threats before they can do any harm.\nHowever, it is important to note that implementing a NGFW with IPS enabled can also have an impact on your internet bandwidth. This is because the IPS will inspect all incoming and outgoing traffic, which can slow down your network performance. As such, it is important to carefully consider your bandwidth requirements and plan accordingly.\nSystem security\nA second layer of defense is system security. There are multiple concepts that contribute to good system security:\nHost-based firewall (UFW)\nImplement a host-based firewall on your systems (also called UFW on Ubuntu), which is\niptables\nbased.\nSELinux\nLinux comes with an additional security implementation called\nSELinux\n(Security Enhanced Linux). Most system administrators will not implement this by default because it takes additional consideration and administration. Once activated though it offers the highest grade of process and user isolation possible on Linux and contributes greatly to better security.\nNot running as root\nIt is a common mistake to run processes or containers as\nroot\n. This is a serious security risk because any attacker who compromises a service running as root automatically obtains root privileges on that system.\nLotus software does not require root privileges and therefore should run under a normal account (such as a service account, for instance called\nlotus\n) on the system.\nPrivilege escalation\nSince it is not required that Lotus runs as root, it is also not required for the service account to have privilege escalation. This means you should not allow the\nlotus\naccount to use\nsudo\n.\nPrevious\nNetwork\nNext\nStorage\nLast updated\n5 months ago\nWas this helpful?"
  },
  {
    "url": "https://docs.filecoin.io/storage-providers/skills/storage",
    "content": "Storage providers\nSkills\nStorage\nThis content covers various aspects related to storage in the context of being a Filecoin storage provider.\nPrevious\nSecurity\nNext\nSales\nLast updated\n5 months ago\nWas this helpful?"
  }
]