{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 Journal of Surveillance, DOI: 10.20517/jsss.2024.30 Security and Safety Research Article Open Access Cloud-edge-end based key management for decentral- ized applications Jie Zhang1, Futai Zhang2 1School of Advanced Technology, Xi‚Äôan Jiaotong-Liverpool University, Suzhou 215123, Jiangsu, China. 2Fujian Provincial Key Laboratory of Network Security and Cryptology, College of Computer and Cyber Security, Fujian Normal University, No.18 Middle Wulongjiang Avenue, Shangjie, Minhou, Fuzhou 350117, Fujian, China. Correspondence to: Prof. Futai Zhang, Fujian Provincial Key Laboratory of Network Security and Cryptology, College of Computer and Cyber Security, Fujian Normal University, No.18 Middle Wulongjiang Avenue, Shangjie, Minhou, Fuzhou 350117, Fujian, China. E-mail: futai@fjnu.edu.cn How to cite this article: Zhang J, Zhang F. Cloud-edge-end based key management for decentralized applications. J Surveill Secur Saf 2024;5:213-33. http://dx.doi.org/10.20517/jsss.2024.30 Received: 15 Oct 2024 First Decision: 18 Nov 2024 Revised: 28 Nov 2024 Accepted: 4 Dec 2024 Published: 17 Dec 2024 Academic Editor: Qiong Huang Copy Editor: Ting-Ting Hu Production Editor: Ting-Ting Hu Abstract How to securely manage and use private keys of digital signature schemes is a pivotal problem for blockchain-based decentralized applications (DApps), as they determine the ownership of data contents and digital assets. A well- recognized approach for key management is threshold cryptography which distributes private keys to different nodes such that the whole system can tolerate a certain number of failures or corruptions. Motivated by the key manage- ment need of DApps, threshold signature has attracted widespread attention, with a number of new constructions being proposed in recent years. However, a practical one for DApps‚Äô end users is still lacking, as existing schemes are hard to deploy due to the high cost of communication and distributed features. In this paper, we combine (2, 3)-threshold signature with the widely deployed cloud-edge-end (CEE) paradigm. We first propose the CEE key management framework which involves an end node, an edge node and a cloud node main- taining (2, 3) shares of end users‚Äô private keys. Then, following the framework, we construct a (2, 3)-threshold elliptic curve digital signature algorithm (ECDSA) scheme with provable security based on the ECDSA assumption. Com- pared with representative constructions of generalized threshold ECDSA, the new scheme is easy to deploy in appli- cations developed following the CEE framework. Additionally, it addresses share tampering and requires only three messages for distributively issuing a signature, which is lower than the best practice of (2, 2)-threshold ECDSA (four messages) that cannot tolerate tampering. ¬© The Author(s) 2024. Open Access This article is licensed under a Creative Commons Attribution 4.0 International License (https://creativecommons.org/licenses/by/4.0/), which permits unrestricted use, shar- ing, adaptation, distribution and reproduction in any medium or format, for any purpose, even commercially, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. www.oaepublish.com/jsss", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 1, "chunk_id": "f_oaes_cc_jsss5030_down_p1_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 214 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Keywords: Key management, ECDSA, threshold digital signature, blockchain, secret sharing, DApps 1. INTRODUCTION 1.1. Background and problem statement Advances of the blockchain technique promote the development of decentralized applications (DApps), which replace the server of traditional applications with decentralized storage[1,2]. A remarkable feature of DApps is that they return the ownership of data produced by end users to themselves, which is controlled by the server in traditional applications. One of the key technologies behind this is digital signature. A user of a DApp possesses a pair of public and private keys, where the public key is published and the private key is known only by the user. The private key is used to issue a signature for every data produced by the user in the DApp system, such that everyone can verify the signature via the public key. A well-known example of DApps is the bitcoin[3], where owning the private key is equivalent to owning all the bitcoins under an address derived from the corresponding public key. Therefore, how to securely manage and use the private key of digital signature schemes is a pivotal problem for DApps. To address this problem, a variety of software- and hardware-based approaches have been proposed, such as crypto wallets installed in users‚Äô terminals, online crypto exchanges managing private keys on behalf of users, and so on[4]. Among various key management methods, a noteworthy technique is threshold cryp- tography which distributes the private key into multiple distributed nodes in a way that a threshold of them can collaboratively issue a signature or decrypt a ciphertext without recovering the private key. Threshold- based key management systems can tolerate a certain number of failures and corruptions, leaving the system sufficient time to recover from security instances and thereby reducing users‚Äô losses caused by the leakage or tampering of private keys. 1.2. Related work Motivated by the key management need of DApps, threshold digital signature has attracted widespread at- tention from both academic and industrial communities. As the most widely adopted signature scheme in blockchain platforms and applications, threshold construction for elliptic curve digital signature algorithm (ECDSA) signature has become a hot topic in recent years. Below we review some milestones and representa- tive constructions. To secure bitcoin wallets, in 2016, Gennaro et al.[5] proposed a threshold-optimal (EC)DSA signature scheme that requires the participation of the threshold ùë°nodes to issue a signature. Before that, the best construc- tion[6] requires 2ùë°participants in the threshold signing phase. Instead of distributing the private key, Gennaro et al.[5] encrypted the private key through an additively homomorphic encryption scheme, and distributed the decryption key in (ùë°, ùëõ)-threshold manner. However, the threshold signing protocol involves six rounds of interactions among at least ùë°nodes, and each round requires multiple broadcasting and peer-to-peer com- munications. Besides, their scheme does not have a specific share renewal algorithm to update all shares after a leaking or tampering attack. The first series of efficient threshold ECDSA schemes were proposed concurrently by Lindell and Nof[7] and Gennaro and Goldfeder[8] in 2018. The former uses ElGamal decryption ‚Äùin the exponent‚Äù to realize multiplicative-to-additive (MtA) share conversion which is a major building block for threshold ECDSA. The latter instantiates the MtA protocol using the additively homomorphic encryption scheme of Paillier. After the two schemes, new constructions of threshold ECDSA have been continuously proposed every year in top jour- nals and leading conferences in the field of information security and cryptography[9‚Äì12]. Till now, improving the practicability of threshold ECDSA remains a hot topic.", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 2, "chunk_id": "f_oaes_cc_jsss5030_down_p2_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 215 Compared to common (ùë°, ùëõ)-threshold schemes with large ùë°and ùëõ, two-party ECDSA is much more practical for real-world deployment, because it only needs two participants for issuing a signature and is thereby easy to implement. In 2017, Lindell[13] constructed an efficient (2, 2)-threshold ECDSA signature which involves threemessagesinanofflinepre-signingphasebeforethemessagearrivesandonemessageintheonlinesigning phase. Although this scheme is much more practical than common (ùë°, ùëõ) ones, it can only address the leakage problem of private key shares. Once one of the two shares is tampered with or broken, it will be unable to issue a signature anymore. Doerner et al.[14] presented a (2, ùëõ)-threshold ECDSA from ECDSA assumption in 2018. Their 2-out-of-ùëõsigning protocol is run with eight messages exchanged among two nodes. This communication cost is too high for common end users of DApps. Tu et al.[15] proposed a fast two-party signature based on the combinatorial ECDSA. However, the verification operation of their scheme is different from the original ECDSA. In summary, reducing communication rounds and improving practicability are the main challenges in the area of threshold ECDSA. While (2, 2)-threshold ECDSA schemes have higher practicability compared to (ùë°, ùëõ)-threshold ones, the best construction so far still needs eight messages. Besides, (2, 2)-threshold schemes only address leakage problem of private key shares. Once one of the two shares is tampered with or broken, the two-party ECDSA will be unable to issue a signature anymore. The minimum threshold setting for addressing both leaking and tampering issues is (2, 3). 1.3. Our work This paper addresses the key management problem for end users of DApps by combining (2, 3)-threshold sig- nature with the cloud-edge-end (CEE) framework. The CEE framework originates from the Internet of Things (IoT), edge computing and cloud computing. It has eventually developed as a widely adopted framework for online computing products and services. Specifically, we present the CEE key management framework consist- ing of three protocols: the initial splitting protocol which distributes the user‚Äôs private key via (2, 3)-threshold secret sharing into three shares held by the end node, edge node and cloud respectively, the two-party signing protocol which is run by the end and edge nodes to collaboratively generate a signature without recovering the private key, and the update protocol which renews the three shares so that they are incompatible with all previous ones. Based on the CEE key management framework, we construct a concrete (2, 3)-threshold ECDSA scheme with provable security under the ECDSA assumption. To overcome the challenge of distributively computing ùë†= ùëü‚àí1¬∑(ùëí+ùë†ùëò¬∑ùëüùë•) mod ùëû, where ùëüis a secure instancefrom ùëçùëû, ùëí= ùêª(ùëö), and ùëüùë•= ùë•mod ùëûis derived from (ùë•, ùë¶) = ùëü¬∑ ùëÉ, we adopt the following strategies. To generate ùëüùë•in a distributed way, we run a key agreement protocol among the end and edge nodes to generate (ùë•, ùë¶) = ùëü‚àí1 ¬∑ ùëÉ= (ùëü1 ¬∑ ùëü2)‚àí1 ¬∑ ùëÉby sampling ùëü1 in the end node and ùëü2 in the edge node and then exchanging ùëü‚àí11 ¬∑ ùëÉand ùëü‚àí12 ¬∑ ùëÉ. To compute ùë†from partial signatures ùë†1 = ùëü1 ¬∑ (ùëí+ ùë†ùëò1 ¬∑ùëüùë•) and ùë†2 = ùëü2 ¬∑ (ùëí+ ùë†ùëò2 ¬∑ùëüùë•), we first convert ùëü1 ¬∑ùëü2 = ùëüinto ùõº1 +ùõº2 = ùëüvia the MtA protocol, and convert the (2, 3)-threshold shares ùë†ùëò1 and ùë†ùëò2 of ùë†ùëòinto (2, 2)-additive shares ùë†ùëò1ÀÜ and ùë†ùëò2ÀÜ by multiplying them with the Lagrangian coefficients, so that each party can compute ùë†ùëñas ùõºùëñ¬∑ ùëí+ùõºùëñ¬∑ ùë†ùëòùëñ¬∑ùëüùë•for ùëñ= 1, 2. Then, by running the MtA protocol again, we output ùõΩ1 and ùõæ1 on the end node and ùõΩ2 and ùõæ2 on the edge node such that ùõΩ1 + ùõΩ2 = ùõº1 ¬∑ ùë†ùëò2ÀÜ and ùõæ1 +ùõæ2 = ùõº2 ¬∑ ùë†ùëò1.ÀÜ Finally, the end node computes ùë†1 = ùõº1 ¬∑ ùëí+ (ùõº1 ¬∑ ùë†ùëò1ÀÜ + ùõΩ1 +ùõæ1) ¬∑ùëüùë•, and edge node computes ùë†2 = ùõº2 ¬∑ ùëí+ (ùõº2 ¬∑ ùë†ùëò2ÀÜ + ùõΩ2 + ùõæ2) ¬∑ ùëüùë•, which are additive shares of ùë†. Additionally, we present an update protocol for the (2, 3)-threshold ECDSA, which is often missing in related work of threshold ECDSA. This protocol can renew all these three shares even if one of them is tampered with. To recover the tampered share, we construct a share recovery protocol based on secure multi-party computation. The main contributions of this paper are summarized as follows. First, the proposed CEE key management framework provides a practical pattern for securely managing and using private keys in blockchain-based applications. It addresses key management problems of DApp users and demonstrates a practical deployment", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 3, "chunk_id": "f_oaes_cc_jsss5030_down_p3_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 216 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Table 1. Notation Symbol Meaning ùêπùëù A finite field with prime order ùëù E An elliptic curve defined over ùêπùëù ùê∏ The elliptic curve group consists of all points on E plus the point O at infinity ùê∫ A subgroup of ùê∏with a prime order ùëûand a generator ùëÉ ùëû The order of ùê∫ ùëÉ The generator of ùê∫ ùëçùëû The prime field with ùëûelements {0, ¬∑ ¬∑ ¬∑ , ùëû‚àí1} ùêª A hash function {0, 1}‚àó‚Üíùëçùëû ùëü‚Üêùëçùëû Generating a random value ùëüfrom finite field ùëçùëû {ùëö}ùëùùëò The encryption of message ùëöunder key ùëùùëò ùëö ‚Üê‚àí‚àí{ùëö}ùëùùëòùë†ùëò Recovering ùëöby decrypting {ùëö}ùëùùëòwith ùë†ùëò and application pattern of threshold signature. Although we only illustrate its implementation in ECDSA key management; it can be applied more easily for other signature schemes, given that constructing threshold ECDSA is more challenging than other signature schemes such as Schnorr and Boneh-Lynn-Shacham (BLS) signatures. Second, the constructed (2, 3)-threshold ECDSA has a much lower communication cost than parallel schemes with a (2, ùëõ) threshold setting where ùëõ‚â•2, as it only requires three messages exchanged between the end and edge node for issuing a signature, while the best result of (2, 2)-threshold ECDSA[13] is four messages. Moreover, the (2, 3)-threshold setting can tolerate tampering on one of the private key shares, which is not achieved by the (2, 2)-threshold one. 1.4. Organization The remaining sections of this paper are organized as follows. Section 2 reviews the ECDSA signature scheme and cryptographic tools used in our design. Section 3 presents the CEE key management framework and its threat and security models. Sections 4, 5, and 6 construct the CEE-based (2, 3)-threshold ECDSA scheme, prove its security, and evaluate its performance, respectively. Section 7 discusses the application prospect of the CEE-based key management framework and illustrates a case of its use. Finally, Section 8 concludes this paper and proposes future work. 2. PRELIMINARIES This section reviews the ECDSA scheme and cryptographic tools for our design. Symbols used throughout this paper are defined in Table 1. 2.1. ECDSA 2.1.1 ECDSA signature scheme Let ùêπùëùbe a finite field with prime order ùëù, E be an elliptic curve defined over ùêπùëù, ùê∏be the elliptic curve group consisting of all points on E plus the point O at infinity, ùê∫be an elliptic curve group of prime order ùëû, ùëÉbe a generator of ùê∫, ùëçùëû= {0, ¬∑ ¬∑ ¬∑ , ùëû‚àí1}, and ùêª: {0, 1}‚àó‚Üíùëçùëûbe a cryptographic secure hash function. The ECDSA scheme (KeyGen,Sign,Verify) is reviewed as follows: ‚Ä¢ KeyGen(1k): outputs a random private key ùë†ùëò‚ààùëçùëûand a public key ùëùùëò= ùë†ùëò¬∑ ùëÉ. ‚Ä¢ Signùë†ùëò(ùëö) where ùëö‚àà{0, 1}‚àó: 1. Compute ùëí= ùêª(ùëö) 2. Select a random integer ùëü‚ààùëçùëû 3. Compute (ùë•, ùë¶) = ùëü¬∑ ùê∫ 4. Compute ùëüùë•= ùë•mod ùëû 5. Compute ùë†= ùëü‚àí1 ¬∑ (ùëí+ ùë†ùëò¬∑ ùëüùë•) mod ùëû 6. Output ùúé= (ùëüùë•, ùë†) ‚Ä¢ Verifyùëùùëò(ùëö, ùúé) where ùëö‚àà{0, 1}‚àó, ùúé= (ùëüùë•, ùë†):", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 4, "chunk_id": "f_oaes_cc_jsss5030_down_p4_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 217 1. Compute ùëí= ùêª(ùëö) 2. Compute ùë§= ùë†‚àí1 3. Compute ùë£1 = ùëí¬∑ ùë§mod ùëû 4. Compute ùë£2 = ùëüùë•¬∑ ùë§mod ùëû 5. Compute (ùë•, ùë¶) = ùë£1 ¬∑ ùëÉ+ ùë£2 ¬∑ ùëùùëò 6. Compute ùë£ùë•= ùë•mod ùëû 7. Output 1 if ùë£ùë•= ùëüùë•or 0 otherwise 2.1.2 Security of ECDSA The existential unforgeability against chosen-message attacks (EU-CMA) is a widely used security model for digital signature schemes. It models the security by the EU-CMA security experiment in which an attacker A againstadigitalsignatureschemeplayswithachallenger C whointendstosolveadifficultproblem. Specifically, the EU-CMA security experiment is executed as follows. ‚Ä¢ Initialization. C initializes system public parameters and keys. ‚Ä¢ Queries. A queries C signatures on messages chosen at will. ‚Ä¢ Forgery. A returns a forged signature ùúé‚àóon some new message ùëö‚àó. A wins the experiment if ùúé‚àóis a valid signature on the message ùëö‚àóand a signature of ùëö‚àóhas not been queried in the query phase. Definition 1 (EU-CMA Security) A digital signature scheme is existentially unforgeable under chosen-message attacks if the advantage for any Probabilistic Polynomial Time (PPT) adversary A winning the EU-CMA security experiment is negligible. TheEU-CMAsecurityofECDSAhasbeenprovedbyBrown[16]. Wewilluseitasanassumptioninthesecurity proof of our (2, 3)-threshold ECDSA. 2.2. Cryptographic toolbox Below we review cryptographic tools used in our scheme. 2.2.1. Additively homomorphic encryption Additively homomorphic encryption provides an operation that produces the encryption of the sum of two numbers, given only the encryptions of the numbers. Let M be the message space, E be the ciphertext space, Z be the set of integers, and k be a security parameter. An additively homomorphic encryption scheme consists of three algorithms (KeyGen,Enc,Dec). For any pair of (ùëùùëò, ùë†ùëò) ‚ÜêKeyGen(1k), messages ùëö1, ùëö2, ùëö‚ààM, and integer ùëß‚ààZ, there exists two group operations ‚äï: E √ó E ‚ÜíE and ‚äô: Z √ó E ‚ÜíE such that: ‚Ä¢ ùëö1 + ùëö2 = Decùë†ùëò(Encùëùùëò(ùëö1) ‚äïEncùëùùëò(ùëö2)) ‚Ä¢ ùëß¬∑ ùëö= Decùë†ùëò(ùëß‚äôEncùëùùëò(ùëö)) The additively homomorphic encryption is used in the MtA technology (reviewed in Section 2.2.4). Existing schemes such as Paillier[17] encryption, ElGamal encryption ‚Äùin-the-exponent‚Äù[7], and linear homomorphic encryption schemes over a class group[18] are all compatible with the MtA protocol and the specific scheme of this paper. Our specific scheme will use the elliptic curve ElGamal encryption ‚Äùin-the-exponent‚Äù[17] as an instantiation of the additive homomorphic encryption. Below we briefly review the scheme: ‚Ä¢ KeyGen(1k): generates a random private key ùë†ùëò‚ààùëçùëûand computes the public key ùëùùëò= ùë†ùëò¬∑ ùëÉ. ‚Ä¢ Encùëùùëò(ùëö) where ùëö‚ààùëçùëû: 1. Generate random ùëü‚ààùëçùëû 2. Compute ùëê1 = ùëü¬∑ ùëÉand ùëê2 = ùëü¬∑ ùëùùëò+ ùëö¬∑ ùëÉ 3. Output ùëê= (ùëê1, ùëê2).", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 5, "chunk_id": "f_oaes_cc_jsss5030_down_p5_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 218 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 ‚Ä¢ Decùë†ùëò(ùëê) where ùëê= (ùëê1, ùëê2): 1. Compute ùëÄ= ùëê2 ‚àíùë†ùëò¬∑ ùëê1. 2. Recover ùëöfrom ùëÄ. Note that as with other homomorphic encryption schemes, the ElGamal encryption ‚Äùin-the-exponent‚Äù also has its limitations. The decryption can only be achieved if ùëöis relatively small, given that solving the discrete logarithm is hard. However, since our work focuses on key management of digital signatures, we simply use ElGamal encryption ‚Äùin-the-exponent‚Äù as an instantiation of additively homomorphic encryption. 2.2.2. Threshold secret sharing A (ùë°, ùëõ)-threshold secret sharing scheme (Dis,Rec) distributes a secret ùëé0 into ùëõshares in a way that ùëé0 can be reconstructed from any ùë°shares, and no information about ùëé0 can be leaked from up to ùë°‚àí1 shares. We review Shamir‚Äôs secret sharing scheme over prime field (ùëçùëû, +, ¬∑) [19] as follows: ‚Ä¢ Dis(ùëé0, ùë°, ùëõ): take a secret ùëé0 ‚ààùëçùëûand a threshold setting (ùë°, ùëõ) as inputs, the dealer D: 1. Generate ùëé1, ¬∑ ¬∑ ¬∑ , ùëéùë°‚àí1 ‚ààùëçùëûand construct a distribution polynomial ùëì(ùë•) = ùëé0 + ùëé1ùë•+ ¬∑ ¬∑ ¬∑ + ùëéùë°‚àí1ùë•ùë°‚àí1 mod ùëû (1) 2. For ùëñ= 1, ¬∑ ¬∑ ¬∑ , ùëõ, compute ùë¶ùëñ= ùëì(ùëñ) mod ùëû (2) and distribute ùë¶ùëñto participant Pùëñsecurely. Rigorously, ùë¶ùëñ= ùëì(ùë•ùëñ) for some ùë•ùëñ. Here, we use ùë•ùëñ= ùëñfor conciseness as many leading papers do. ‚Ä¢ Rec(ùëÑ) where ùëÑrepresents a set of at least ùë°shares: without losing generality, let ùëÑ= {ùë¶1, ¬∑ ¬∑ ¬∑ , ùë¶ùë°}, and this algorithm reconstructs ùëé0 as ùë°‚àë ùëé0 = ùúÜùëñùë¶ùëñ mod ùëû (3) ùëñ=1 where ùë°‚àè ùëó ùúÜùëñ= (4) ùëó‚àíùëñ ùëó=1,ùëó‚â†ùëñ 2.2.3. Share renewal The share renewal protocol after the distribution of a secret updates its shares so that all previous shares are incompatible with the new ones. A representative approach is to update each share by adding a share of 0 to it. Here, we briefly review the basic share renewal protocol of Herzberg et al[20]. Suppose after the Dis(ùëé0, ùë°, ùëõ), each participant Pùëñ(ùëñ= 1, ¬∑ ¬∑ ¬∑ , ùëõ) possesses a share ùë¶ùëñ. They cooperatively update their shares without the participation of a dealer as follows: 1. For ùëñ= 1, ¬∑ ¬∑ ¬∑ , ùëõ, each Pùëñ (1) Generate ùëèùëñ1, ¬∑ ¬∑ ¬∑ , ùëèùëñ,ùë°‚àí1 ‚ààùëçùëûand construct a distribution polynomial for 0: ùëîùëñ(ùë•) = ùëèùëñ1ùë•+ ¬∑ ¬∑ ¬∑ + ùëèùëñ,ùë°‚àí1ùë•ùë°‚àí1 mod ùëû (5) (2) For ùëó= 1, ¬∑ ¬∑ ¬∑ , ùëõ, compute ùë¢ùëñùëó= ùëîùëñ( ùëó) mod ùëû (6) and secretly send ùë¢ùëñùëóto Pùëó( ùëó‚â†ùëñ). 2. For ùëñ= 1, ¬∑ ¬∑ ¬∑ , ùëõ, every Pùëñupdates its share ùë¶ùëñinto ‚àëùëõ ùë¶ùëñ+ ùë¢ùëóùëñ mod ùëû (7) ùëó=1", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 6, "chunk_id": "f_oaes_cc_jsss5030_down_p6_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 219 Figure 1. The CEE key management system and its interaction with Blockchain applications. The terminal for splitting ùë†ùëòand for holding ùë†ùëò1 can be the same one. CEE: cloud-edge-end. 2.2.4. Multiplicative to additive share conversion The MtA protocol[10,21] converts multiplicative shares into additive ones. It is used as a building block in com- mon constructions of threshold ECDSA. Suppose party Pùëñpossesses ùëéand Pùëópossesses ùëè, the MtA protocol outputs ùõºfor Pùëñand ùõΩfor Pùëósuch that ùõº+ ùõΩ= ùëé¬∑ ùëè, without leaking ùëéto Pùëóand ùëèto Pùëñ. Below we briefly review the MtA protocol realized via additively homomorphic encryption: 1. Pùëñencrypts ùëéunder its public key ùëùùëòùëñ: ùê∂ùëé= Encùëùùëòùëñ(ùëé) (8) and sends ùê∂ùëéto Pùëó. 2. Pùëógenerates a random integer ùõΩ, encrypts ‚àíùõΩunder ùëùùëòùëñ: ùê∂‚Ä≤ùõΩ= Encùëùùëòùëñ(‚àíùõΩ) (9) computes the encryption of ùõºunder ùëùùëòùëñas ùê∂ùõº= (ùëè‚äôùê∂ùëé) ‚äïùê∂‚Ä≤ùõΩ (10) and sends ùê∂ùõºto Pùëñ. 3. Pùëñdecrypts and outputs ùõºas ùõº= Decùë†ùëòùëñ(ùê∂ùõº) (11) 3. THE CEE KEY MANAGEMENT FRAMEWORK This section presents the framework of the CEE key management system and its threat and security models. 3.1. System overview As shown in Figure 1, the CEE key management system involves three kinds of nodes: the cloud, edge, and end nodes. Their responsibilities in application scenarios are introduced as follows: ‚Ä¢ Cloud node maintains a (2, 3) share of user‚Äôs private key. It is responsible for recovery or update of the private key in case of security incidents threatening one of the other two shares in the edge and end nodes.", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 7, "chunk_id": "f_oaes_cc_jsss5030_down_p7_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 220 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 In real-world applications, the cloud node can be a semi-trusted service provider that provides private key safeguarding services. ‚Ä¢ Edge node also maintains a (2, 3) share of user‚Äôs private key. It participates in the signing protocol collabo- ratively with the end node. In the real world, the edge node can be the edge server or gateway of an institute such as a company, a university, etc. Another example is the smart home scenario where the edge node can be a router that connects end devices in the home to the internet. In these cases, the edge node can be regarded as a trusted user-side device. ‚Ä¢ Endnode takes the original private key as input and distributes it into three shares. It also maintains a (2, 3) share of the private key to issue signatures collaboratively with the edge node. It is the user-side terminal interacting with the user and, thereby, is trusted. Thenumberofeachtypeofnodedependsontheneedsandrestrictionsofreal-worldapplicationenvironments. Each user may have one or more pairs of private and public keys, which again depends on the application scenario. For a pair of private and public keys (ùë†ùëò, ùëùùëò), a cloud node, an edge node, and an end node will be involved to securely manage the private key. Specifically, there are three protocols for the key management framework: ‚Ä¢ Initial Splitting. On input of a private key ùë†ùëòin the end node, this protocol uses (2, 3)-threshold secret sharing to split ùë†ùëòinto three shares ùë†ùëò1, ùë†ùëò2, and ùë†ùëò3 which will be securely stored in the end node, the edge node, and the cloud, respectively. ‚Ä¢ Two-Party Signing. To issue a signature, the end node initiates the two-party signing protocol with the edge node. Specifically, each node will use its private key share to generate a partial signature, and the two partial signatures will be used to construct the signature of ùë†ùëò. ‚Ä¢ Update. The update protocol can be run periodically or after a recovery from security incidents. Theoret- ically, it can be run with any two shares, even if the third one is leaked or tampered with. Here we focus on a situation in which the cloud is not compromised, and one of the user-side devices, i.e., the edge node or end node, is compromised. The cloud is normally more powerful in terms of computing and storing capabilities than the edge and end nodes. Moreover, it is maintained by service providers with professional security managers and technicians. Therefore, it is less likely to be compromised by security incidents in practice. 3.2. Threat model and security model 3.2.1. Threat model We assume the cloud in the remote is semi-trusted, meaning it honestly follows the protocol specification but seeks to learn as much information as possible. We also assume that user-side devices, i.e., the edge and end nodes in the local area, are trusted. The cloud, edge, and end nodes may be compromised by security incidents, but they are not compromised simultaneously. Specifically, we assume at most one of them is compromised before an instance of the update protocol renews all shares. The threshold setting leaves the system sufficient time to identify and stop security incidents happening in one device before a second one is compromised. Additionally, we assume the initial splitting protocol is run in a secure environment, where security channels exist among the three nodes, and none of them is compromised. This assumption is reasonable and easy to realize as this protocol is only executed once. During the other time, security incidents may occur and compromise one of the three nodes at a time. 3.2.2. Security model Based on the threat model above and the EU-CMA security model of digital signature, we present the security model of (2, 3)-threshold signature under the CEE framework, denoted as (2, 3)-TEU-CMA. We first describe the (2, 3)-TEU-CMA security experiment and then give the security definition.", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 8, "chunk_id": "f_oaes_cc_jsss5030_down_p8_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 221 Figure 2. The initial splitting protocol. The secure channels can be established via public-key encryption or key agreement protocol. Let A be an attacker against a (2, 3)-threshold signature scheme and C be the challenger who intends to solve a difficult problem. The (2, 3)-TEU-CMA security experiment is executed by A and C as follows: ‚Ä¢ Initialization. C initializes system public parameters, and generates a pair of public and private keys (ùëùùëò, ùë†ùëò) and three (2, 3)-threshold shares ùë†ùëò1, ùë†ùëò2, and ùë†ùëò3 of ùë†ùëò. The private key and its shares are kept by C. The public key and public parameters are provided to A. ‚Ä¢ Queries. ‚Äì Signature queries. A submits a message ùëöchosen at will to C and queries the signature ùúé. ‚Äì Corruption queries. A submits an index number ùëñto C and queries ùë†ùëòùëñand other secret parameters related to ùë†ùëòùëñ. ‚Ä¢ Forgery. A returns a forged signature ùúé‚àóon some new message ùëö‚àóthat has never been submitted in the query phase. The signature query is inherited from the EU-CMA security experiment. A can make the signature queries for many times. The corruption query is introduced to formulate the adversary‚Äôs ability to corrupt a participant in the (2, 3)-threshold setting. A can make this type of query many times, but at most one such query for each batch of shares output by the initial splitting protocol or update protocol. Definition 2 ((2,3)-TEU-CMA Security) A (2, 3)-threshold digital signature scheme is existentially unforgeable under chosen-message attacks if the advantage for any PPT adversary A winning the (2, 3)-TEU-CMA security experiment is negligible. 4. CEE-BASED (2, 3)-THRESHOLD ECDSA Assume the user already has a pair of private and public keys (ùë†ùëò, ùëùùëò) which are generated via the KeyGen algorithm of ECDSA. Therefore, ùë†ùëò‚ààùëçùëûand ùëùùëò= ùë†ùëò¬∑ ùëÉ. The public key is published to the distributed applications (DApps) in the blockchain ecosystem. Below we will show how to realize secure management for the private key via the CEE key management framework. Specifically, we will present a concrete (2, 3)- thresholdECDSAschemethatinvolvesonlytheendnodeandtheedgenodeforthetwo-partysigningprotocol.", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 9, "chunk_id": "f_oaes_cc_jsss5030_down_p9_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 222 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 4.1. Initial splitting The initial splitting protocol is illustrated in Figure 2. Assume secure channels have been established among the end node, the edge node and the cloud. The user inputs ùë†ùëòin the end device and starts the initial splitting protocol which outputs three shares of ùë†ùëòand a pair of public and private keys for an additively homomorphic encryption scheme as follows: 1. Split ùë†ùëòinto ùë†ùëò1, ùë†ùëò2, and ùë†ùëò3 via the Dis(ùë†ùëò, 2, 3) algorithm of Shamir‚Äôs threshold secret sharing. 2. Generateapairofprivateandpublickeys (‚Ñéùë†ùëò, ‚Ñéùëùùëò) viatheKeyGen(1k) ofanadditivelyhomomorphic encryption scheme and publish ‚Ñéùëùùëò 3. Securely send ùë†ùëò2 to the edge node and ùë†ùëò3 to the cloud. 3. Keep ùë†ùëò1, ‚Ñéùë†ùëòin the end node and erase ùë†ùëò, ùë†ùëò2, ùë†ùëò3. In addition to the three private key shares, the above protocol also outputs and publishes a pair of keys (‚Ñéùë†ùëò, ‚Ñéùëùùëò) which will be used for implementing additively homomorphic encryption in the MtA procedure of the two-party signing protocol. Although it is possible to reuse ùë†ùëò1 and ùëùùëò1 = ùë†ùëò1 ¬∑ ùëÉfor the homomorphic encryption, here we have two reasons for generating dedicated key pairs. First, the additively homomorphic encryption scheme can be one established on a different mathematical problem rather than the discrete log- arithm problem over elliptic curve groups of ECDSA, which means that (ùë†ùëò1, ùëùùëò1) is not a pair of keys for the homomorphic encryption scheme. Secondly, publishing ùëùùëò1 in the system will reduce the security of the (2, 3)-threshold ECDSA scheme. We will explain this point in detail in Section 5.2 after proving the unforge- ability of the scheme. 4.2. Two-party signing The two-party signing protocol is run jointly by the end and edge nodes to output a signature ùúé= (ùëüùë•, ùë†) for a message ùëö, where ùëüùë•is derived from the ùë•coordinate of ùëÖ= ùëü¬∑ ùëÉfor some randomly generated ùëü‚ààùëçùëû, and ùë†= ùëü‚àí1 ¬∑ (ùëí+ ùë†ùëò¬∑ ùëüùë•). In our scheme, ùëÖis established as ùëü‚àí11 ¬∑ ùëü‚àí12 ¬∑ ùëÉ, where ùëü1 and ùëü2 are securely generated by the end and edge nodes. Therefore, the end and edge nodes can compute partial signatures as ùë†ùëñ= ùëüùëñ¬∑ ùëí+ ùëüùëñ¬∑ ùë†ùëòùëñ¬∑ ùëüùë•, ùëñ= 1, 2 (12) where ùëü1 and ùëü2 are (2, 2)-multiplicative shares of ùëü‚àí1, and ùë†ùëò1 and ùë†ùëò2 are (2, 3)-Shamir shares of ùë†ùëò. However, we still cannot compute ùë†from ùë†1 and ùë†2 as they are neither (2, 2)-multiplicative shares nor (2, 3)-Shamir shares of ùë†. To construct ùë†from ùë†1 and ùë†2, we need to convert ùë†1 and ùë†2 into additive shares of ùë†. Specifically, we address the following three objectives in an offline pre-signing procedure before the input of ùëö: ‚Ä¢ Converting the multiplicative shares ùëü1 and ùëü2 of ùëü‚àí1 into additive shares ùõº1 and ùõº2, that is, outputting ùõº1 on the end node and ùõº2 on the edge node such that ùõº1 + ùõº2 = ùëü1 ¬∑ ùëü2 = ùëü‚àí1. This is addressed via the MtA protocol. ‚Ä¢ Converting the (2, 3)-threshold shares ùë†ùëò1 and ùë†ùëò2 of ùë†ùëòinto additive shares ùë†ùëò1ÀÜ and ùë†ùëò2,ÀÜ that is, outputting ùë†ùëò1ÀÜ on the end node and ùë†ùëò2ÀÜ on the edge node such that ùë†ùëò1ÀÜ + ùë†ùëò2ÀÜ = ùë†ùëò. This is addressed by multiplying ùë†ùëòùëñwith the Lagrange coefficient ùúÜùëñ. ‚Ä¢ Converting ùõº1 ¬∑ ùë†ùëò2ÀÜ into ùõΩ1 + ùõΩ2 and ùõº2 ¬∑ ùë†ùëò1ÀÜ into ùõæ1 + ùõæ2, where ùõΩ1 and ùõæ1 are output on the end node, and ùõΩ2 and ùõæ2 on the edge node. This is again realized via the MtA protocol. By addressing the three objectives above, the end node will be able to compute ùë†1 = ùõº1¬∑ùëí+(ùõº1¬∑ ùë†ùëò1+ùõΩ1+ùõæ1)¬∑ùëüùë•ÀÜ mod ùëû, and the edge node can compute ùë†2 = ùõº2 ¬∑ ùëí+ (ùõº2 ¬∑ ùë†ùëò2ÀÜ + ùõΩ2 +ùõæ2) ¬∑ùëüùë•mod ùëû. Now, ùë†1 and ùë†2 are additive", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 10, "chunk_id": "f_oaes_cc_jsss5030_down_p10_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 223 Figure 3. The two-party signing protocol. shares of ùë†, since ùë†1 + ùë†2 = ùõº1 ¬∑ ùëí+ (ùõº1 ¬∑ ùë†ùëò1ÀÜ + ùõΩ1 + ùõæ1) ¬∑ ùëüùë•+ ùõº2 ¬∑ ùëí+ (ùõº2 ¬∑ ùë†ùëò2ÀÜ + ùõΩ2 + ùõæ2) ¬∑ ùëüùë• = (ùõº1 + ùõº2) ¬∑ ùëí+ (ùõº1 ¬∑ ùë†ùëò1ÀÜ + ùõΩ1 + ùõæ1 + ùõº2 ¬∑ ùë†ùëò2ÀÜ + ùõΩ2 + ùõæ2) ¬∑ ùëüùë• = ùëü‚àí1 ¬∑ ùëí+ (ùõº1 ¬∑ ùë†ùëò1ÀÜ + ùõº2 ¬∑ ùë†ùëò2ÀÜ + ùõº1 ¬∑ ùë†ùëò2ÀÜ + ùõº2 ¬∑ ùë†ùëò1)ÀÜ ¬∑ ùëüùë• (13) = ùëü‚àí1 ¬∑ ùëí+ (ùõº1 + ùõº2) ¬∑ ( ùë†ùëò1ÀÜ + ùë†ùëò2)ÀÜ ¬∑ ùëüùë• = ùëü‚àí1 ¬∑ ùëí+ ùëü‚àí1 ¬∑ ùë†ùëò¬∑ ùëüùë• = ùë† The above method requires running a key agreement instance to output ùëÖand three MtA instances to output (ùõº1, ùõº2), (ùõΩ1, ùõΩ2) and (ùõæ1, ùõæ2) among the end and edge nodes. This involves eight messages. To reduce the round of interactions, we integrate them together in the pre-signing protocol and reduce the total number of messages to three. The two-party singing protocol is illustrated in Figure 3. It consists of an offline pre-signing protocol and an online singing protocol. Below we introduce the two protocols in detail. 4.2.1. Pre-signing protocol 1. The end node: (1) Generate a random value ùëü1 ‚Üêùëçùëûand compute ùëÖ1 = ùëü1 ¬∑ ùëÉ (14)", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 11, "chunk_id": "f_oaes_cc_jsss5030_down_p11_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 224 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 (2) Convert ùë†ùëò1 into ùë†ùëò1ÀÜ = ùúÜ1 ¬∑ ùë†ùëò1 mod ùëû 2 3 = ¬∑ ¬∑ ùë†ùëò1 mod ùëû (15) 2 ‚àí1 3 ‚àí1 = 3 ¬∑ ùë†ùëò1 mod ùëû (3) Encrypt ùëü1 and ùë†ùëò1ÀÜ under ‚Ñéùëùùëò ùê∂ùëü1 = Enc‚Ñéùëùùëò(ùëü1) (16) ùê∂ÀÜùë†ùëò1 = Enc‚Ñéùëùùëò( ùë†ùëò1)ÀÜ (17) (4) Send (ùëÖ1, ùê∂ùëü1, ùê∂ÀÜùë†ùëò1) to the edge node via public channel. 2. The edge node: (1) Generate random numbers ùëü2, ùõº2, ùõΩ2, ùõæ2 ‚Üêùëçùëûand compute ùëÖ2 = ùëü2 ¬∑ ùëÉ (18) (2) Convert ùë†ùëò2 into ùë†ùëò2ÀÜ = ùúÜ2 ¬∑ ùë†ùëò2 mod ùëû 1 3 = ¬∑ ¬∑ ùë†ùëò2 mod ùëû (19) 1 ‚àí2 3 ‚àí2 = ‚àí3 ¬∑ ùë†ùëò2 mod ùëû (3) Compute the shared instance as follows: ùëÖ= ùëü2 ¬∑ ùëÖ1 = (ùë•, ùë¶) (20) ùëüùë•= ùë• mod ùëû (21) (4) Compute the ciphertext of ùõº1 = ùëü1 ¬∑ ùëü2 ‚àíùõº2 under ‚Ñéùëùùëòas ùê∂ùõº‚Ä≤ = Enc‚Ñéùëùùëò(‚àíùõº2) (22) 2 ùê∂ùõº1 = (ùëü2 ‚äôùê∂ùëü1) ‚äïùê∂ùõº‚Ä≤2 (23) (5) Compute the ciphertext of ùõΩ1 = ùõº1 ¬∑ ùë†ùëò2ÀÜ ‚àíùõΩ2 under ‚Ñéùëùùëòas ùê∂ùõΩ‚Ä≤ = Enc‚Ñéùëùùëò(‚àíùõΩ2) (24) 2 ùê∂ùõΩ1 = ( ùë†ùëò2ÀÜ ‚äôùê∂ùõº1) ‚äïùê∂ùõΩ‚Ä≤2 (25) (6) Compute the ciphertext of ùõæ1 = ùõº2 ¬∑ ùë†ùëò1ÀÜ ‚àíùõæ2 under ‚Ñéùëùùëòas ùê∂ùõæ‚Ä≤ = Enc‚Ñéùëùùëò(‚àíùõæ2) (26) 2 ùê∂ùõæ1 = (ùõº2 ‚äôùê∂ÀÜùë†ùëò1) ‚äïùê∂ùõæ‚Ä≤2 (27) (7) Send (ùëÖ2, ùê∂ùõº1, ùê∂ùõΩ1, ùê∂ùõæ1) to the end node via public channel. 3. The end node:", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 12, "chunk_id": "f_oaes_cc_jsss5030_down_p12_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 225 (1) Compute the shared instance as follows: ùëÖ= ùëü1 ¬∑ ùëÖ2 = (ùë•, ùë¶) (28) ùëüùë•= ùë• mod ùëû (29) (2) Decrypt the ciphertexts ùê∂ùõº1, ùê∂ùõΩ1, ùê∂ùõæ1 using ‚Ñéùë†ùëò: ùõº1 = Dec‚Ñéùë†ùëò(ùê∂ùõº1) (30) ùõΩ1 = Dec‚Ñéùë†ùëò(ùê∂ùõΩ1) (31) ùõæ1 = Dec‚Ñéùë†ùëò(ùê∂ùõæ1) (32) 4.2.2. Online signing protocol 1. On input a message ùëö‚àà{0, 1}‚àó, the end node computes ùëí= ùêª(ùëö) (33) ùë†1 = ùõº1 ¬∑ ùëí+ (ùõº1 ¬∑ ùë†ùëò1ÀÜ + ùõΩ1 + ùõæ1) ¬∑ ùëüùë• (34) and sends ùë†1, ùëöto the edge node via the public channel. 2. The edge node computes ùëí= ùêª(ùëö) (35) ùë†2 = ùõº2 ¬∑ ùëí+ (ùõº2 ¬∑ ùë†ùëò2ÀÜ + ùõΩ2 + ùõæ2) ¬∑ ùëüùë• (36) ùë†= ùë†1 + ùë†2 (37) and outputs the signature as ùúé= (ùëüùë•, ùë†). In the above online signing protocol, the signature is output by the edge node. The reason is that in the real-world environment, especially the IoT scenario, usually the edge node is networking equipment such as a gateway that connects the local end nodes to remote servers by forwarding traffic between them. Even if the signature is output by the end node, the end node has to send it through the edge node to the intended application server. 4.3. Update Theupdateprotocolisinitiatedbytheuserviatheenddevice,eitherperiodicallyorafterrecoveryfromsecurity incidents. We consider the following two cases. If a share is leaked but not tampered with, then the three parties can run the share renewal protocol in Section 2.2.3 to update all three shares. If a share ùë†ùëòùëò(ùëò‚àà{1, 2} according to our system model) is tampered with, then before the share renewal protocol, the update protocol needs to recover it via the other two shares ùë†ùëòùëñand ùë†ùëòùëóas follows: ùëò‚àíùëó ùëò‚àíùëñ ùë†ùëòùëò= ùëì(ùëò) = ùëñ‚àíùëó¬∑ ùë†ùëòùëñ+ ùëó‚àíùëñ¬∑ ùë†ùëòùëó (38) where ùëñ, ùëó, ùëò‚àà{1, 2, 3} and ùëñ‚â†ùëó‚â†ùëòfor a (2, 3) setting. Theoretically, the update protocol can securely update all three shares as long as at least two of them are not tampered with and at most one of them is leaked. In our scenario, we assume the share ùë†ùëò3 in the cloud is secure. In the recover procedure, to guarantee that only the party Pùëòcan compute ùë†ùëòùëòwithout knowing ùë†ùëòùëñ and ùë†ùëòùëó, we use secure multi-party computation as follows:", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 13, "chunk_id": "f_oaes_cc_jsss5030_down_p13_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 226 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Figure 4. The update protocol, assuming ùë†ùëò1 in the end node is tampered with. ‚Ä¢ [Optional] Share recovery: 1. Pùëñgenerates a random ùëõùëñ, computes ùëò‚àíùëó ùê¥ùëñ= ùëñ‚àíùëó¬∑ ùë†ùëòùëñ‚àíùëõùëñ mod ùëû (39) and sends ùëõùëñto Pùëóvia public channel. 2. Pùëógenerates a random ùëõùëó, computes ùëò‚àíùëñ ùê¥ùëó= ùëó‚àíùëñ¬∑ ùë†ùëòùëó‚àíùëõùëó mod ùëû (40) and sends ùê¥ùëóto Pùëóvia public channel. 3. Pùëñcomputes ùê¥= ùê¥ùëñ+ ùê¥ùëó mod ùëû (41) and send ùê¥to Pùëòvia the secure channel. 4. Pùëócomputes ùêµ= ùëõùëñ+ ùëõùëó mod ùëû (42) and sends ùêµto Pùëòvia secure channel. 4. Pùëòcomputes ùë†ùëòùëò= ùê¥+ ùêµ mod ùëû (43) ‚Ä¢ Sharerenewal: ThethreeparticipantsrunthesharerenewalprotocolinSection2.2.3torefreshtheirprivate key shares. The update protocol is illustrated in Figure 4, which assumes that ùë†ùëò1 in the end node is tampered with.", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 14, "chunk_id": "f_oaes_cc_jsss5030_down_p14_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 227 5. SECURITY 5.1. Unforgeability We first claim the unforgeability of our (2, 3)-threshold ECDSA in the following theorem and then prove it. Theorem 1 The (2, 3)-thresholdECDSAinSection4is (ùúè, ùëûùë†, ùëûùëê, ùúñ)-secureinthe (2, 3)-TEU-CMAmodel, given that the standard ECDSA signature scheme is EU-CMA secure. Specifically, the advantage of any PPT adversary A winning the (2, 3)-TEU-CMA experiment is ùê¥ùëëùë£(2,3)‚àíùëáùê∏ùëà‚àíùê∂ùëÄùê¥(2,3)‚àíùë°‚Ñéùëüùëíùë†‚Ñéùëúùëôùëëùê∏ùê∂ùê∑ùëÜùê¥(A) ‚â§ùê¥ùëëùë£ùê∏ùëà‚àíùê∂ùëÄùê¥ùê∏ùê∂ùê∑ùëÜùê¥ (B) where ùê¥ùëëùë£ùê∏ùëà‚àíùê∂ùëÄùê¥ùê∏ùê∂ùê∑ùëÜùê¥ (B) is the advantage of B winning the EU-CMA game. Let A be an adversary against the (2, 3)-threshold ECDSA, and B be the challenger running the (2, 3)-TEU- CMA experiments with A. Meanwhile, B, as an adversary, runs the EU-CMA experiment with an ECDSA challenger C. Therefore, B works as a connector between the (2, 3)-TEU-CMA experiment and the EU-CMA experiment. Below we illustrate how to embed the EU-CMA experiment into the (2, 3)-TEU-CMA experi- ment and reduce the (2, 3)-TEU-CMA security of the (2, 3)-threshold ECDSA to the EU-CMA security of ECDSA. In the (2, 3)-TEU-CMA experiment, B initializes system public parameters and keys and interacts with A. Meanwhile, in the EU-CMA experiment, B interacts with C who initializes the system parameters and keys of ECDSA. Specifically, ‚Ä¢ Initialization. ‚Äì Initialization of ECDSA. C initializes the system public parameters pp = {ùê∫, ùëÉ, ùëû, ùëçùëû} and a pair of public and private keys (ùëùùëò, ùë†ùëò) of ECDSA. The system public parameters pp and public key ùëùùëòare given to B. ‚Äì Initialization of (2, 3)-threshold ECDSA. B initializes the three shares of ùë†ùëòand keys of additively homomorphic encryption scheme as follows: 1. Generate random ùë†ùëò1, ùë†ùëò2, ùë†ùëò3 ‚ààùëçùëû. 2. Generate (‚Ñéùë†ùëò, ‚Ñéùëùùëò) as specified in the initial splitting protocol. 3. Provide system public parameters and public keys (ùëùùëò, ‚Ñéùëùùëò) to A. ‚Ä¢ Queries. ‚Äì Signature queries. A submits a message ùëöchosen at will to B and queries the signature. B queries C the signature on ùëö. C runs the Signing algorithm of ECDSA and returns the signature ùúéto B. Finally, B forwards ùúéto A. ‚Äì Corruption queries. A submits an index ùëñ‚àà{1, 2, 3} to B to make a corruption query. B replies with (ùë†ùëò1, ‚Ñéùë†ùëò) if ùëñ= 1 and ùë†ùëòùëñotherwise. B also replies ùë†ùëñto A if ùëñ‚â†3. ‚Ä¢ Forgery. A returns a forged signature ùúé‚àóon some new message ùëö‚àóthat has never been queried in the query phase. B returns ùëö‚àóand ùúé‚àóto C. After ùëûùë†signature queries and ùëûùëêcorruption queries, if A wins the (2, 3)-TEU-CMA experiment, then ùúé‚àóis a valid signature on ùëö‚àóand B wins the TEU-CMA security experiment. Therefore, the advantage of A winning the (2, 3)-TEU-CMA experiment no more than the advantage of B winning the EU-CMA experiment, that is, ùê¥ùëëùë£(2,3)‚àíùëáùê∏ùëà‚àíùê∂ùëÄùê¥(2,3)‚àíùë°‚Ñéùëüùëíùë†‚Ñéùëúùëôùëëùê∏ùê∂ùê∑ùëÜùê¥(A) ‚â§ùê¥ùëëùë£ùê∏ùëà‚àíùê∂ùëÄùê¥ùê∏ùê∂ùê∑ùëÜùê¥ (B). Since ECDSA is EU-CMA secure, ùê¥ùëëùë£ùê∏ùëà‚àíùê∂ùëÄùê¥ùê∏ùê∂ùê∑ùëÜùê¥ (B) is negligible. Therefore, ùê¥ùëëùë£(2,3)‚àíùëáùê∏ùëà‚àíùê∂ùëÄùê¥(2,3)‚àíùë°‚Ñéùëüùëíùë†‚Ñéùëúùëôùëëùê∏ùê∂ùê∑ùëÜùê¥(A) is neg- ligible. According to Definition 2, the (2, 3)-threshold ECDSA scheme is secure under the (2, 3)-TEU-CMA model.", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 15, "chunk_id": "f_oaes_cc_jsss5030_down_p15_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 228 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Table 2. Evaluation of communication cost Protocol Messages over spc Messages over ppc Messages over bc Phase I: Initial splitting 2 0 1 Phase II-1: Offline pre-signing 0 2 0 Phase II-2: Online signing 0 1 0 Phase III-1: [Optional] Share recovery 2 2 0 Phase III-2: Share renewal 0 6 0 5.2. Discussion The initial splitting protocol in Section 4.1 generates dedicated private and public keys for the additively homo- morphic encryption, rather than reusing (ùë†ùëò1, ùëùùëò1). Now we explain why reusing (ùë†ùëò1, ùëùùëò1) can negatively influence the security of the scheme. If (ùë†ùëò1, ùëùùëò1) is used for the additively homomorphic encryption scheme, then the adversary A will be given ùëùùëò1 in addition to ùëùùëòin the (2, 3)-TEU-CMA security experiment. With ùëùùëò1 and ùëùùëò, A can derive the other two public keys ùëùùëò2 = ùë†ùëò2 ¬∑ ùëÉand ùëùùëò3 = ùë†ùëò3 ¬∑ ùëÉas follows: 1 ùëùùëòùëó= ¬∑ (ùëùùëò‚àíùúÜ1 ¬∑ ùëùùëò1), for ùëó= 2, 3 (44) ùúÜùëó as 1 ùë†ùëòùëó= ¬∑ (ùë†ùëò‚àíùúÜ1 ¬∑ ùë†ùëò1) mod ùëû, for ùëó= 2, 3 (45) ùúÜùëó Note that B does not have ùë†ùëòand the discrete logarithms of ùëùùëò2 and ùëùùëò3. By submitting an index 2 or 3 in the corruption query, A can distinguish the experiment from a real execution of the (2, 3)-threshold ECDSA, which will result in failure of the (2, 3)-TEU-CMA security experiment. 6. EVALUATION We first evaluate the communication cost of the (2, 3)-threshold ECDSA as it is the major concern when deploying the scheme for DApps. Then we estimate the computing cost to provide a reference for real-world deployment. 6.1. Communication cost Thecommunicationcostisestimatedbythenumberofmessagestransmittedamongsecureandpublicpeer-to- peer channels and broadcasting channels in each protocol. Let spc denote secure peer-to-peer channel, ppc denote public peer-to-peer channel, and bc denote broadcasting channel. The estimated communication cost is listed in Table 2. The initial splitting protocol involves two messages over secure channels from the end node to the edge and the cloud and one broadcasting channel to publish the homomorphic encryption key. Notably, the two-party signing protocol uses merely two messages in an offline phase and one message in the online phase, and all are over public channels among the end and edge nodes in the local area. This brings very light communication costs for the application scenario. The update protocol involves two messages for an optional share recovery phase and six for the share renewable phase, and all of them are over public peer-to-peer channels. To study the reduction in communication complexity achieved by the proposed (2, 3)-threshold ECDSA", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 16, "chunk_id": "f_oaes_cc_jsss5030_down_p16_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 229 Table 3. Comparison of communication complexity of threshold signing in (2, 3)-threshold setting Scheme Offline Pre-signing Online Signing Gennaro & Goldfeder 18 [8] - 8ùë°bc + 4ùë°(ùë°‚àí1) spc Wong et al. [11] 10 bc + 2 spc 2 bc Gagol et al. [22] 12 bc + 2 spc 6 bc Gennaro and Goldfeder 20 [23] - 12 bc + 4 spc Castagnos et al. [12] - 14 bc + 2 spc Our (2,3)-threshold ECDSA 2 ppc ppc Table 4. Evaluation of computing cost Protocol End node Edge node Cloud node Phase I: Initial splitting 1 exp 0 0 Phase II-1: Pre-signing 11 exp 11 exp 0 Phase II-2: Online signing 0 0 0 Phase III-1: (Optional) Share recovery 0 0 0 Phase III-2: Share renewal 0 0 0 Table 5. Experimental environment Device/Parameter Specification End node Smartphone with 12 GB RAM, Octa-core Max 3.1 GHz CPU, Android 14 OS Edge node Laptop with 16 GB RAM, Intel i7-1260P 2.10 GHz CPU, Windows 11 OS ECC Curve FIPS approved standard curve P-256 scheme, the number of messages involved in the threshold issuance of an ECDSA signature was compared with those of representative schemes, as shown in Table 3. The results indicate that this scheme significantly reduces communication complexity. 6.2. Computing cost The computing cost is evaluated via the number of exponentiation (i.e., scalar multiplication over elliptic curve group ùê∫), and the key generation, encryption and decryption algorithms of additively homomorphic encryp- tion scheme. The additively homomorphic encryption scheme is instantiated as the elliptic curve ElGamal encryption ‚Äúin-the-exponent‚Äù. The estimated computing cost is summarized in Table 4, where exp denotes exponentiation. In Table 4, the estimated computing cost for most cells is 0. This does not mean the corresponding protocols bring no computing task to the node. There are still some lightweight operations such as integer addition, integer multiplication, random number generation, etc. Their costs are ignored compared to time-consuming operations such as exponentiation, encryption, etc. Notably, in Table 4, most computing costs are from the pre-signing phase. In practice, this phase can be executed offline before the application‚Äôs message is generated. Therefore, the scheme will not influence user experience of DApps given that the online signing phase introduces very low computing costs. To further estimate the computing cost for real-world applications, we test the running time of exponentiation in common end and edge devices (a smartphone and a laptop). Details of the hardware and software environ- ment are explained in Table 5. The average time for computing one exponentiation is 0.0273 seconds on the smartphone and 0.0116 seconds on the laptop. Based on the results, we evaluate the running time for initial splitting as 0.0273 seconds on the end node, and for pre-signing as 0.2998 seconds on the end node and 0.1280 seconds on the edge node. The results are acceptable for real-world applications.", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 17, "chunk_id": "f_oaes_cc_jsss5030_down_p17_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 230 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 7. APPLICATION The CEE key management demonstrates the integration of (2, 3)-threshold signature and the CEE comput- ing paradigm. It has wide application prospects for the DApp market and beyond. Below we illustrate the application of CEE key management in a promising blockchain-empowered sector, DePIN. 7.1. Background and key management challenges of DePIN DePIN refers to decentralized physical infrastructure networks utilizing blockchain technology to return the ownership and commercial rights of data back to the users, allowing everyone to benefit from their own digital footprint. As a promising sector, DePIN has been attracting growing interest and investment recently. The leading credit ratings agency, Moody‚Äôs Ratings, has highlighted the potential of DePIN to transform physical infrastructure networks[24]. Individuals holding physical devices (e.g., mobile phones, personal computers, smart cars, etc.) can participate in DePIN and get cryptocurrency rewards by providing data or services via their devices, such as providing real-time noise pollution information through a smartphone, supporting nav- igation services by uploading real-time traffic information through an intelligent vehicle while driving, etc. In these cases, the ownership of data is enforced by signatures issued by the private key of the device. The rewards are paid to an address derived from the corresponding public key. Considering the scenario of real-time noise pollution monitoring for a residential community through DePIN. To monitor noise pollution in the community, the related department can collect noise data via DePIN instead of deploying physical equipment itself. An individual user can participate in the DePIN network by installing some DApps for noise pollution monitoring and registering the public key to DePIN. Then, he or she can use the sound recorder of his or her smartphone to collect noise data and submit them to the data requester (e.g., server of the noise pollution monitoring DApps). The noise data are signed by the private key of the user or the smartphone, so that a reward can be paid to the cryptocurrency address derived from the corresponding public key. However, managing the private keys of physical devices is challenging for common users in DePIN. Existing solutions store and use the private key in the physical device. If the physical device is lost, broken, or attacked, the private key will be leaked or unavailable anymore, leading to two serious consequences: ‚Ä¢ the reward under the cryptocurrency address will be lost, and ‚Ä¢ a new pair of private and public keys need to be generated, and the user has to register the new public key to DePIN. 7.2. Application of CEE key management in DePIN Now we show how to use the proposed CEE key management to address the key management problem for DePIN users. As shown in Figure 5, the CEE key management service can be provided by a professional security company, a smartphonemanufacturer,etc. Tousethisservice,theDePINusersinstallclientsoftwareontheirsmartphones. By running the software of the CEE key management system in the smartphone, the private key is distributed into three shares kept in the smartphone, the router in the home, and the cloud server of the service provider. When uploading noise pollution data, the smartphone and router run the two-party signing protocol to issue a signature and attach it to the data. The key management cloud is only involved in the key distribution and update phase. With the CEE key management service, when the physical device (e.g., the smartphone) is lost, broken, or attacked, the private key share stored in it is leaked or unavailable anymore. However, the private key remains secure and available as long as the other two shares in the router and cloud server are secure; therefore, the", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 18, "chunk_id": "f_oaes_cc_jsss5030_down_p18_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 231 Figure 5. CEE key management for DePIN. CEE: cloud-edge-end. first consequence in Section 7.1 will not happen. Further, by running the update protocol, the three shares are refreshed while the public key remains unchanged, which means the second consequence will not occur. 8. CONCLUSION The CEE paradigm has been widely adopted in many online computing products and services, such as smart homes, intelligent transportation, e-health, etc. Combining (2, 3)-threshold key management with CEE pro- vides a very convenient way for implementing key management for online products and services, where the end and edge nodes near the end users are responsible for daily uses of the private key, and the cloud serves in updating the storage of private key shares. The CEE key management framework is anticipated to have wide application in various digital signature and public-key encryption schemes. The proposed (2, 3)-threshold ECDSA demonstrates the application of the CEE key management framework in the widely used ECDSA sig- nature. ItalsoadvancesthetheoryofthresholdECDSAbyfurtherreducingthecommunicationcostcompared to the best practice of parallel schemes. DECLARATIONS Authors‚Äô contributions Made substantial contributions to conception and design of the study: Zhang J, Zhang F Performed security proof and evaluation: Zhang J Provided administrative and technical support: Zhang F Availability of data and materials The supporting data for this article is available upon request directly from the authors. Financial support and sponsorship This work was partially supported by the National Natural Science Foundation of China under Grant No. 62172096; the XJTLU Research Development Fund under Grant No. RDF-21-02-014; the XJTLU Teaching Development Fund under Grant No. TDF2223-R25-207; and the Suzhou Municipal Key Laboratory for Intel-", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 19, "chunk_id": "f_oaes_cc_jsss5030_down_p19_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Page 232 Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 ligent Virtual Engineering (SZS2022004). Conflicts of interest All authors declared that there are no conflicts of interest. Ethical approval and consent to participate Not applicable. Consent for publication Not applicable. Copyright ¬© The Author(s) 2024. REFERENCES 1. Yue K, Zhang Y, Chen Y, et al. A survey of decentralizing applications via blockchain: the 5G and beyond perspective. IEEE Commun Surv Tutorials 2021Õæ23:2191‚Äì217. DOI 2. Zheng P, Jiang Z, Wu J, Zheng Z. Blockchain-based decentralized application: A survey. IEEE Open J Comput Soc 2023Õæ4:121‚Äì33. DOI 3. Nakamoto S. Bitcoin: a peer-to-peer electronic cash system. Satoshi Nakamoto 2008. Available from: https://bitcoin.org/bitcoin.pdf. [Last accessed on 12 Dec 2024] 4. Houy S, Schmid P, Bartel A. Security aspects of cryptocurrency wallets‚Äîa systematic literature review. ACM Comput Surv 2023Õæ56:1‚Äì31. DOI 5. Gennaro R, Goldfeder S, Narayanan A. Threshold-optimal DSA/ECDSA signatures and an application to bitcoin wallet security. In: Applied Cryptography and Network Security: 14th International Conference, ACNS 2016, Guildford, UK, June 19-22, 2016. Proceedings 14. SpringerÕæ 2016. pp. 156‚Äì74. DOI 6. Gennaro R, Jarecki S, Krawczyk H, Rabin T. Robust threshold DSS signatures. In: Advances in Cryptology‚ÄîEUROCRYPT‚Äô96: In- ternational Conference on the Theory and Application of Cryptographic Techniques Saragossa, Spain, May 12‚Äì16, 1996 Proceedings 15. SpringerÕæ 1996. pp. 354‚Äì71. DOI 7. Lindell Y, Nof A. Fast secure multiparty ECDSA with practical distributed key generation and applications to cryptocurrency custody. In: Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications SecurityÕæ 2018. pp. 1837‚Äì54. DOI 8. Gennaro R, Goldfeder S. Fast multiparty threshold ECDSA with fast trustless setup. In: Proceedings of the 2018 ACM SIGSAC Confer- ence on Computer and Communications SecurityÕæ 2018. pp. 1179‚Äì94. DOI 9. Zhang H, Xie G, Zou X, et al. Asynchronous threshold ECDSA with batch processing. IEEE Trans Comput Soc Syst 2023Õæ11:566‚Äì75. DOI 10. Xue H, Au MH, Liu M, et al. Efficient multiplicative-to-additive function from Joye-Libert cryptosystem and its application to threshold ECDSA. In: Proceedings of the 2023 ACM SIGSAC Conference on Computer and Communications SecurityÕæ 2023. pp. 2974‚Äì88. DOI 11. Wong HW, Ma JP, Yin HH, Chow SS. Real threshold ECDSA. In: NDSSÕæ 2023. DOI 12. Castagnos G, Catalano D, Laguillaumie F, Savasta F, Tucker I. Bandwidth-efficient threshold EC-DSA. In: IACR International Conference on Public-Key Cryptography. SpringerÕæ 2020. pp. 266‚Äì96. DOI 13. Lindell Y. Fast secure two-party ECDSA signing. In: Advances in Cryptology‚ÄìCRYPTO 2017: 37th Annual International Cryptology Conference, Santa Barbara, CA, USA, August 20‚Äì24, 2017, Proceedings, Part II 37. SpringerÕæ 2017. pp. 613‚Äì44. DOI 14. Doerner J, Kondi Y, Lee E, Shelat A. Secure two-party threshold ECDSA from ECDSA assumptions. In: 2018 IEEE Symposium on Security and Privacy (SP). IEEEÕæ 2018. pp. 980‚Äì97. DOI 15. Tu B, Chen Y, Cui H, Wang X. Fast two-party signature for upgrading ECDSA to two-party scenario easily. Theor Comput Sci 2024Õæ986:114325. DOI 16. Brown DR. Generic groups, collision resistance, and ECDSA. Des Codes Cryptogr 2005Õæ35:119‚Äì52. DOI 17. Paillier P. Public-key cryptosystems based on composite degree residuosity classes. In: International conference on the theory and applications of cryptographic techniques. SpringerÕæ 1999. pp. 223‚Äì38. DOI 18. Castagnos G, Laguillaumie F, Tucker I. Practical fully secure unrestricted inner product functional encryption modulo p. In: International Conference on the Theory and Application of Cryptology and Information Security. SpringerÕæ 2018. pp. 733‚Äì64. DOI 19. Shamir A. How to share a secret. Commun ACM 1979Õæ22:612‚Äì13. DOI 20. Herzberg A, Jarecki S, Krawczyk H, Yung M. Proactive secret sharing or: How to cope with perpetual leakage. In: Advances in Cryptology‚ÄîCRYPT0‚Äô95: 15th Annual International Cryptology Conference Santa Barbara, California, USA, August 27‚Äì31, 1995 Pro- ceedings 15. SpringerÕæ 1995. pp. 339‚Äì52. DOI 21. Aumasson JP, Hamelink A, Shlomovits O. A survey of ECDSA threshold signing. Cryptology ePrint Arch 2020. Available from: https://eprint.iacr.org/2020/1390. [Last accessed on 12 Dec 2024]", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 20, "chunk_id": "f_oaes_cc_jsss5030_down_p20_c1", "creationDate": "D:20241214131719+08'00'"}}
{"text": "Zhang et al. J Surveill Secur Saf 2024Õæ5:213-33 I http://dx.doi.org/10.20517/jsss.2024.30 Page 233 22. GƒÖgol A, Kula J, Straszak D, ≈öwiƒôtek M. Threshold ECDSA for decentralized asset custody. Cryptology ePrint Arch 2020. Available from: https://ia.cr/2020/498. [Last accessed on 12 Dec 2024] 23. Gennaro R, Goldfeder S. One round threshold ECDSA with identifiable abort. Cryptology ePrint Arch 2020. Available from: https: //ia.cr/2020/540. [Last accessed on 12 Dec 2024] 24. Ratings M. How DePINs could build the future of physical infrastructure one token at a time. 2024. Available from: https://www.mood ys.com. [Last accessed on 12 Dec 2024]", "metadata": {"source_file": "f_oaes_cc_jsss5030_down.pdf", "source_full_path": "/home/filadmin/deepseek-RAG/data/downloaded_depin_pdfs/f_oaes_cc_jsss5030_down.pdf", "page_number": 21, "chunk_id": "f_oaes_cc_jsss5030_down_p21_c1", "creationDate": "D:20241214131719+08'00'"}}
